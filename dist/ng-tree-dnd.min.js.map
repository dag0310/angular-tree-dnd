{"version":3,"sources":["ng-tree-dnd.js"],"names":["angular","isUndefinedOrNull","val","isUndefined","isDefined","module","constant","tree","empty","hidden","node","nodes","handle","place","drag","status","icon","1","0","-1","factory","_$initConvert","line2tree","data","primaryKey","parentKey","length","parentId","parent","rootIds","item","_primary","treeObjs","len","i","__children__","push","tree2tree","access_child","_i","_copy","_child","_tree","_len","copy","isArray","$document","$window","_$helper","nodrag","targetElm","attr","eventObj","e","obj","undefined","targetTouches","originalEvent","dragInfo","scope","_node","getData","getScopeTree","_parent","getNode","__parent_real__","move","pos","__index__","target","drop","getPrevSibling","changed","height","element","prop","width","offset","boundingClientRect","getBoundingClientRect","top","pageYOffset","body","scrollTop","documentElement","left","pageXOffset","scrollLeft","positionStarted","offsetX","pageX","this","offsetY","pageY","startX","lastX","startY","lastY","nowX","nowY","distX","distY","dirAx","dirX","dirY","lastDirX","lastDirY","distAxX","distAxY","positionMoved","firstMoving","newAx","Math","abs","moving","replaceIndent","indent","children","css","$callbacks","calsIndent","$injector","_fnget","name","has","get","$templateCache","temp","templatePath","copyPath","movePath","scopes","_$init","setMove","path","$id","setCopy","getPath","getCopy","getMove","directive","$compile","restrict","link","attrs","$watch","compile","new_val","new_elem","isFunction","html","append","compileReplace","replaceWith","$element","$type","$class","addClass","replace","_enabledDragDrop","dragEnabled","dropEnabled","$modelValue","$icon_class","$node_class","treeDndNode","newValue","oldValue","setScope","__icon__","getScopeNode","getElementChilds","querySelector","$nodes_class","treeDndNodes","$timeout","$http","$TreeDnDTemplate","$TreeDnDClass","$TreeDnDHelper","$TreeDnDPlugin","controller","$scope","$attrs","indent_plus","indent_unit","$tree_class","primary_key","colDefinitions","$globals","treeData","tree_nodes","sycning","extend","iconExpand","iconCollapse","iconLeaf","for_all_descendants","fn","_nodes","getLastDescendant","last_child","n","selected_node","onClick","on_click","setTimeout","onSelect","select_node","on_select","passedExpand","_clone","toggleExpand","fnCallback","expand","__expanded__","getHash","__parent__","__uid__","accept","moveTo","isChanged","level","skipUnit","skipEdge","unit","edge","droppable","draggable","beforeDrop","event","changeKey","_key","random","__selected__","clone","_this","remove","splice","add","enableDrag","enableDrop","placeElm","horizontal","dragDelay","enabledMove","statusMove","enabledHotkey","enabledCollapse","statusElm","dragging","beforeDrag","scopeDrag","dragStop","skiped","dropped","info","pass","isMove","_nodeAdd","_move","_parentRemove","_parentAdd","dragStart","dragMove","setDragging","enableMove","enableStatus","enabledStatus","hideStatus","refreshStatus","statusElmOld","find","removeClass","setPositionStatus","z-index","targeting","_index","index","_hash","getScope","initPlace","dragElm","tagName","isTable","toLowerCase","document","createElement","_len_down","parentNode","insertBefore","hidePlace","showPlace","$safeApply","phase","$root","$$phase","$apply","tElement","tAttrs","$_Template","_element","trim","_fnInitFilter","_fnInitOrderBy","_fnGetControl","_fnInitDrag","w","_curW","_typeW","_nameW","_defaultW","_scopeW","_NotW","_AfterW","_BeforeW","getExpandOn","_firstNode","_keys","Object","keys","_regex","RegExp","test","expandingProperty","getColDefs","_col_defs","field","do_f","root","parent_real","visible","_icon","_index_real","_dept","_hashKey","expandLevel","__index_real__","__level__","__visible__","__hashKey__","__dept__","reload_data","oData","_data","_tree_nodes","console","log","expandOn","columnDefs","orderBy","filter","filterOptions","_offset","_max","_min","_deptTotal","_defaultFilterOption","showParent","showChild","beginAnd","check_exist_attr","existAttr","isAnd","for_each_attrs","exist","passed","generateWatch","type","nameAttr","valDefault","nameScope","fnNotExist","fnAfter","fnBefore","old","indexOf","_watches","isHotkey","templateCopy","_url","templateMove","treeClass","$tree","colDefs","filters","_passed","_iF","_keysF","_lenF","enabledFilter","option","indentUnit","optCallbacks","forEach","value","key","lenW","templateUrl","cache","success","$filter","_filter","_state","options","fieldChild","parentPassed","_nodePassed","_childPassed","_fnCheck","callback","check","err","_fnProccess","condition","for_each_filter","_iO","_keysO","_lenO","_callback","conditions","_fnAfter","isNodePassed","isChildPassed","isParentPassed","__filtered__","__filtered_visible__","_fnBefore","_fnConvert","isObject","_fnMain","_options","_fnOrderBy","fnOrderBy","_fnOrder","list","isString","_fnDragEnd","holderWasShown","_fnPlaceHolder","$params","_fnDragStart","hasTouch","button","which","uiTreeDragging","eventElm","eventScope","dragScope","eventElmTagName","_$scope","preventDefault","offsetEdge","_width","_scope","_needCollapse","_copied","_tbody","_holder","_swaper","after","bind","dragEndEvent","dragMoveEvent","dragCancelEvent","document_height","max","scrollHeight","offsetHeight","clientHeight","document_width","scrollWidth","offsetWidth","clientWidth","_fnDragMove","dragStarted","dragDelaying","getSelection","removeAllRanges","selection","leftElmPos","topElmPos","top_scroll","window","bottom_scroll","innerHeight","scrollBy","targetScope","targetBefore","targetOffset","isEmpty","isSwapped","_target","fnSwapTree","targetX","targetY","isVeritcal","_info","_drag","_drop","treeScope","isHolder","elementFromPoint","abortDrag","$$apply","_height","_prev","dragBorder","prepend","_isTable","_status","_fnBindDrag","unbind","_fnDragStartEvent","dragTimer","cancel","_fnKeydownHandler","keyCode","shiftKey","_fnKeyupHandler","bindDrag","dragEnd","keydownHandler","keyupHandler","$on","fnSetCollapse","fnSetExpand","expand_all_parents","deselect_node","get_parent","for_all_ancestors","child","add_node","new_node","add_node_root","expand_all","collapse_all","remove_node","expand_node","collapse_node","get_selected_node","get_first_node","get_children","get_siblings","get_next_sibling","get_prev_sibling","get_first_child","get_closest_ancestor_next_sibling","get_next_node","get_prev_node","get_last_descendant","select_parent_node","select_first_node","select_next_sibling","select_prev_sibling","select_next_node","select_prev_node","run","put","join","call"],"mappings":"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","file":"ng-tree-dnd.min.js","sourcesContent":["/**\r\n * The MIT License (MIT)\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to\r\n * deal in the Software without restriction, including without limitation the\r\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\n * sell copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\n * IN THE SOFTWARE.\r\n * @preserve\r\n */\r\n\r\n/**\r\n * Implementing TreeDnD & Event DrapnDrop (allow drag multi tree-table include all type: table, ol, ul)\r\n * Demo: http://thienhung1989.github.io/angular-tree-dnd\r\n * Github: https://github.com/thienhung1989/angular-tree-dnd\r\n * @version 3.0.4\r\n * @preserve\r\n * (c) 2015 Nguyuễn Thiện Hùng - <nguyenthienhung1989@gmail.com>\r\n */\r\n(function () {\r\n    'use strict';\r\n    angular.isUndefinedOrNull = function (val) {\r\n        return angular.isUndefined(val) || val === null;\r\n    }\r\n\r\n    angular.isDefined = function (val) {\r\n        return !(angular.isUndefined(val) || val === null);\r\n    }\r\n\r\n    angular.module('ntt.TreeDnD', ['template/TreeDnD/TreeDnD.html']).constant(\r\n        '$TreeDnDClass', {\r\n            tree:   'tree-dnd',\r\n            empty:  'tree-dnd-empty',\r\n            hidden: 'tree-dnd-hidden',\r\n            node:   'tree-dnd-node',\r\n            nodes:  'tree-dnd-nodes',\r\n            handle: 'tree-dnd-handle',\r\n            place:  'tree-dnd-placeholder',\r\n            drag:   'tree-dnd-drag',\r\n            status: 'tree-dnd-status',\r\n            icon:   {\r\n                '1':  'glyphicon glyphicon-minus',\r\n                '0':  'glyphicon glyphicon-plus',\r\n                '-1': 'glyphicon glyphicon-file'\r\n            }\r\n        }\r\n    ).factory(\r\n    '$TreeDnDConvert', function () {\r\n        var _$initConvert = {\r\n            line2tree: function (data, primaryKey, parentKey) {\r\n                if (!data || data.length === 0 || !primaryKey || !parentKey) {\r\n                    return [];\r\n                }\r\n                var tree = [],\r\n                    rootIds = [],\r\n                    item = data[0],\r\n                    _primary = item[primaryKey],\r\n                    treeObjs = {},\r\n                    parentId, parent,\r\n                    len = data.length,\r\n                    i = 0;\r\n                while (i < len) {\r\n                    item = data[i++];\r\n                    _primary = item[primaryKey];\r\n                    treeObjs[_primary] = item;\r\n                    parentId = item[parentKey];\r\n                    if (parentId) {\r\n                        parent = treeObjs[parentId];\r\n                        if (parent.__children__) {\r\n                            parent.__children__.push(item);\r\n                        } else {\r\n                            parent.__children__ = [item];\r\n                        }\r\n                    } else {\r\n                        rootIds.push(_primary);\r\n                    }\r\n                }\r\n                len = rootIds.length;\r\n                for (i = 0; i < len; i++) {\r\n                    tree.push(treeObjs[rootIds[i]]);\r\n                }\r\n                return tree;\r\n            },\r\n            tree2tree: function (data, parentKey) {\r\n                var access_child = function (data) {\r\n                    var _tree = [];\r\n                    var _i, _len = data.length, _copy, _child;\r\n                    for (_i = 0; _i < _len; _i++) {\r\n                        _copy = angular.copy(data[_i]);\r\n                        if (angular.isArray(_copy[parentKey]) && _copy[parentKey].length > 0) {\r\n                            _child = access_child(_copy[parentKey]);\r\n                            delete(_copy[parentKey]);\r\n                            _copy.__children__ = _child;\r\n                        }\r\n                        _tree.push(_copy);\r\n                    }\r\n                    return _tree;\r\n                };\r\n\r\n                return access_child(data);\r\n            }\r\n        }\r\n\r\n        return _$initConvert;\r\n    }\r\n).factory(\r\n    '$TreeDnDHelper', [\r\n        '$document', '$window', function ($document, $window) {\r\n            var _$helper = {\r\n                nodrag:          function (targetElm) {\r\n                    return (typeof targetElm.attr('data-nodrag')) !== \"undefined\";\r\n                },\r\n                eventObj:        function (e) {\r\n                    var obj = e;\r\n                    if (e.targetTouches !== undefined) {\r\n                        obj = e.targetTouches.item(0);\r\n                    } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\r\n                        obj = e.originalEvent.targetTouches.item(0);\r\n                    }\r\n                    return obj;\r\n                },\r\n                dragInfo:        function (scope) {\r\n                    var _node = scope.getData(),\r\n                        _tree = scope.getScopeTree(),\r\n                        _parent = scope.getNode(_node.__parent_real__);\r\n                    return {\r\n                        node:    _node,\r\n                        parent:  _parent,\r\n                        move:    {\r\n                            parent: _parent,\r\n                            pos:    _node.__index__\r\n                        },\r\n                        scope:   scope,\r\n                        target:  _tree,\r\n                        drag:    _tree,\r\n                        drop:    scope.getPrevSibling(_node),\r\n                        changed: false\r\n                    };\r\n                },\r\n                height:          function (element) {\r\n                    return element.prop('scrollHeight');\r\n                },\r\n                width:           function (element) {\r\n                    return element.prop('scrollWidth');\r\n                },\r\n                offset:          function (element) {\r\n                    var boundingClientRect = element[0].getBoundingClientRect();\r\n                    return {\r\n                        width:  element.prop('offsetWidth'),\r\n                        height: element.prop('offsetHeight'),\r\n                        top:    boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\r\n                        left:   boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\r\n                    };\r\n                },\r\n                positionStarted: function (e, target) {\r\n                    var pos = {};\r\n                    pos.offsetX = e.pageX - this.offset(target).left;\r\n                    pos.offsetY = e.pageY - this.offset(target).top;\r\n                    pos.startX = pos.lastX = e.pageX;\r\n                    pos.startY = pos.lastY = e.pageY;\r\n                    pos.nowX = pos.nowY = pos.distX = pos.distY = pos.dirAx = 0;\r\n                    pos.dirX = pos.dirY = pos.lastDirX = pos.lastDirY = pos.distAxX = pos.distAxY = 0;\r\n                    return pos;\r\n                },\r\n                positionMoved:   function (e, pos, firstMoving) {\r\n                    // mouse position last events\r\n                    pos.lastX = pos.nowX;\r\n                    pos.lastY = pos.nowY;\r\n                    // mouse position this events\r\n                    pos.nowX = e.pageX;\r\n                    pos.nowY = e.pageY;\r\n                    // distance mouse moved between events\r\n                    pos.distX = pos.nowX - pos.lastX;\r\n                    pos.distY = pos.nowY - pos.lastY;\r\n                    // direction mouse was moving\r\n                    pos.lastDirX = pos.dirX;\r\n                    pos.lastDirY = pos.dirY;\r\n                    // direction mouse is now moving (on both axis)\r\n                    pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\r\n                    pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\r\n                    // axis mouse is now moving on\r\n                    var newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\r\n                    // do nothing on first move\r\n                    if (firstMoving) {\r\n                        pos.dirAx = newAx;\r\n                        pos.moving = true;\r\n                        return;\r\n                    }\r\n                    // calc distance moved on this axis (and direction)\r\n                    if (pos.dirAx !== newAx) {\r\n                        pos.distAxX = 0;\r\n                        pos.distAxY = 0;\r\n                    } else {\r\n                        pos.distAxX += Math.abs(pos.distX);\r\n                        if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\r\n                            pos.distAxX = 0;\r\n                        }\r\n                        pos.distAxY += Math.abs(pos.distY);\r\n                        if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\r\n                            pos.distAxY = 0;\r\n                        }\r\n                    }\r\n                    pos.dirAx = newAx;\r\n                },\r\n                replaceIndent:   function (scope, element, indent, attr) {\r\n                    attr = attr ? attr : 'left';\r\n                    angular.element(element.children()[0]).css(attr, scope.$callbacks.calsIndent(indent));\r\n                }\r\n            };\r\n            return _$helper;\r\n        }]\r\n).factory(\r\n    '$TreeDnDPlugin',['$injector', function ($injector) {\r\n        var _fnget = function (name) {\r\n                if (angular.isDefined($injector) && $injector.has(name)) {\r\n                    return $injector.get(name);\r\n                }\r\n                return null;\r\n            };\r\n        return _fnget;\r\n    }]\r\n).factory(\r\n    '$TreeDnDTemplate', [\r\n        '$templateCache', function ($templateCache) {\r\n            var templatePath = 'template/TreeDnD/TreeDnD.html',\r\n                copyPath = 'template/TreeDnD/TreeDnDStatusCopy.html',\r\n                movePath = 'template/TreeDnD/TreeDnDStatusMove.html',\r\n                scopes = {},\r\n                temp,\r\n                _$init = {\r\n                    setMove: function (path, scope) {\r\n                        if (!scopes[scope.$id]) {\r\n                            scopes[scope.$id] = {};\r\n                        }\r\n                        scopes[scope.$id].movePath = path;\r\n                    },\r\n                    setCopy: function (path, scope) {\r\n                        if (!scopes[scope.$id]) {\r\n                            scopes[scope.$id] = {};\r\n                        }\r\n                        scopes[scope.$id].copyPath = path;\r\n                    },\r\n                    getPath: function () {\r\n                        return templatePath;\r\n                    },\r\n                    getCopy: function (scope) {\r\n                        if (scopes[scope.$id] && scopes[scope.$id].copyPath) {\r\n                            temp = $templateCache.get(scopes[scope.$id].copyPath);\r\n                            if (temp) {\r\n                                return temp;\r\n                            }\r\n                        }\r\n                        return $templateCache.get(copyPath);\r\n                    },\r\n                    getMove: function (scope) {\r\n                        if (scopes[scope.$id] && scopes[scope.$id].movePath) {\r\n                            temp = $templateCache.get(scopes[scope.$id].movePath);\r\n                            if (temp) {\r\n                                return temp;\r\n                            }\r\n                        }\r\n                        return $templateCache.get(movePath);\r\n                    }\r\n                };\r\n\r\n            return _$init;\r\n        }]\r\n).directive(\r\n    'compile', [\r\n        '$compile', function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compile, function (new_val) {\r\n                            if (new_val) {\r\n                                /*\r\n                                 * Compile creates a linking function\r\n                                 * that can be used with any scope.\r\n                                 */\r\n                                var link = $compile(new_val);\r\n                                /*\r\n                                 * Executing the linking function\r\n                                 * creates a new element.\r\n                                 */\r\n                                var new_elem = link(scope);\r\n                                // Which we can then append to our DOM element.\r\n                                if(angular.isFunction(element.empty)){\r\n                                    element.empty()\r\n                                }else{\r\n                                    element.html('');\r\n                                }\r\n\r\n                                element.append(new_elem)\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n)\r\n    .directive(\r\n    'compileReplace', [\r\n        '$compile', function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compileReplace, function (new_val) {\r\n                            if (new_val) {\r\n                                /*\r\n                                 * Compile creates a linking function\r\n                                 * that can be used with any scope.\r\n                                 */\r\n                                var link = $compile(new_val);\r\n                                /*\r\n                                 * Executing the linking function\r\n                                 * creates a new element.\r\n                                 */\r\n                                var new_elem = link(scope);\r\n\r\n                                element.replaceWith(new_elem)\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n).directive(\r\n    'treeDndNodeHandle', function () {\r\n        return {\r\n            restrict: 'A',\r\n            scope:    true,\r\n            link:     function (scope, element, attrs) {\r\n                scope.$element = element;\r\n                scope.$type = 'TreeDnDNodeHandle';\r\n                if (scope.$class.handle) {\r\n                    element.addClass(scope.$class.handle);\r\n                }\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDndNode', function () {\r\n        return {\r\n            restrict: 'A',\r\n            replace:  true,\r\n            link:     function (scope, element, attrs) {\r\n                var _enabledDragDrop = (typeof scope.dragEnabled === 'boolean' || typeof scope.dropEnabled === 'boolean');\r\n                scope.$modelValue = null;\r\n                scope.$icon_class = '';\r\n                scope.$node_class = '';\r\n\r\n                if (scope.$class.node) {\r\n                    element.addClass(scope.$class.node);\r\n                    scope.$node_class = scope.$class.node;\r\n                }\r\n\r\n                scope.$watch(\r\n                    attrs.treeDndNode, function (newValue, oldValue, scope) {\r\n                        if (_enabledDragDrop) {\r\n                            scope.setScope(scope, newValue);\r\n                        }\r\n                        scope.$modelValue = newValue;\r\n                        scope.$icon_class = scope.$class.icon[newValue.__icon__];\r\n                    }, true\r\n                );\r\n\r\n                if (_enabledDragDrop) {\r\n\r\n                    scope.$element = element;\r\n                    scope.$type = 'TreeDnDNode';\r\n\r\n                    scope.getScopeNode = function () {\r\n                        return scope;\r\n                    };\r\n\r\n                    scope.getData = function () {\r\n                        return scope.$modelValue;\r\n                    };\r\n\r\n                    scope.getElementChilds = function () {\r\n                        return angular.element(element[0].querySelector('[tree-dnd-nodes]'));\r\n                    };\r\n                }\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDndNodes', function () {\r\n        return {\r\n            restrict: 'A',\r\n            replace:  true,\r\n            link:     function (scope, element, attrs) {\r\n                scope.nodes = [];\r\n                scope.$nodes_class = '';\r\n                scope.$type = 'TreeDnDNodes';\r\n                scope.$element = element;\r\n                scope.getScopeNode = null;\r\n\r\n                scope.$watch(\r\n                    attrs.treeDndNodes, function (newValue, oldValue, scope) {\r\n                        scope.nodes = newValue;\r\n                    }, true\r\n                );\r\n\r\n                if (scope.$class.nodes) {\r\n                    element.addClass(scope.$class.nodes);\r\n                    scope.$nodes_class = scope.$class.nodes;\r\n                }\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDnd', [\r\n        '$injector', '$timeout', '$http', '$compile', '$window', '$document', '$templateCache',\r\n        '$TreeDnDTemplate', '$TreeDnDClass', '$TreeDnDHelper', '$TreeDnDPlugin',\r\n        function ($injector, $timeout, $http, $compile, $window, $document, $templateCache,\r\n                  $TreeDnDTemplate, $TreeDnDClass, $TreeDnDHelper, $TreeDnDPlugin) {\r\n            return {\r\n                restrict:   'E',\r\n                scope:      true,\r\n                replace:    true,\r\n                controller: [\r\n                    '$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\r\n                        $scope.indent = 20;\r\n                        $scope.indent_plus = 15;\r\n                        $scope.indent_unit = 'px';\r\n                        $scope.$tree_class = 'table';\r\n                        $scope.primary_key = '__uid__';\r\n\r\n\r\n                        $scope.$type = 'TreeDnD';\r\n                        // $scope.enabledFilter = null;\r\n                        $scope.colDefinitions = [];\r\n                        $scope.$globals = {};\r\n                        $scope.$class = {};\r\n\r\n                        $scope.treeData = [];\r\n                        $scope.tree_nodes = [];\r\n\r\n                        $scope.sycning = false;\r\n\r\n                        $scope.$class = angular.copy($TreeDnDClass);\r\n                        angular.extend(\r\n                            $scope.$class.icon, {\r\n                                '1':  $attrs.iconExpand || 'glyphicon glyphicon-minus',\r\n                                '0':  $attrs.iconCollapse || 'glyphicon glyphicon-plus',\r\n                                '-1': $attrs.iconLeaf || 'glyphicon glyphicon-file'\r\n                            }\r\n                        );\r\n\r\n                        $scope.for_all_descendants = function (node, fn) {\r\n                            if (angular.isFunction(fn)) {\r\n                                var _i, _len, _nodes;\r\n\r\n                                if (fn(node)) {\r\n                                    return false;\r\n                                }\r\n                                _nodes = node.__children__;\r\n                                _len = _nodes.length;\r\n                                for (_i = 0; _i < _len; _i++) {\r\n                                    if (!$scope.for_all_descendants(_nodes[_i], fn)) {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                            }\r\n                            return true;\r\n                        };\r\n\r\n                        $scope.getLastDescendant = function (node) {\r\n                            var last_child, n;\r\n                            if (!node) {\r\n                                node = $scope.tree ? $scope.tree.selected_node : false;\r\n                            }\r\n                            if(node === false){\r\n                                return false;\r\n                            }\r\n                            n = node.__children__.length;\r\n                            if (n === 0) {\r\n                                return node;\r\n                            } else {\r\n                                last_child = node.__children__[n - 1];\r\n                                return $scope.getLastDescendant(last_child);\r\n                            }\r\n                        };\r\n\r\n                        $scope.getElementChilds = function () {\r\n                            return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\r\n                        };\r\n\r\n                        $scope.onClick = function (node) {\r\n                            if (angular.isDefined($scope.tree) && angular.isFunction($scope.tree.on_click)) {\r\n                                // We want to detach from Angular's digest cycle so we can\r\n                                // independently measure the time for one cycle.\r\n                                setTimeout(\r\n                                    function () {\r\n                                        $scope.tree.on_click(node);\r\n                                    }, 0\r\n                                );\r\n                            }\r\n                        };\r\n\r\n                        $scope.onSelect = function (node) {\r\n                            if (angular.isDefined($scope.tree)) {\r\n                                if (node !== $scope.tree.selected_node) {\r\n                                    $scope.tree.select_node(node);\r\n                                }\r\n\r\n                                if (angular.isFunction($scope.tree.on_select)) {\r\n                                    setTimeout(\r\n                                        function () {\r\n                                            $scope.tree.on_select(node);\r\n                                        }, 0\r\n                                    );\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        var passedExpand, _clone;\r\n                        $scope.toggleExpand = function (node, fnCallback) {\r\n                            passedExpand = true;\r\n                            if (angular.isFunction(fnCallback) && !fnCallback(node)) {\r\n                                passedExpand = false;\r\n                            } else if (angular.isFunction($scope.$callbacks.expand) && !$scope.$callbacks.expand(node)) {\r\n                                passedExpand = false;\r\n                            }\r\n\r\n                            if (passedExpand) {\r\n                                if (node.__children__.length > 0) {\r\n                                    node.__expanded__ = !node.__expanded__;\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        $scope.getHash = function (node) {\r\n                            if ($scope.primary_key === '__uid__') {\r\n                                return '#' + node.__parent__ + '#' + node.__uid__;\r\n                            } else {\r\n                                return '#' + node.__parent__ + '#' + node[$scope.primary_key];\r\n                            }\r\n                        };\r\n\r\n                        $scope.$callbacks = {\r\n                            for_all_descendants: $scope.for_all_descendants,\r\n                            expand:              function (node) {\r\n                                return true;\r\n                            },\r\n                            accept:              function (dragInfo, moveTo, isChanged) {\r\n                                return $scope.dropEnabled === true;\r\n                            },\r\n                            calsIndent:          function (level, skipUnit, skipEdge) {\r\n                                var unit = 0,\r\n                                    edge = skipEdge ? 0 : $scope.indent_plus;\r\n                                if (!skipUnit) {\r\n                                    unit = $scope.indent_unit ? $scope.indent_unit : 'px';\r\n                                }\r\n\r\n                                if (level - 1 < 1) {\r\n                                    return edge + unit;\r\n                                } else {\r\n                                    return $scope.indent * (level - 1) + edge + unit;\r\n                                }\r\n                            },\r\n                            droppable:           function () {\r\n                                return $scope.dropEnabled === true;\r\n                            },\r\n                            draggable:           function () {\r\n                                return $scope.dragEnabled === true;\r\n                            },\r\n                            beforeDrop:          function (event) {\r\n                                return true;\r\n                            },\r\n                            changeKey:           function (node) {\r\n                                var _key = node.__uid__;\r\n                                node.__uid__ = Math.random();\r\n                                if (node.__selected__) {\r\n                                    delete(node.__selected__);\r\n                                }\r\n\r\n                                if ($scope.primary_key !== '__uid__') {\r\n                                    _key = '' + node[$scope.primary_key];\r\n                                    _key = _key.replace(/_#.+$/g, '') + '_#' + node.__uid__;\r\n\r\n                                    node[$scope.primary_key] = _key;\r\n                                }\r\n                                // delete(node.__hashKey__);\r\n                            },\r\n                            clone:               function (node, _this) {\r\n                                _clone = angular.copy(node);\r\n                                this.for_all_descendants(_clone, this.changeKey);\r\n                                return _clone;\r\n                            },\r\n                            remove:              function (node, parent, _this) {\r\n                                return parent.splice(node.__index__, 1)[0];\r\n                            },\r\n                            add:                 function (node, pos, parent, _this) {\r\n                                if (parent) {\r\n                                    if (parent.length > -1) {\r\n                                        if (pos > -1) {\r\n                                            parent.splice(pos, 0, node);\r\n                                        } else {\r\n                                            // todo If children need load crazy\r\n                                            parent.push(node);\r\n                                        }\r\n                                    } else {\r\n                                        parent.push(node);\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        if ($attrs.enableDrag || $attrs.enableDrop) {\r\n                            $scope.placeElm = null;\r\n                            //                            $scope.dragBorder = 30;\r\n                            $scope.dragEnabled = null;\r\n                            $scope.dropEnabled = null;\r\n                            $scope.horizontal = null;\r\n\r\n                            if ($attrs.enableDrag) {\r\n\r\n                                $scope.dragDelay = 0;\r\n                                $scope.enabledMove = true;\r\n                                $scope.statusMove = true;\r\n                                $scope.enabledHotkey = false;\r\n                                $scope.enabledCollapse = null;\r\n                                $scope.statusElm = null;\r\n                                $scope.dragging = null;\r\n\r\n                                angular.extend(\r\n                                    $scope.$callbacks, {\r\n                                        beforeDrag: function (scopeDrag) {\r\n                                            return true;\r\n                                        },\r\n                                        dragStop:   function (event, skiped) {},\r\n                                        dropped:    function (info, pass, isMove) {\r\n                                            if (!info) {\r\n                                                return null;\r\n                                            }\r\n\r\n                                            if (!info.changed && isMove) {\r\n                                                return false;\r\n                                            }\r\n                                            var _node = info.node,\r\n                                                _nodeAdd = null,\r\n                                                _move = info.move,\r\n                                                _parent = null,\r\n                                                _parentRemove = (info.parent || info.drag.treeData),\r\n                                                _parentAdd = (_move.parent || info.target.treeData);\r\n\r\n                                            if (info.target.$callbacks.accept(info, info.move, info.changed)) {\r\n                                                if (isMove) {\r\n                                                    _parent = _parentRemove;\r\n                                                    if (angular.isDefined(_parent.__children__)) {\r\n                                                        _parent = _parent.__children__;\r\n                                                    }\r\n\r\n                                                    _nodeAdd = info.drag.$callbacks.remove(\r\n                                                        _node,\r\n                                                        _parent,\r\n                                                        info.drag.$callbacks\r\n                                                    );\r\n                                                } else {\r\n                                                    _nodeAdd = info.drag.$callbacks.clone(_node, info.drag.$callbacks);\r\n                                                }\r\n\r\n                                                // if node dragging change index in sample node parent\r\n                                                // and index node decrement\r\n                                                if (isMove &&\r\n                                                    info.drag === info.target &&\r\n                                                    _parentRemove === _parentAdd &&\r\n                                                    _move.pos >= info.node.__index__) {\r\n                                                    _move.pos--;\r\n                                                }\r\n\r\n                                                _parent = _parentAdd;\r\n                                                if (_parent.__children__) {\r\n                                                    _parent = _parent.__children__;\r\n                                                }\r\n\r\n                                                info.target.$callbacks.add(\r\n                                                    _nodeAdd,\r\n                                                    _move.pos,\r\n                                                    _parent,\r\n                                                    info.drag.$callbacks\r\n                                                );\r\n\r\n                                                return true;\r\n                                            }\r\n\r\n                                            return false;\r\n                                        },\r\n                                        dragStart:  function (event) {},\r\n                                        dragMove:   function (event) {}\r\n                                    }\r\n                                );\r\n\r\n                                $scope.setDragging = function (dragInfo) {\r\n                                    $scope.dragging = dragInfo;\r\n                                };\r\n\r\n                                $scope.enableMove = function (val) {\r\n                                    if (typeof val === \"boolean\") {\r\n                                        $scope.enabledMove = val;\r\n                                    } else {\r\n                                        $scope.enabledMove = true;\r\n                                    }\r\n                                };\r\n\r\n                                if ($attrs.enableStatus) {\r\n                                    $scope.enabledStatus = false;\r\n\r\n                                    $scope.hideStatus = function () {\r\n                                        if ($scope.statusElm) {\r\n                                            $scope.statusElm.addClass($scope.$class.hidden);\r\n                                        }\r\n                                    };\r\n\r\n                                    $scope.refreshStatus = function () {\r\n                                        if (!$scope.dragging) {\r\n                                            return;\r\n                                        }\r\n\r\n                                        if ($scope.enabledStatus) {\r\n                                            var statusElmOld = $scope.statusElm;\r\n                                            if ($scope.enabledMove) {\r\n                                                $scope.statusElm = angular.element($TreeDnDTemplate.getMove($scope));\r\n                                            } else {\r\n                                                $scope.statusElm = angular.element($TreeDnDTemplate.getCopy($scope));\r\n                                            }\r\n\r\n                                            if (statusElmOld !== $scope.statusElm) {\r\n                                                if (statusElmOld) {\r\n                                                    $scope.statusElm.attr('class', statusElmOld.attr('class'));\r\n                                                    $scope.statusElm.attr('style', statusElmOld.attr('style'));\r\n                                                    statusElmOld.remove();\r\n                                                }\r\n                                                $document.find('body').append($scope.statusElm);\r\n\r\n                                            }\r\n\r\n                                            $scope.statusElm.removeClass($scope.$class.hidden);\r\n                                        }\r\n                                    };\r\n\r\n                                    $scope.setPositionStatus = function (e) {\r\n                                        if ($scope.statusElm) {\r\n                                            $scope.statusElm.css(\r\n                                                {\r\n                                                    'left':    e.pageX + 10 + 'px',\r\n                                                    'top':     e.pageY + 15 + 'px',\r\n                                                    'z-index': 9999\r\n                                                }\r\n                                            );\r\n                                            $scope.statusElm.addClass($scope.$class.status);\r\n                                        }\r\n                                    };\r\n                                }\r\n                            }\r\n\r\n                            $scope.targeting = false;\r\n\r\n                            $scope.getPrevSibling = function (node) {\r\n                                if (node && node.__index__ > 0) {\r\n                                    var _parent, _index = node.__index__ - 1;\r\n\r\n                                    if (angular.isDefined(node.__parent_real__)) {\r\n                                        _parent = $scope.tree_nodes[node.__parent_real__];\r\n                                        return _parent.__children__[_index];\r\n                                    }\r\n                                    return $scope.treeData[_index];\r\n\r\n                                }\r\n                                return null;\r\n                            };\r\n\r\n                            $scope.getNode = function (index) {\r\n                                if (angular.isUndefinedOrNull(index)) {\r\n                                    return null;\r\n                                }\r\n                                return $scope.tree_nodes[index];\r\n                            };\r\n\r\n                            $scope.setScope = function (scope, node) {\r\n                                var _hash = $scope.getHash(node);\r\n                                if ($scope.$globals[_hash] !== scope) {\r\n                                    $scope.$globals[_hash] = scope;\r\n                                }\r\n                            };\r\n\r\n                            $scope.getScope = function (node) {\r\n                                if (node) {\r\n                                    return $scope.$globals[$scope.getHash(node)];\r\n                                }\r\n                                return $scope;\r\n\r\n                            };\r\n\r\n                            $scope.initPlace = function (element, dragElm) {\r\n\r\n                                var tagName = null,\r\n                                    isTable = false;\r\n\r\n                                if (element) {\r\n                                    tagName = element.prop('tagName').toLowerCase();\r\n                                    isTable = (tagName === 'tr' || tagName === 'td');\r\n                                } else {\r\n                                    tagName = $scope.getElementChilds().prop('tagName').toLowerCase();\r\n                                    isTable = (tagName === 'tbody' || tagName === 'table');\r\n                                }\r\n\r\n                                if (!$scope.placeElm) {\r\n\r\n                                    if (isTable) {\r\n                                        $scope.placeElm = angular.element($window.document.createElement('tr'));\r\n                                        var _len_down = $scope.colDefinitions.length;\r\n                                        $scope.placeElm.append(\r\n                                            angular.element($window.document.createElement('td'))\r\n                                                .addClass($scope.$class.empty)\r\n                                                .addClass('indented')\r\n                                                .addClass($scope.$class.place)\r\n                                        );\r\n                                        while (_len_down-- > 0) {\r\n                                            $scope.placeElm.append(\r\n                                                angular.element($window.document.createElement('td'))\r\n                                                    .addClass($scope.$class.empty)\r\n                                                    .addClass($scope.$class.place)\r\n                                            );\r\n                                        }\r\n                                    } else {\r\n                                        $scope.placeElm = angular.element($window.document.createElement('li'))\r\n                                            .addClass($scope.$class.empty)\r\n                                            .addClass($scope.$class.place);\r\n                                    }\r\n\r\n                                }\r\n\r\n                                if (dragElm) {\r\n                                    $scope.placeElm.css('height', $TreeDnDHelper.height(dragElm) + 'px');\r\n                                }\r\n\r\n                                if (element) {\r\n                                    element[0].parentNode.insertBefore($scope.placeElm[0], element[0]);\r\n                                } else {\r\n                                    $scope.getElementChilds().append($scope.placeElm);\r\n                                }\r\n\r\n                                return $scope.placeElm;\r\n                            };\r\n\r\n                            $scope.hidePlace = function () {\r\n                                if ($scope.placeElm) {\r\n                                    $scope.placeElm.addClass($scope.$class.hidden);\r\n                                }\r\n                            };\r\n\r\n                            $scope.showPlace = function () {\r\n                                if ($scope.placeElm) {\r\n                                    $scope.placeElm.removeClass($scope.$class.hidden);\r\n                                }\r\n                            };\r\n\r\n                            $scope.getScopeTree = function () {\r\n                                return $scope;\r\n                            };\r\n\r\n                        }\r\n\r\n                        $scope.$safeApply = function (fn) {\r\n                            var phase = this.$root.$$phase;\r\n                            if (phase === '$apply' || phase === '$digest') {\r\n                                if (fn && (typeof(fn) === 'function')) {\r\n                                    fn();\r\n                                }\r\n                            } else {\r\n                                this.$apply(fn);\r\n                            }\r\n                        };\r\n\r\n                    }],\r\n                compile:    function compile(tElement, tAttrs) {\r\n\r\n                    var $_Template = '',\r\n                        _element = tElement.html().trim();\r\n                    if (_element.length > 0) {\r\n                        $_Template = _element;\r\n                        tElement.html('');\r\n                    }\r\n\r\n                    return function fnPost(scope, element, attrs) {\r\n                        var getExpandOn = function () {\r\n                                if (scope.treeData && scope.treeData.length) {\r\n                                    var _firstNode = scope.treeData[0], _keys = Object.keys(_firstNode),\r\n                                        _regex = new RegExp(\"^__([a-zA-Z0-9_\\-]*)__$\"),\r\n                                        _len,\r\n                                        i;\r\n                                    // Auto get first field with type is string;\r\n                                    for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                                        if (typeof (_firstNode[_keys[i]]) === 'string' && !_regex.test(_keys[i])) {\r\n                                            scope.expandingProperty = _keys[i];\r\n                                            return;\r\n                                        }\r\n                                    }\r\n\r\n                                    // Auto get first\r\n                                    if (angular.isUndefinedOrNull(scope.expandingProperty)) {\r\n                                        scope.expandingProperty = _keys[0];\r\n                                    }\r\n\r\n                                }\r\n                            },\r\n                            getColDefs = function () {\r\n                                // Auto get Defs except attribute __level__ ....\r\n                                if (scope.treeData.length) {\r\n                                    var _col_defs = [], _firstNode = scope.treeData[0],\r\n                                        _regex = new RegExp(\"(^__([a-zA-Z0-9_\\-]*)__$|^\" + scope.expandingProperty + \"$)\"),\r\n                                        _keys = Object.keys(_firstNode),\r\n                                        i, _len;\r\n                                    // Auto get first field with type is string;\r\n                                    for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                                        if (typeof (_firstNode[_keys[i]]) === 'string' && !_regex.test(_keys[i])) {\r\n                                            _col_defs.push(\r\n                                                {\r\n                                                    field: _keys[i]\r\n                                                }\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                    scope.colDefinitions = _col_defs;\r\n                                }\r\n                            },\r\n                            _fnInitFilter,\r\n                            _fnInitOrderBy,\r\n                            _fnGetControl,\r\n                            _fnInitDrag,\r\n                            do_f = function (root, node, parent, parent_real, level, visible, index) {\r\n                                var _i, _len, _icon, _index_real, _dept, _hashKey;\r\n                                if (!angular.isArray(node.__children__)) {\r\n                                    node.__children__ = [];\r\n                                }\r\n\r\n                                node.__parent_real__ = parent_real;\r\n                                node.__parent__ = parent;\r\n                                _len = node.__children__.length;\r\n\r\n                                if (angular.isUndefinedOrNull(node.__expanded__) && _len > 0) {\r\n                                    node.__expanded__ = level < scope.expandLevel;\r\n                                }\r\n\r\n                                if (_len === 0) {\r\n                                    _icon = -1;\r\n                                } else {\r\n                                    if (node.__expanded__) {\r\n                                        _icon = 1;\r\n                                    } else {\r\n                                        _icon = 0;\r\n                                    }\r\n                                }\r\n                                // Insert item vertically\r\n                                _index_real = root.length;\r\n                                node.__index__ = index;\r\n                                node.__index_real__ = _index_real;\r\n                                node.__level__ = level;\r\n                                node.__icon__ = _icon;\r\n                                node.__visible__ = !!visible;\r\n\r\n                                if (angular.isUndefinedOrNull(node.__uid__)) {\r\n                                    node.__uid__ = \"\" + Math.random();\r\n                                }\r\n\r\n                                root.push(node);\r\n\r\n                                // Check node children\r\n                                _dept = 1;\r\n                                if (_len > 0) {\r\n                                    for (_i = 0; _i < _len; _i++) {\r\n                                        _dept += do_f(\r\n                                            root,\r\n                                            node.__children__[_i],\r\n                                            (scope.primary_key === '__uid__') ? node.__uid__ : node[scope.primary_key],\r\n                                            _index_real,\r\n                                            level + 1,\r\n                                            visible && node.__expanded__,\r\n                                            _i\r\n                                        );\r\n                                    }\r\n                                }\r\n\r\n                                _hashKey = scope.getHash(node);\r\n\r\n                                if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\r\n                                    node.__hashKey__ = _hashKey;\r\n                                    // delete(scope.$globals[_hashKey]);\r\n                                }\r\n\r\n                                node.__dept__ = _dept;\r\n\r\n                                return _dept;\r\n                            },\r\n                            reload_data = function (oData) {\r\n                                var _data,\r\n                                    _len,\r\n                                    _tree_nodes = [];\r\n                                console.log('---------');\r\n                                if (angular.isDefined(oData)) {\r\n                                    if (!angular.isArray(oData) || oData.length === 0) {\r\n                                        return [];\r\n                                    } else {\r\n                                        _data = oData;\r\n                                    }\r\n                                } else if (!angular.isArray(scope.treeData) || scope.treeData.length === 0) {\r\n                                    return [];\r\n                                } else {\r\n                                    _data = scope.treeData;\r\n                                }\r\n\r\n                                if (!attrs.expandOn) {\r\n                                    getExpandOn();\r\n                                }\r\n\r\n                                if (!attrs.columnDefs) {\r\n                                    getColDefs();\r\n                                }\r\n\r\n                                if (angular.isDefined(scope.orderBy)) {\r\n                                    if (!angular.isFunction(_fnInitOrderBy)) {\r\n                                        _fnInitOrderBy = $TreeDnDPlugin('$TreeDnDOrderBy');\r\n                                    }\r\n\r\n                                    if (angular.isFunction(_fnInitOrderBy)) {\r\n                                        _data = _fnInitOrderBy(_data, scope.orderBy);\r\n                                    }\r\n                                }\r\n\r\n                                if (angular.isDefined(scope.filter)) {\r\n                                    if (!angular.isFunction(_fnInitFilter)) {\r\n                                        _fnInitFilter = $TreeDnDPlugin('$TreeDnDFilter');\r\n                                    }\r\n\r\n                                    if (angular.isFunction(_fnInitFilter)) {\r\n                                        _data = _fnInitFilter(_data, scope.filter, scope.filterOptions);\r\n                                    }\r\n                                }\r\n\r\n                                _len = _data.length;\r\n                                if (_len > 0) {\r\n                                    var _i,\r\n                                        _offset, _max, _min, _keys,\r\n                                        _deptTotal = 0;\r\n\r\n                                    for (_i = 0; _i < _len; _i++) {\r\n                                        _deptTotal += do_f(_tree_nodes, _data[_i], null, null, 1, true, _i);\r\n                                    }\r\n\r\n                                    // clear Element Empty\r\n                                    _keys = Object.keys(scope.$globals);\r\n                                    _len = scope.$globals.length;\r\n                                    _offset = _len - _deptTotal;\r\n\r\n                                    if (_offset !== 0) {\r\n                                        _max = _len - _offset;\r\n                                        _min = _max - Math.abs(_offset);\r\n                                        for (_i = _min; _i < _max; _i++) {\r\n                                            delete(scope.$globals[_keys[_i]]);\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                // clear memory\r\n                                if (angular.isDefined(scope.tree_nodes)) {\r\n                                    delete(scope.tree_nodes);\r\n                                }\r\n\r\n                                scope.tree_nodes = _tree_nodes;\r\n                                return _tree_nodes;\r\n                            },\r\n                            _defaultFilterOption = {\r\n                                showParent: true,\r\n                                showChild:  false,\r\n                                beginAnd:   true\r\n                            },\r\n                            tree,\r\n                            check_exist_attr = function (attrs, existAttr, isAnd) {\r\n                                if (angular.isUndefinedOrNull(existAttr)) {\r\n                                    return false;\r\n                                }\r\n\r\n                                if (existAttr === '*' || !angular.isUndefined(attrs[existAttr])) {\r\n                                    return true;\r\n                                }\r\n\r\n                                if (angular.isArray(existAttr)) {\r\n                                    return for_each_attrs(attrs, existAttr, isAnd);\r\n                                }\r\n                            },\r\n                            for_each_attrs = function (attrs, exist, isAnd) {\r\n                                var i, len = exist.length, passed = false;\r\n\r\n                                if (len === 0) {\r\n                                    return null;\r\n                                }\r\n                                for (i = 0; i < len; i++) {\r\n                                    if (check_exist_attr(attrs, exist[i], !isAnd)) {\r\n                                        passed = true;\r\n                                        if (!isAnd) {\r\n                                            return true;\r\n                                        }\r\n                                    } else {\r\n                                        if (isAnd) {\r\n                                            return false;\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                return passed;\r\n                            },\r\n                            generateWatch = function (type, nameAttr, valDefault, nameScope, fnNotExist, fnAfter, fnBefore) {\r\n                                nameScope = nameScope || nameAttr;\r\n                                if (typeof type === 'string' || angular.isArray(type)) {\r\n                                    if (angular.isFunction(fnBefore) && fnBefore()) {\r\n                                        return;//jmp\r\n                                    }\r\n                                    if (typeof tAttrs[nameAttr] === 'string') {\r\n                                        scope.$watch(\r\n                                            tAttrs[nameAttr], function (val, old, scope) {\r\n                                                if ((typeof type === 'string' && typeof val === type) ||\r\n                                                    (angular.isArray(type) && type.indexOf(typeof val) > -1)\r\n                                                ) {\r\n                                                    scope[nameScope] = val;\r\n                                                } else {\r\n                                                    if (angular.isFunction(valDefault)) {\r\n                                                        scope[nameScope] = valDefault(val);\r\n                                                    } else {\r\n                                                        scope[nameScope] = valDefault;\r\n                                                    }\r\n                                                }\r\n\r\n                                                if (angular.isFunction(fnAfter)) {\r\n                                                    fnAfter(scope[nameScope], scope);\r\n                                                }\r\n                                            }, true\r\n                                        );\r\n                                    } else {\r\n\r\n                                        if (angular.isFunction(fnNotExist)) {\r\n                                            scope[nameScope] = fnNotExist();\r\n                                        } else if (!angular.isUndefined(fnNotExist)) {\r\n                                            scope[nameScope] = fnNotExist;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            _watches = [\r\n                                [\r\n                                    'enableDrag', [\r\n                                    ['boolean', 'enableStatus', null, 'enabledStatus'],\r\n                                    ['boolean', 'enableMove', null, 'enabledMove'],\r\n                                    ['number', 'dragDelay', 0, null, 0],\r\n                                    ['boolean', 'enableCollapse', null, 'enabledCollapse'],\r\n                                    [\r\n                                        'boolean', 'enableHotkey', null, 'enabledHotkey', null, function (isHotkey) {\r\n                                        if (isHotkey) {\r\n                                            scope.enabledMove = false;\r\n                                        } else {\r\n                                            scope.enabledMove = scope.statusMove;\r\n                                        }\r\n                                    }]\r\n                                ]],\r\n                                [\r\n                                    ['enableDrag', 'enableStatus'], [\r\n                                    [\r\n                                        'string', 'templateCopy', attrs.templateCopy, 'templateCopy', null,\r\n                                        function (_url) {\r\n                                            if (_url && $templateCache.get(_url)) {\r\n                                                $TreeDnDTemplate.setCopy(_url, scope);\r\n                                            }\r\n                                        }],\r\n                                    [\r\n                                        'string', 'templateMove', attrs.templateMove, 'templateMove', null,\r\n                                        function (_url) {\r\n                                            if (_url && $templateCache.get(_url)) {\r\n                                                $TreeDnDTemplate.setMove(_url, scope);\r\n                                            }\r\n                                        }]\r\n                                ]],\r\n                                [\r\n                                    [['enableDrag', 'enableDrop']], [\r\n                                    ['number', 'dragBorder', 30, 'dragBorder', 30]]\r\n                                ],\r\n                                [\r\n                                    '*', [\r\n                                    ['boolean', 'horizontal'],\r\n                                    [\r\n                                        'callback', 'treeClass', function (val) {\r\n                                        switch (typeof val) {\r\n                                            case 'string':\r\n                                                scope.$tree_class = val;\r\n                                                break;\r\n                                            case 'object':\r\n                                                angular.extend(scope.$class, val);\r\n                                                scope.$tree_class = scope.$class.tree;\r\n                                                break;\r\n                                            default:\r\n                                                scope.$tree_class = attrs.treeClass;\r\n                                                break;\r\n                                        }\r\n                                    }, 'treeClass', function () {\r\n                                        scope.$tree_class = scope.$class.tree + ' table';\r\n                                    }, null, function () {\r\n                                        if (/^(\\s+[\\w\\-]+){2,}$/g.test(\" \" + attrs.treeClass)) {\r\n                                            scope.$tree_class = attrs.treeClass.trim();\r\n                                            return true;\r\n                                        }\r\n                                    }],\r\n                                    [\r\n                                        ['object', 'string'], 'expandOn', getExpandOn, 'expandingProperty', getExpandOn,\r\n                                        function (expandOn) {\r\n                                            if (angular.isUndefinedOrNull(expandOn)) {\r\n                                                scope.expandingProperty = attrs.expandOn;\r\n                                            }\r\n                                        }],\r\n                                    [\r\n                                        'object', 'treeControl', angular.isDefined(scope.tree) ? scope.tree : {},\r\n                                        'tree', null, function ($tree) {\r\n\r\n                                        if (!angular.isFunction(_fnGetControl)) {\r\n                                            _fnGetControl = $TreeDnDPlugin('$TreeDnDControl');\r\n                                        }\r\n\r\n                                        if (angular.isFunction(_fnGetControl)) {\r\n                                            tree = angular.extend(\r\n                                                $tree,\r\n                                                _fnGetControl(scope)\r\n                                            );\r\n                                        }\r\n                                    }],\r\n                                    [\r\n                                        ['array', 'object'], 'columnDefs', getColDefs, 'colDefinitions', getColDefs,\r\n                                        function (colDefs) {\r\n                                            if (angular.isUndefinedOrNull(colDefs) || !angular.isArray(colDefs)) {\r\n                                                scope.colDefinitions = getColDefs();\r\n                                            }\r\n                                        }],\r\n                                    [['object', 'string', 'array', 'function'], 'orderBy', attrs.orderBy],\r\n                                    [\r\n                                        ['object', 'array'], 'filter', null, 'filter', null, function (filters) {\r\n                                        var _passed = false;\r\n                                        if (angular.isDefined(filters) && !angular.isArray(filters)) {\r\n                                            var _keysF = Object.keys(filters),\r\n                                                _lenF = _keysF.length, _iF;\r\n\r\n                                            if (_lenF > 0) {\r\n                                                for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                                                    if ((typeof filters[_keysF[_iF]]) === 'string' &&\r\n                                                        filters[_keysF[_iF]].length === 0) {\r\n                                                        continue;\r\n                                                    }\r\n                                                    _passed = true;\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                        scope.enabledFilter = _passed;\r\n                                        reload_data();\r\n                                    }],\r\n                                    [\r\n                                        'object', 'filterOptions', _defaultFilterOption, 'filterOptions',\r\n                                        _defaultFilterOption, function (option) {\r\n                                        if (typeof option === \"object\") {\r\n                                            scope.filterOptions = angular.extend(_defaultFilterOption, option);\r\n                                        }\r\n                                    }],\r\n                                    ['string', 'primaryKey', attrs.primaryKey, 'primary_key', '__uid__'],\r\n                                    ['string', 'indentUnit', attrs.indentUnit, 'indent_unit'],\r\n                                    ['number', 'indent', 30, null, 30],\r\n                                    ['number', 'indentPlus', 20, null, 20],\r\n                                    [\r\n                                        'null', 'callbacks',\r\n                                        function (optCallbacks) {\r\n                                            angular.forEach(\r\n                                                optCallbacks, function (value, key) {\r\n                                                    if (typeof value === \"function\") {\r\n                                                        if (scope.$callbacks[key]) {\r\n                                                            scope.$callbacks[key] = value;\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            );\r\n                                            return scope.$callbacks;\r\n                                        },\r\n                                        '$callbacks'\r\n                                    ],\r\n                                    [\r\n                                        'number', 'expandLevel', 3, 'expandLevel', 3, function () {\r\n                                        reload_data();\r\n                                    }],\r\n                                    ['boolean', 'enableDrag', null, 'dragEnabled'],\r\n                                    ['boolean', 'enableDrop', null, 'dropEnabled']\r\n                                ]]\r\n                            ],\r\n                            w, lenW = _watches.length,\r\n                            i, len,\r\n                            _curW,\r\n                            _typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW;\r\n                        for (w = 0; w < lenW; w++) {\r\n                            // skip if not exist\r\n                            if (!check_exist_attr(attrs, _watches[w][0], true)) {\r\n                                continue;\r\n                            }\r\n                            _curW = _watches[w][1];\r\n                            for (i = 0, len = _curW.length; i < len; i++) {\r\n                                _typeW = _curW[i][0];\r\n                                _nameW = _curW[i][1];\r\n                                _defaultW = _curW[i][2];\r\n                                _scopeW = _curW[i][3];\r\n                                _NotW = _curW[i][4];\r\n                                _AfterW = _curW[i][5];\r\n                                _BeforeW = _curW[i][6];\r\n                                generateWatch(_typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW);\r\n                            }\r\n                        }\r\n\r\n                        if (attrs.treeData) {\r\n                            scope.$watch(\r\n                                attrs.treeData, function (val) {\r\n                                    scope.treeData = val;\r\n                                }, true\r\n                            );\r\n                        }\r\n\r\n                        scope.$watch(\r\n                            'treeData', function (val) {\r\n                                reload_data(val);\r\n                            }, true\r\n                        );\r\n\r\n                        scope.reload_data = reload_data;\r\n\r\n                        if (attrs.enableDrag) {\r\n                            _fnInitDrag = $TreeDnDPlugin('$TreeDnDDrag');\r\n                            if (angular.isFunction(_fnInitDrag)) {\r\n                                _fnInitDrag(scope, element, $window, $document);\r\n                            }\r\n                        }\r\n\r\n                        // apply Template\r\n                        scope.$safeApply(\r\n                            function () {\r\n                                if ($_Template.length > 0) {\r\n                                    element.append($compile($_Template)(scope));\r\n                                } else {\r\n                                    $http.get(\r\n                                        attrs.templateUrl || $TreeDnDTemplate.getPath(),\r\n                                        {cache: $templateCache}\r\n                                    ).success(\r\n                                        function (data) {\r\n                                            element.append($compile(data.trim())(scope));\r\n                                        }\r\n                                    );\r\n                                }\r\n                            }\r\n                        );\r\n                    };\r\n                }\r\n            };\r\n        }]\r\n).factory(\r\n    '$TreeDnDFilter', [\r\n        '$filter', function ($filter) {\r\n            var _iF, _lenF, _keysF,\r\n                _filter,\r\n                _state,\r\n                for_all_descendants = function for_all_descendants(options, node, fieldChild, fnBefore, fnAfter, parentPassed) {\r\n                    if (!angular.isFunction(fnBefore)) {\r\n                        return null;\r\n                    }\r\n\r\n                    var _i, _len, _nodes,\r\n                        _nodePassed = fnBefore(options, node),\r\n                        _childPassed = false;\r\n\r\n                    if (angular.isDefined(node[fieldChild])) {\r\n                        _nodes = node[fieldChild];\r\n                        _len = _nodes.length;\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            _childPassed = for_all_descendants(\r\n                                options,\r\n                                _nodes[_i],\r\n                                fieldChild,\r\n                                fnBefore,\r\n                                fnAfter,\r\n                                _nodePassed || parentPassed\r\n                            ) || _childPassed;\r\n                        }\r\n                    }\r\n\r\n                    if (angular.isFunction(fnAfter)) {\r\n                        fnAfter(options, node, _nodePassed === true, _childPassed === true, parentPassed === true);\r\n                    }\r\n\r\n                    return _nodePassed || _childPassed;\r\n                },\r\n                // Check data by filter\r\n                _fnCheck = function _fnCheck(callback, check) {\r\n                    if (angular.isUndefinedOrNull(check) || angular.isArray(check)) {\r\n                        return null;\r\n                    }\r\n\r\n                    if (angular.isFunction(callback)) {\r\n                        return callback(check, $filter);\r\n                    } else {\r\n                        if (typeof callback === 'boolean') {\r\n                            check = !!check;\r\n                            return check === callback;\r\n                        } else if (angular.isDefined(callback)) {\r\n                            try {\r\n                                var _regex = new RegExp(callback);\r\n                                return _regex.test(check);\r\n                            }\r\n                            catch (err) {\r\n                                if (typeof check === 'string') {\r\n                                    return check.indexOf(callback) > -1;\r\n                                } else {\r\n                                    return null;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            return null;\r\n                        }\r\n                    }\r\n                },\r\n                _fnProccess = function _fnProccess(node, condition, isAnd) {\r\n                    if (angular.isArray(condition)) {\r\n                        return for_each_filter(node, condition, isAnd);\r\n                    } else {\r\n                        var _key = condition.field,\r\n                            _callback = condition.callback,\r\n                            _iO, _keysO, _lenO;\r\n\r\n                        if (_key === '_$') {\r\n                            _keysO = Object.keys(node);\r\n                            _lenO = _keysO.length;\r\n                            for (_iO = 0; _iO < _lenO; _iO++) {\r\n                                if (_fnCheck(_callback, node[_keysO[_iO]])) {\r\n                                    return true;\r\n                                }\r\n                            }\r\n                        } else if (angular.isDefined(node[_key])) {\r\n                            return _fnCheck(_callback, node[_key]);\r\n                        }\r\n                    }\r\n                },\r\n                for_each_filter = function for_each_filter(node, conditions, isAnd) {\r\n                    var i, len = conditions.length, passed = false;\r\n                    if (len === 0) {\r\n                        return null;\r\n                    }\r\n\r\n                    for (i = 0; i < len; i++) {\r\n                        if (_fnProccess(node, conditions[i], !isAnd)) {\r\n                            passed = true;\r\n                            // if condition `or` then return;\r\n                            if (!isAnd) {\r\n                                return true;\r\n                            }\r\n                        } else {\r\n\r\n                            // if condition `and` and result in fnProccess = false then return;\r\n                            if (isAnd) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return passed;\r\n                },\r\n\r\n                // Will call _fnAfter to clear data no need\r\n                _fnAfter = function _fnAfter(options, node, isNodePassed, isChildPassed, isParentPassed) {\r\n                    if (isNodePassed === true) {\r\n                        node.__filtered__ = true;\r\n                        node.__filtered_visible__ = true;\r\n                        return; //jmp\r\n                    } else if ((isChildPassed === true && options.showParent === true)\r\n                               || (isParentPassed === true && options.showChild === true)) {\r\n                        node.__filtered__ = false;\r\n                        node.__filtered_visible__ = true;\r\n                        return; //jmp\r\n                    }\r\n\r\n                    // remove attr __filtered__\r\n                    delete(node.__filtered__);\r\n                    delete(node.__filtered_visible__);\r\n                },\r\n                _fnBefore = function _fnBefore(options, node) {\r\n                    if (options.filter.length === 0) {\r\n                        return true;\r\n                    } else {\r\n                        return _fnProccess(node, options.filter, options.beginAnd || false);\r\n                    }\r\n                },\r\n                _fnConvert = function _fnConvert(filters) {\r\n                    // convert filter object to array filter\r\n                    if (angular.isObject(filters) && !angular.isArray(filters)) {\r\n                        _keysF = Object.keys(filters);\r\n                        _lenF = _keysF.length;\r\n                        _filter = [];\r\n\r\n                        if (_lenF > 0) {\r\n                            for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                                if ((typeof filters[_keysF[_iF]]) === 'string' && filters[_keysF[_iF]].length === 0) {\r\n                                    continue;\r\n                                } else if (angular.isArray(filters[_keysF[_iF]])) {\r\n                                    _state = filters[_keysF[_iF]];\r\n                                } else if (angular.isObject(filters[_keysF[_iF]])) {\r\n                                    _state = _fnConvert(filters[_keysF[_iF]]);\r\n                                } else {\r\n                                    _state = {\r\n                                        field:    _keysF[_iF],\r\n                                        callback: filters[_keysF[_iF]]\r\n                                    };\r\n                                }\r\n                                _filter.push(_state);\r\n                            }\r\n                        }\r\n                        _state = null;\r\n                        return _filter;\r\n                    }\r\n                    else {\r\n                        return filters;\r\n                    }\r\n                },\r\n                _fnMain = function _fnMain(treeData, filters, _options) {\r\n                    if (!angular.isArray(treeData)\r\n                        || treeData.length === 0\r\n                        || !(angular.isArray(filters) || angular.isObject(filters))\r\n                        || filters.length === 0) {\r\n                        return treeData;\r\n                    }\r\n\r\n                    var _i, _len,\r\n                        _filter;\r\n\r\n                    _filter = _fnConvert(filters);\r\n                    if (!(angular.isArray(_filter) || angular.isObject(_filter))\r\n                        || _filter.length === 0) {\r\n                        return treeData;\r\n                    }\r\n                    _options.filter = _filter;\r\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                        for_all_descendants(\r\n                            _options,\r\n                            treeData[_i],\r\n                            '__children__',\r\n                            _fnBefore, _fnAfter\r\n                        );\r\n                    }\r\n\r\n                    return treeData;\r\n                };\r\n\r\n            return _fnMain;\r\n        }]\r\n).factory(\r\n    '$TreeDnDOrderBy', [\r\n        '$filter', function ($filter) {\r\n            var _fnOrderBy = $filter('orderBy'),\r\n                for_all_descendants = function for_all_descendants(options, node, name, fnOrderBy) {\r\n                    var _i, _len, _nodes;\r\n\r\n                    if (angular.isDefined(node[name])) {\r\n                        _nodes = node[name];\r\n                        _len = _nodes.length;\r\n                        // OrderBy children\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            _nodes[_i] = for_all_descendants(options, _nodes[_i], name, fnOrderBy);\r\n                        }\r\n\r\n                        node[name] = fnOrderBy(node[name], options);\r\n                    }\r\n                    return node;\r\n                },\r\n                _fnOrder = function _fnOrder(list, orderBy) {\r\n                    return _fnOrderBy(list, orderBy);\r\n                },\r\n                _fnMain = function _fnMain(treeData, orderBy) {\r\n                    if (!angular.isArray(treeData)\r\n                        || treeData.length === 0\r\n                        || !(angular.isArray(orderBy) || angular.isObject(orderBy) || angular.isString(orderBy) || angular.isFunction(orderBy))\r\n                        || (orderBy.length === 0 && !angular.isFunction(orderBy))) {\r\n                        return treeData;\r\n                    }\r\n\r\n                    var _i, _len,\r\n                        _iF, _lenF, _keysF;\r\n\r\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                        treeData[_i] = for_all_descendants(\r\n                            orderBy,\r\n                            treeData[_i],\r\n                            '__children__',\r\n                            _fnOrder\r\n                        );\r\n                    }\r\n\r\n                    treeData = _fnOrder(treeData, orderBy);\r\n                    return treeData;\r\n                };\r\n\r\n            return _fnMain;\r\n        }]\r\n).factory(\r\n    '$TreeDnDDrag', [\r\n        '$timeout', '$TreeDnDHelper',\r\n        function ($timeout, $TreeDnDHelper) {\r\n            var _fnDragEnd;\r\n            var holderWasShown = false;\r\n\r\n            var _offset,\r\n                _fnPlaceHolder = function (e, $params) {\r\n                    if ($params.placeElm) {\r\n                        _offset = $TreeDnDHelper.offset($params.placeElm);\r\n                        if (_offset.top <= e.pageY && e.pageY <= _offset.top + _offset.height &&\r\n                            _offset.left <= e.pageX && e.pageX <= _offset.left + _offset.width\r\n                           ) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                },\r\n                _fnDragStart = function (e, $params) {\r\n                    holderWasShown = false;\r\n\r\n                    if (!$params.hasTouch && (e.button === 2 || e.which === 3)) {\r\n                        // disable right click\r\n                        return;\r\n                    }\r\n                    if (e.uiTreeDragging || (e.originalEvent && e.originalEvent.uiTreeDragging)) { // event has already fired in other scope.\r\n                        return;\r\n                    }\r\n                    // the element which is clicked.\r\n                    var eventElm = angular.element(e.target),\r\n                        eventScope = eventElm.scope();\r\n                    if (!eventScope || !eventScope.$type) {\r\n                        return;\r\n                    }\r\n                    // if (eventScope.$type !== 'TreeDnDNode') { // Check if it is a node or a handle\r\n                    //     return;\r\n                    // }\r\n\r\n                    if (eventScope.$type !== 'TreeDnDNodeHandle') { // If the node has a handle, then it should be clicked by the handle\r\n                        return;\r\n                    }\r\n\r\n                    var eventElmTagName = eventElm.prop('tagName').toLowerCase(),\r\n                        dragScope,\r\n                        _$scope = $params.$scope;\r\n                    if (eventElmTagName === 'input'\r\n                        || eventElmTagName === 'textarea'\r\n                        || eventElmTagName === 'button'\r\n                        || eventElmTagName === 'select') { // if it's a input or button, ignore it\r\n                        return;\r\n                    }\r\n                    // check if it or it's parents has a 'data-nodrag' attribute\r\n                    while (eventElm && eventElm[0] && eventElm[0] !== $params.element) {\r\n                        if ($TreeDnDHelper.nodrag(eventElm)) { // if the node mark as `nodrag`, DONOT drag it.\r\n                            return;\r\n                        }\r\n                        eventElm = eventElm.parent();\r\n                    }\r\n\r\n                    e.uiTreeDragging = true; // stop event bubbling\r\n                    if (e.originalEvent) {\r\n                        e.originalEvent.uiTreeDragging = true;\r\n                    }\r\n                    e.preventDefault();\r\n\r\n                    dragScope = eventScope.getScopeNode();\r\n\r\n                    $params.firstMoving = true;\r\n\r\n                    if (!_$scope.$callbacks.beforeDrag(dragScope)) {\r\n                        return;\r\n                    }\r\n\r\n                    var eventObj = $TreeDnDHelper.eventObj(e),\r\n                        tagName = dragScope.$element.prop('tagName').toLowerCase(),\r\n                        isTable = (tagName === 'tr');\r\n\r\n                    $params.dragInfo = $TreeDnDHelper.dragInfo(dragScope);\r\n\r\n                    _$scope.setDragging($params.dragInfo);\r\n\r\n                    $params.pos = $TreeDnDHelper.positionStarted(eventObj, dragScope.$element);\r\n\r\n                    if (isTable) {\r\n                        $params.dragElm = angular.element($params.$window.document.createElement('table'))\r\n                            .addClass(_$scope.$class.tree)\r\n                            .addClass(_$scope.$class.drag)\r\n                            .addClass(_$scope.$tree_class);\r\n                    } else {\r\n                        $params.dragElm = angular.element($params.$window.document.createElement('ul'))\r\n                            .addClass(_$scope.$class.drag)\r\n                            .addClass('tree-dnd-nodes')\r\n                            .addClass(_$scope.$tree_class);\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'width':   $TreeDnDHelper.width(dragScope.$element) + 'px',\r\n                            'z-index': 9995\r\n                        }\r\n                    );\r\n\r\n                    $params.offsetEdge = 0;\r\n                    var _width = $TreeDnDHelper.width(dragScope.$element),\r\n                        _scope = dragScope,\r\n                        _element = _scope.$element,\r\n                        _clone = null,\r\n                        _needCollapse = !!_$scope.enabledCollapse,\r\n                        _copied = false,\r\n                        _tbody = null;\r\n\r\n                    if (isTable) {\r\n                        $params.offsetEdge = $params.dragInfo.node.__level__ - 1;\r\n                        _tbody = angular.element($params.$window.document.createElement('tbody'));\r\n\r\n                        _$scope.for_all_descendants(\r\n                            $params.dragInfo.node, function (_node) {\r\n                                _scope = _$scope.getScope(_node);\r\n                                _element = _scope.$element;\r\n\r\n                                if (!_copied) {\r\n                                    _clone = _element.clone();\r\n\r\n                                    $TreeDnDHelper.replaceIndent(\r\n                                        _scope,\r\n                                        _clone,\r\n                                        _node.__level__ - $params.offsetEdge,\r\n                                        'padding-left'\r\n                                    );\r\n\r\n                                    _tbody.append(_clone);\r\n\r\n                                    // skip all, just clone parent\r\n                                    if (_needCollapse) {\r\n                                        _copied = true;\r\n                                    }\r\n                                }\r\n\r\n                                if (_$scope.enabledMove && _$scope.$class.hidden) {\r\n                                    _element.addClass(_$scope.$class.hidden);\r\n                                }\r\n                            }\r\n                        );\r\n\r\n                        $params.dragElm.append(_tbody);\r\n                    } else {\r\n\r\n                        if (!_needCollapse) {\r\n                            _clone = _element.clone();\r\n                        } else {\r\n                            var _holder = _scope.getElementChilds(),\r\n                                _swaper = angular.element(\"<swaped />\");\r\n\r\n                            // Insert tag `<holder>` & move _holder into tag `<swaper>`;\r\n                            _holder.after(angular.element(\"<holder />\"));\r\n                            _swaper.append(_holder);\r\n\r\n                            // Clone without Children & remove tag `<holder>`\r\n                            _clone = _element.clone();\r\n                            _clone.find(\"holder\").remove();\r\n\r\n                            // bring childs back frome `swaper` & remove tag `<swaper>`\r\n                            _element.find(\"holder\").replaceWith(_holder);\r\n\r\n                            // Reset & clear all;\r\n                            _swaper.remove();\r\n                            _holder = null;\r\n                        }\r\n\r\n                        $params.dragElm.append(_clone);\r\n                        if (_$scope.enabledMove && _$scope.$class.hidden) {\r\n                            _element.addClass(_$scope.$class.hidden);\r\n                        }\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'left': eventObj.pageX - $params.pos.offsetX + _$scope.$callbacks.calsIndent(\r\n                                $params.offsetEdge + 1,\r\n                                true,\r\n                                true\r\n                            )       + 'px',\r\n                            'top':  eventObj.pageY - $params.pos.offsetY + 'px'\r\n                        }\r\n                    );\r\n                    // moving item with descendant\r\n                    $params.$document.find('body').append($params.dragElm);\r\n                    if (_$scope.$callbacks.droppable()) {\r\n                        $params.placeElm = _$scope.initPlace(dragScope.$element, $params.dragElm);\r\n\r\n                        if (isTable) {\r\n                            $TreeDnDHelper.replaceIndent(_$scope, $params.placeElm, $params.dragInfo.node.__level__);\r\n                        }\r\n\r\n                        $params.placeElm.css('width', _width);\r\n                    }\r\n\r\n                    _$scope.showPlace();\r\n                    _$scope.targeting = true;\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.refreshStatus();\r\n                        _$scope.setPositionStatus(e);\r\n                    }\r\n\r\n                    angular.element($params.$document).bind('touchend', $params.dragEndEvent);\r\n                    angular.element($params.$document).bind('touchcancel', $params.dragEndEvent);\r\n                    angular.element($params.$document).bind('touchmove', $params.dragMoveEvent);\r\n                    angular.element($params.$document).bind('mouseup', $params.dragEndEvent);\r\n                    angular.element($params.$document).bind('mousemove', $params.dragMoveEvent);\r\n                    angular.element($params.$document).bind('mouseleave', $params.dragCancelEvent);\r\n\r\n                    $params.document_height = Math.max(\r\n                        $params.body.scrollHeight,\r\n                        $params.body.offsetHeight,\r\n                        $params.html.clientHeight,\r\n                        $params.html.scrollHeight,\r\n                        $params.html.offsetHeight\r\n                    );\r\n\r\n                    $params.document_width = Math.max(\r\n                        $params.body.scrollWidth,\r\n                        $params.body.offsetWidth,\r\n                        $params.html.clientWidth,\r\n                        $params.html.scrollWidth,\r\n                        $params.html.offsetWidth\r\n                    );\r\n                },\r\n                _fnDragMove = function (e, $params) {\r\n                    var _$scope = $params.$scope;\r\n                    if (!$params.dragStarted) {\r\n                        if (!$params.dragDelaying) {\r\n                            $params.dragStarted = true;\r\n                            _$scope.$safeApply(\r\n                                function () {\r\n                                    _$scope.$callbacks.dragStart($params.dragInfo);\r\n                                }\r\n                            );\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    if (!$params.dragElm) {\r\n                        return;\r\n                    }\r\n\r\n                    e.preventDefault();\r\n                    if ($params.$window.getSelection) {\r\n                        $params.$window.getSelection().removeAllRanges();\r\n                    } else if ($params.$window.document.selection) {\r\n                        $params.$window.document.selection.empty();\r\n                    }\r\n\r\n                    var eventObj = $TreeDnDHelper.eventObj(e),\r\n                        leftElmPos = eventObj.pageX - $params.pos.offsetX,\r\n                        topElmPos = eventObj.pageY - $params.pos.offsetY;\r\n\r\n                    //dragElm can't leave the screen on the left\r\n                    if (leftElmPos < 0) {\r\n                        leftElmPos = 0;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the top\r\n                    if (topElmPos < 0) {\r\n                        topElmPos = 0;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the bottom\r\n                    if ((topElmPos + 10) > $params.document_height) {\r\n                        topElmPos = $params.document_height - 10;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the right\r\n                    if ((leftElmPos + 10) > $params.document_width) {\r\n                        leftElmPos = $params.document_width - 10;\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'left': leftElmPos + _$scope.$callbacks.calsIndent(\r\n                                $params.offsetEdge + 1,\r\n                                true,\r\n                                true\r\n                            )       + 'px',\r\n                            'top':  topElmPos + 'px'\r\n                        }\r\n                    );\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.setPositionStatus(e);\r\n                    }\r\n\r\n                    var top_scroll = window.pageYOffset || $params.$window.document.documentElement.scrollTop,\r\n                        bottom_scroll = top_scroll + (window.innerHeight || $params.$window.document.clientHeight || $params.$window.document.clientHeight);\r\n                    // to scroll down if cursor y-position is greater than the bottom position the vertical scroll\r\n                    if (bottom_scroll < eventObj.pageY && bottom_scroll <= $params.document_height) {\r\n                        window.scrollBy(0, 10);\r\n                    }\r\n                    // to scroll top if cursor y-position is less than the top position the vertical scroll\r\n                    if (top_scroll > eventObj.pageY) {\r\n                        window.scrollBy(0, -10);\r\n                    }\r\n\r\n                    $TreeDnDHelper.positionMoved(e, $params.pos, $params.firstMoving);\r\n\r\n                    if ($params.firstMoving) {\r\n                        $params.firstMoving = false;\r\n                        return;\r\n                    }\r\n                    // check if add it as a child node first\r\n\r\n                    var targetX = eventObj.pageX - $params.$window.document.body.scrollLeft,\r\n                        targetY = eventObj.pageY - (window.pageYOffset || $params.$window.document.documentElement.scrollTop),\r\n\r\n                        targetElm,\r\n                        targetScope,\r\n                        targetBefore,\r\n                        targetOffset,\r\n                        tagName,\r\n                        isTable,\r\n                        isChanged = true,\r\n                        isVeritcal = true,\r\n                        isEmpty,\r\n                        isSwapped,\r\n                        _scope,\r\n                        _target,\r\n                        _parent,\r\n                        _info = $params.dragInfo,\r\n                        _move = _info.move,\r\n                        _drag = _info.node,\r\n                        _drop = _info.drop,\r\n                        treeScope = _info.target,\r\n                        fnSwapTree,\r\n                        isHolder = _fnPlaceHolder(e, $params);\r\n\r\n                    if (!isHolder) {\r\n                        /* when using elementFromPoint() inside an iframe, you have to call\r\n                             elementFromPoint() twice to make sure IE8 returns the correct value\r\n                             $params.$window.document.elementFromPoint(targetX, targetY);*/\r\n\r\n                        targetElm = angular.element(\r\n                            $params.$window.document.elementFromPoint(\r\n                                targetX,\r\n                                targetY\r\n                            )\r\n                        );\r\n\r\n                        targetScope = targetElm.scope();\r\n                        if (!targetScope) {\r\n                            return;\r\n                        }\r\n\r\n                        fnSwapTree = function () {\r\n                            treeScope = targetScope.getScopeTree();\r\n                            _target = _info.target;\r\n                            if (_info.target !== treeScope) {\r\n                                if (treeScope.$callbacks.droppable()) {\r\n                                    // Replace by place-holder new\r\n                                    _target.hidePlace();\r\n                                    _target.targeting = false;\r\n                                    treeScope.targeting = true;\r\n\r\n                                    _info.target = treeScope;\r\n                                    $params.placeElm = treeScope.initPlace(targetScope.$element, $params.dragElm);\r\n\r\n                                    _target = null;\r\n                                    isSwapped = true;\r\n                                } else {\r\n                                    // Not allowed Drop Item\r\n                                    return false;\r\n                                }\r\n                            }\r\n                            return true;\r\n                        };\r\n\r\n                        var abortDrag = function () {\r\n                            holderWasShown = false;\r\n                            if (_$scope.enabledStatus) {\r\n                                _$scope.hideStatus();\r\n                            }\r\n                            _$scope.$$apply = false;\r\n                            _fnDragEnd(e, $params);\r\n                        };\r\n\r\n                        if (angular.isFunction(targetScope.getScopeNode)) {\r\n                            targetScope = targetScope.getScopeNode();\r\n\r\n                            if (!fnSwapTree()) {\r\n                                return;\r\n                            }\r\n                        } else {\r\n                            if (holderWasShown) {\r\n                                // setTimeout is necessary because otherwise the placeholder\r\n                                // will not be deleted in some cases\r\n                                // see: https://stackoverflow.com/questions/779379/why-is-settimeoutfn-0-sometimes-useful\r\n                                setTimeout(function () {\r\n                                    treeScope.placeElm.remove();\r\n                                    abortDrag();\r\n                                }, 0);\r\n                            }\r\n\r\n                            if (targetScope.$type === 'TreeDnDNodes' || targetScope.$type === 'TreeDnD') {\r\n                                if (targetScope.tree_nodes) {\r\n                                    if (targetScope.tree_nodes.length === 0) {\r\n                                        if (!fnSwapTree()) {\r\n                                            return;\r\n                                        }\r\n                                        // Empty\r\n                                        isEmpty = true;\r\n                                    }\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            } else {\r\n                                return;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        holderWasShown = true;\r\n                    }\r\n\r\n                    if ($params.pos.dirAx && !isSwapped || isHolder) {\r\n                        isVeritcal = false;\r\n                        targetScope = _info.scope;\r\n                    }\r\n\r\n                    if (!targetScope.$element && !targetScope) {\r\n                        return;\r\n                    }\r\n\r\n                    tagName = targetScope.$element.prop('tagName').toLowerCase();\r\n                    isTable = (tagName === 'tbody' || tagName === 'table' || tagName === 'tr' || tagName === 'td');\r\n                    if (isEmpty) {\r\n                        _move.parent = null;\r\n                        _move.pos = 0;\r\n\r\n                        _drop = null;\r\n                    } else {\r\n                        // move vertical\r\n                        if (isVeritcal) {\r\n                            targetElm = targetScope.$element; // Get the element of tree-dnd-node\r\n\r\n                            targetOffset = $TreeDnDHelper.offset(targetElm);\r\n\r\n                            if (targetScope.horizontal && !isTable) {\r\n                                targetBefore = eventObj.pageX < (targetOffset.left + $TreeDnDHelper.width(targetElm) / 2);\r\n                            } else {\r\n                                if (isTable) {\r\n                                    targetBefore = eventObj.pageY < (targetOffset.top + $TreeDnDHelper.height(targetElm) / 2);\r\n                                } else {\r\n                                    var _height = $TreeDnDHelper.height(targetElm);\r\n\r\n                                    if (targetScope.getElementChilds()) {\r\n                                        _height -= -$TreeDnDHelper.height(targetScope.getElementChilds());\r\n                                    }\r\n\r\n                                    if (eventObj.pageY > targetOffset.top + _height) {\r\n                                        return;\r\n                                    }\r\n\r\n                                    targetBefore = eventObj.pageY < (targetOffset.top + _height / 2);\r\n                                }\r\n                            }\r\n\r\n                            if (!angular.isFunction(targetScope.getData)) {\r\n                                return;\r\n                            }\r\n\r\n                            _target = targetScope.getData();\r\n                            _parent = targetScope.getNode(_target.__parent_real__);\r\n\r\n                            if (targetBefore) {\r\n                                var _prev = targetScope.getPrevSibling(_target);\r\n\r\n                                _move.parent = _parent;\r\n                                _move.pos = angular.isDefined(_prev) ? _prev.__index__ + 1 : 0;\r\n\r\n                                _drop = _prev;\r\n                            } else {\r\n                                if (_target.__expanded__ && !(_target.__children__.length === 1 && _target.__index_real__ === _drag.__parent_real__)) {\r\n                                    _move.parent = _target;\r\n                                    _move.pos = 0;\r\n\r\n                                    _drop = null;\r\n                                } else {\r\n                                    _move.parent = _parent;\r\n                                    _move.pos = _target.__index__ + 1;\r\n\r\n                                    _drop = _target;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            // move horizontal\r\n                            if ($params.pos.dirAx && $params.pos.distAxX >= treeScope.dragBorder) {\r\n                                $params.pos.distAxX = 0;\r\n                                // increase horizontal level if previous sibling exists and is not collapsed\r\n                                if ($params.pos.distX > 0) {\r\n                                    _parent = _drop;\r\n                                    if (!_parent) {\r\n                                        if (_move.pos - 1 >= 0) {\r\n                                            _parent = _move.parent.__children__[_move.pos - 1];\r\n                                        } else {\r\n                                            return;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (_info.drag === _info.target && _parent === _drag && _$scope.enabledMove) {\r\n                                        _parent = treeScope.getPrevSibling(_parent);\r\n                                    }\r\n\r\n                                    if (_parent && _parent.__visible__) {\r\n                                        var _len = _parent.__children__.length;\r\n\r\n                                        _move.parent = _parent;\r\n                                        _move.pos = _len;\r\n\r\n                                        if (_len > 0) {\r\n                                            _drop = _parent.__children__[_len - 1];\r\n                                        } else {\r\n                                            _drop = null;\r\n                                        }\r\n                                    } else {\r\n                                        // Not changed\r\n                                        return;\r\n                                    }\r\n                                } else if ($params.pos.distX < 0) {\r\n                                    _target = _move.parent;\r\n                                    if (_target &&\r\n                                        (_target.__children__.length === 0 ||\r\n                                         _target.__children__.length - 1 < _move.pos ||\r\n                                         (_info.drag === _info.target &&\r\n                                          _target.__index_real__ === _drag.__parent_real__ &&\r\n                                          _target.__children__.length - 1 === _drag.__index__ && _$scope.enabledMove))\r\n                                       ) {\r\n                                        _parent = treeScope.getNode(_target.__parent_real__);\r\n\r\n                                        _move.parent = _parent;\r\n                                        _move.pos = _target.__index__ + 1;\r\n\r\n                                        _drop = _target;\r\n                                    } else {\r\n                                        // Not changed\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            } else {\r\n                                // limited\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (_info.drag === _info.target &&\r\n                        _move.parent &&\r\n                        _drag.__parent_real__ === _move.parent.__index_real__ &&\r\n                        _drag.__index__ === _move.pos\r\n                       ) {\r\n                        isChanged = false;\r\n                    }\r\n\r\n                    if (treeScope.$callbacks.accept(_info, _move, isChanged)) {\r\n                        _info.move = _move;\r\n                        _info.drop = _drop;\r\n                        _info.changed = isChanged;\r\n                        _info.scope = targetScope;\r\n\r\n                        if (isTable) {\r\n                            $TreeDnDHelper.replaceIndent(\r\n                                treeScope,\r\n                                $params.placeElm,\r\n                                angular.isUndefinedOrNull(_move.parent) ? 1 : _move.parent.__level__ + 1\r\n                            );\r\n\r\n                            if (_drop) {\r\n                                _parent = (_move.parent ? _move.parent.__children__ : null ) || _info.target.treeData;\r\n\r\n                                if (_drop.__index__ < _parent.length - 1) {\r\n                                    // Find fast\r\n                                    _drop = _parent[_drop.__index__ + 1];\r\n                                    _scope = _info.target.getScope(_drop);\r\n                                    _scope.$element[0].parentNode.insertBefore(\r\n                                        $params.placeElm[0],\r\n                                        _scope.$element[0]\r\n                                    );\r\n                                } else {\r\n                                    _target = _info.target.getLastDescendant(_drop);\r\n                                    _scope = _info.target.getScope(_target);\r\n                                    _scope.$element.after($params.placeElm);\r\n                                }\r\n                            } else {\r\n                                _scope = _info.target.getScope(_move.parent);\r\n                                if (_scope) {\r\n                                    if (_move.parent) {\r\n                                        _scope.$element.after($params.placeElm);\r\n\r\n                                    } else {\r\n                                        _scope.getElementChilds().prepend($params.placeElm);\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else {\r\n                            _scope = _info.target.getScope(_drop || _move.parent);\r\n\r\n                            if (_drop) {\r\n                                _scope.$element.after($params.placeElm);\r\n                            } else {\r\n                                _scope.getElementChilds().prepend($params.placeElm);\r\n                            }\r\n                        }\r\n\r\n                        treeScope.showPlace();\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragMove(_info);\r\n                            }\r\n                        );\r\n                    }\r\n                },\r\n                _fnDragEnd = function (e, $params) {\r\n                    holderWasShown = false;\r\n\r\n                    e.preventDefault();\r\n                    if ($params.dragElm) {\r\n                        var _passed = false,\r\n                            _$scope = $params.$scope,\r\n                            _scope = _$scope.getScope($params.dragInfo.node),\r\n                            tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                            _isTable = (tagName === 'tr'),\r\n                            _element = _scope.$element;\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _passed = _$scope.$callbacks.beforeDrop($params.dragInfo);\r\n                            }\r\n                        );\r\n\r\n                        // rollback all\r\n                        if (_isTable) {\r\n                            _$scope.for_all_descendants(\r\n                                $params.dragInfo.node, function (_node) {\r\n                                    _scope = _$scope.getScope(_node);\r\n                                    _element = _scope.$element;\r\n\r\n                                    if (_scope.$class.hidden) {\r\n                                        _element.removeClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                            );\r\n                        } else {\r\n                            if (_$scope.$class.hidden) {\r\n                                _element.removeClass(_$scope.$class.hidden);\r\n                            }\r\n                        }\r\n\r\n                        $params.dragElm.remove();\r\n                        $params.dragElm = null;\r\n\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.hideStatus();\r\n                        }\r\n\r\n                        var _status = false;\r\n                        if (_$scope.$$apply) {\r\n                            _$scope.$safeApply(\r\n                                function () {\r\n                                    _status = _$scope.$callbacks.dropped(\r\n                                        $params.dragInfo,\r\n                                        _passed,\r\n                                        _$scope.enabledMove\r\n                                    );\r\n                                }\r\n                            );\r\n                        } else {\r\n                            _fnBindDrag($params);\r\n                        }\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragStop($params.dragInfo, _status);\r\n                            }\r\n                        );\r\n\r\n                        $params.dragInfo.target.hidePlace();\r\n                        $params.dragInfo.target.targeting = false;\r\n\r\n                        $params.dragInfo = null;\r\n                        _$scope.$$apply = false;\r\n                        _$scope.setDragging(null);\r\n                    }\r\n\r\n                    angular.element($params.$document).unbind('touchend', $params.dragEndEvent); // Mobile\r\n                    angular.element($params.$document).unbind('touchcancel', $params.dragEndEvent); // Mobile\r\n                    angular.element($params.$document).unbind('touchmove', $params.dragMoveEvent); // Mobile\r\n                    angular.element($params.$document).unbind('mouseup', $params.dragEndEvent);\r\n                    angular.element($params.$document).unbind('mousemove', $params.dragMoveEvent);\r\n                    angular.element($params.$window.document.body).unbind('mouseleave', $params.dragCancelEvent);\r\n                },\r\n                _fnDragStartEvent = function (e, $params) {\r\n                    if ($params.$scope.$callbacks.draggable()) {\r\n                        _fnDragStart(e, $params);\r\n                    }\r\n                },\r\n                _fnBindDrag = function ($params) {\r\n                    $params.element.bind(\r\n                        'touchstart mousedown', function (e) {\r\n                            $params.dragDelaying = true;\r\n                            $params.dragStarted = false;\r\n                            _fnDragStartEvent(e, $params);\r\n                            $params.dragTimer = $timeout(\r\n                                function () {\r\n                                    $params.dragDelaying = false;\r\n                                }, $params.$scope.dragDelay\r\n                            );\r\n                        }\r\n                    );\r\n                    $params.element.bind(\r\n                        'touchend touchcancel mouseup', function () {\r\n                            $timeout.cancel($params.dragTimer);\r\n                        }\r\n                    );\r\n                },\r\n                _fnKeydownHandler = function (e, $params) {\r\n                    var _$scope = $params.$scope;\r\n                    if (e.keyCode === 27) {\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.hideStatus();\r\n                        }\r\n\r\n                        _$scope.$$apply = false;\r\n                        _fnDragEnd(e, $params);\r\n                    } else {\r\n                        if (_$scope.enabledHotkey && e.shiftKey) {\r\n                            _$scope.enableMove(true);\r\n                            if (_$scope.enabledStatus) {\r\n                                _$scope.refreshStatus();\r\n                            }\r\n\r\n                            if (!$params.dragInfo) {\r\n                                return;\r\n                            }\r\n\r\n                            var _scope = _$scope.getScope($params.dragInfo.node),\r\n                                tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                                _element = _scope.$element;\r\n\r\n                            if (tagName === 'tr') {\r\n                                _$scope.for_all_descendants(\r\n                                    $params.dragInfo.node, function (_node) {\r\n                                        _scope = _$scope.getScope(_node);\r\n                                        _element = _scope.$element;\r\n\r\n                                        if (_$scope.$class.hidden) {\r\n                                            _element.addClass(_$scope.$class.hidden);\r\n                                        }\r\n                                    }\r\n                                );\r\n                            } else {\r\n                                if (_$scope.$class.hidden) {\r\n                                    _element.addClass(_$scope.$class.hidden);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                _fnKeyupHandler = function (e, $params) {\r\n                    var _$scope = $params.$scope;\r\n                    if (_$scope.enabledHotkey && !e.shiftKey) {\r\n                        _$scope.enableMove(false);\r\n\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.refreshStatus();\r\n                        }\r\n\r\n                        if (!$params.dragInfo) {\r\n                            return;\r\n                        }\r\n\r\n                        var _scope = _$scope.getScope($params.dragInfo.node),\r\n                            tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                            _element = _scope.$element;\r\n\r\n                        if (tagName === 'tr') {\r\n                            _$scope.for_all_descendants(\r\n                                $params.dragInfo.node, function (_node) {\r\n\r\n                                    _scope = _$scope.getScope(_node);\r\n                                    _element = _scope.$element;\r\n\r\n                                    if (_$scope.$class.hidden) {\r\n                                        _element.removeClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                            );\r\n                        } else {\r\n                            if (_$scope.$class.hidden) {\r\n                                _element.removeClass(_$scope.$class.hidden);\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n\r\n                _$init = function (scope, element, $window, $document) {\r\n                    var $params = {\r\n                        hasTouch:        ('ontouchstart' in window),\r\n                        firstMoving:     null,\r\n                        dragInfo:        null,\r\n                        pos:             null,\r\n                        placeElm:        null,\r\n                        dragElm:         null,\r\n                        dragDelaying:    true,\r\n                        dragStarted:     false,\r\n                        dragTimer:       null,\r\n                        body:            document.body,\r\n                        html:            document.documentElement,\r\n                        document_height: null,\r\n                        document_width:  null,\r\n                        offsetEdge:      null,\r\n                        $scope:          scope,\r\n                        $window:         $window,\r\n                        $document:       $document,\r\n                        element:         element,\r\n                        bindDrag:        function () {\r\n                            _fnBindDrag($params);\r\n                        },\r\n                        dragEnd:         function (e) {\r\n                            _fnDragEnd(e, $params);\r\n                        },\r\n                        dragMoveEvent:   function (e) {\r\n                            _fnDragMove(e, $params)\r\n                        },\r\n                        dragEndEvent:    function (e) {\r\n                            scope.$$apply = true;\r\n                            _fnDragEnd(e, $params);\r\n                        },\r\n                        dragCancelEvent: function (e) {\r\n                            _fnDragEnd(e, $params);\r\n                        }\r\n                    },\r\n                        keydownHandler = function (e) {\r\n                            return _fnKeydownHandler(e, $params);\r\n                        },\r\n                        keyupHandler = function (e) {\r\n                            return _fnKeyupHandler(e, $params);\r\n                        };\r\n\r\n                    scope.dragEnd = function (e) {\r\n                        $params.dragEnd(e);\r\n                    };\r\n\r\n                    $params.bindDrag();\r\n\r\n                    angular.element($window.document.body).bind(\"keydown\", keydownHandler);\r\n                    angular.element($window.document.body).bind(\"keyup\", keyupHandler);\r\n                    //unbind handler that retains scope\r\n                    scope.$on(\r\n                        '$destroy', function () {\r\n                            angular.element($window.document.body).unbind(\"keydown\", keydownHandler);\r\n                            angular.element($window.document.body).unbind(\"keyup\", keyupHandler);\r\n                            if (scope.statusElm) {\r\n                                scope.statusElm.remove();\r\n                            }\r\n\r\n                            if (scope.placeElm) {\r\n                                scope.placeElm.remove();\r\n                            }\r\n                        }\r\n                    );\r\n                };\r\n\r\n            return _$init;\r\n        }\r\n    ]\r\n).factory(\r\n    '$TreeDnDControl', function () {\r\n        var _target, _parent,\r\n            i, len,\r\n            fnSetCollapse = function fnSetCollapse(node) {\r\n                node.__expanded__ = false;\r\n            },\r\n            fnSetExpand = function fnSetExpand(node) {\r\n                node.__expanded__ = true;\r\n            },\r\n\r\n            _$init = function _$init(scope) {\r\n                var n, tree = {\r\n                    selected_node:                     null,\r\n                    for_all_descendants:               scope.for_all_descendants,\r\n                    select_node:                       function (node) {\r\n                        if (!node) {\r\n                            if (tree.selected_node) {\r\n                                delete(tree.selected_node.__selected__);\r\n                            }\r\n                            tree.selected_node = null;\r\n                            return null;\r\n                        }\r\n\r\n                        if (node !== tree.selected_node) {\r\n                            if (tree.selected_node) {\r\n                                delete(tree.selected_node.__selected__);\r\n                            }\r\n                            node.__selected__ = true;\r\n                            tree.selected_node = node;\r\n                            tree.expand_all_parents(node);\r\n                            if (angular.isFunction(tree.on_select)) {\r\n                                tree.on_select(node);\r\n                            }\r\n                        }\r\n                        return node;\r\n                    },\r\n                    deselect_node:                     function () {\r\n                        _target = null;\r\n                        if (tree.selected_node) {\r\n                            delete(tree.selected_node.__selected__);\r\n                            _target = tree.selected_node;\r\n                            tree.selected_node = null;\r\n                        }\r\n                        return _target;\r\n                    },\r\n                    get_parent:                        function (node) {\r\n                        if (node && node.__parent_real__ !== null) {\r\n                            return scope.tree_nodes[node.__parent_real__];\r\n                        }\r\n                        return null;\r\n                    },\r\n                    for_all_ancestors:                 function (child, fn) {\r\n                        _parent = tree.get_parent(child);\r\n                        if (_parent) {\r\n                            if (fn(_parent)) {\r\n                                return false;\r\n                            }\r\n\r\n                            return tree.for_all_ancestors(_parent, fn);\r\n                        }\r\n                        return true;\r\n                    },\r\n                    expand_all_parents:                function (child) {\r\n                        return tree.for_all_ancestors(\r\n                            child, fnSetExpand\r\n                        );\r\n                    },\r\n                    reload_data:                       function () {\r\n                        return scope.reload_data();\r\n                    },\r\n                    add_node:                          function (parent, new_node, index) {\r\n                        if (typeof index !== 'number') {\r\n                            if (parent) {\r\n                                parent.__children__.push(new_node);\r\n                                parent.__expanded__ = true;\r\n                            } else {\r\n                                scope.treeData.push(new_node);\r\n                            }\r\n                        } else {\r\n                            if (parent) {\r\n                                parent.__children__.splice(index, 0, new_node);\r\n                                parent.__expanded__ = true;\r\n                            } else {\r\n                                scope.treeData.splice(index, 0, new_node);\r\n                            }\r\n                        }\r\n                        return new_node;\r\n                    },\r\n                    add_node_root:                     function (new_node) {\r\n                        tree.add_node(null, new_node);\r\n                        return new_node;\r\n                    },\r\n                    expand_all:                        function () {\r\n                        len = scope.treeData.length;\r\n                        for (i = 0; i < len; i++) {\r\n                            tree.for_all_descendants(\r\n                                scope.treeData[i], fnSetExpand\r\n                            );\r\n                        }\r\n                    },\r\n                    collapse_all:                      function () {\r\n                        len = scope.treeData.length;\r\n                        for (i = 0; i < len; i++) {\r\n                            tree.for_all_descendants(\r\n                                scope.treeData[i], fnSetCollapse\r\n                            );\r\n                        }\r\n                    },\r\n                    remove_node:                       function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            if (node.__parent_real__ !== null) {\r\n                                _parent = tree.get_parent(node).__children__;\r\n                            } else {\r\n                                _parent = scope.treeData;\r\n                            }\r\n\r\n                            _parent.splice(node.__index__, 1);\r\n\r\n                            if (tree.selected_node === node) {\r\n                                tree.selected_node = null;\r\n                            }\r\n                        }\r\n                    },\r\n                    expand_node:                       function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            node.__expanded__ = true;\r\n                            return node;\r\n                        }\r\n                    },\r\n                    collapse_node:                     function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            node.__expanded__ = false;\r\n                            return node;\r\n                        }\r\n                    },\r\n                    get_selected_node:                 function () {\r\n                        return tree.selected_node;\r\n                    },\r\n                    get_first_node:                    function () {\r\n                        len = scope.treeData.length;\r\n                        if (len > 0) {\r\n                            return scope.treeData[0];\r\n                        }\r\n                        return null;\r\n                    },\r\n                    get_children:                      function (node) {\r\n                        return node.__children__;\r\n                    },\r\n                    get_siblings:                      function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            _parent = tree.get_parent(node);\r\n                            if (_parent) {\r\n                                _target = _parent.__children__;\r\n                            } else {\r\n                                _target = scope.treeData;\r\n                            }\r\n                            return _target;\r\n                        }\r\n                    },\r\n                    get_next_sibling:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            _target = tree.get_siblings(node);\r\n                            n = _target.length;\r\n                            if (node.__index__ < n) {\r\n                                return _target[node.__index__ + 1];\r\n                            }\r\n                        }\r\n                    },\r\n                    get_prev_sibling:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n                        _target = tree.get_siblings(node);\r\n                        if (node.__index__ > 0) {\r\n                            return _target[node.__index__ - 1];\r\n                        }\r\n                    },\r\n                    get_first_child:                   function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            _target = node.__children__;\r\n                            if (_target && _target.length > 0) {\r\n                                return node.__children__[0];\r\n                            }\r\n                        }\r\n                        return null;\r\n                    },\r\n                    get_closest_ancestor_next_sibling: function (node) {\r\n                        node = node || tree.selected_node;\r\n                        _target = tree.get_next_sibling(node);\r\n                        if (_target) {\r\n                            return _target;\r\n                        }\r\n\r\n                        _parent = tree.get_parent(node);\r\n                        return tree.get_closest_ancestor_next_sibling(_parent);\r\n                    },\r\n                    get_next_node:                     function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_first_child(node);\r\n                            if (_target) {\r\n                                return _target;\r\n                            } else {\r\n                                return tree.get_closest_ancestor_next_sibling(node);\r\n                            }\r\n                        }\r\n                    },\r\n                    get_prev_node:                     function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_prev_sibling(node);\r\n                            if (_target) {\r\n                                return tree.get_last_descendant(_target);\r\n                            }\r\n\r\n                            _parent = tree.get_parent(node);\r\n                            return _parent;\r\n                        }\r\n                    },\r\n                    get_last_descendant:               scope.getLastDescendant,\r\n                    select_parent_node:                function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _parent = tree.get_parent(node);\r\n                            if (_parent) {\r\n                                return tree.select_node(_parent);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_first_node:                 function () {\r\n                        return tree.select_node(tree.get_first_node());\r\n                    },\r\n                    select_next_sibling:               function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_next_sibling(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_prev_sibling:               function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_prev_sibling(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_next_node:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_next_node(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_prev_node:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_prev_node(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n                angular.extend(scope.tree, tree);\r\n                return scope.tree;\r\n            };\r\n\r\n        return _$init;\r\n    }\r\n);\n\nangular.module('template/TreeDnD/TreeDnD.html', []).run(\r\n    [\r\n        '$templateCache', function ($templateCache) {\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnD.html',\r\n            [\"<table ng-class=\\\"$tree_class\\\">\",\r\n             \"    <thead>\",\r\n             \"  <tr>\",\r\n             \"     <th ng-class=\\\"expandingProperty.titleClass\\\" ng-style=\\\"expandingProperty.titleStyle\\\">\",\r\n             \"         {{expandingProperty.displayName || expandingProperty.field || expandingProperty}}\",\r\n             \"        <\\/th>\",\r\n             \"        <th ng-repeat=\\\"col in colDefinitions\\\" ng-class=\\\"col.titleClass\\\" ng-style=\\\"col.titleStyle\\\">\",\r\n             \"         {{col.displayName || col.field}}\",\r\n             \"     </th>\",\r\n             \"    </tr>\",\r\n             \"    </thead>\",\r\n             \" <tbody tree-dnd-nodes=\\\"tree_nodes\\\">\",\r\n             \"  <tr tree-dnd-node=\\\"node\\\" ng-repeat=\\\"node in nodes track by node.__hashKey__ \\\" ng-show=\\\"node.__visible__\\\"\",\r\n             \"       ng-click=\\\"onSelect(node)\\\" ng-class=\\\"(node.__selected__ ? ' active':'')\\\">\",\r\n             \"        <td ng-if=\\\"!expandingProperty.template\\\" tree-dnd-node-handle\",\r\n             \"         ng-style=\\\"expandingProperty.cellStyle ? expandingProperty.cellStyle : {'padding-left': $callbacks.calsIndent(node.__level__)}\\\"\",\r\n             \"          ng-class=\\\"expandingProperty.cellClass\\\"\",\r\n             \"            compile=\\\"expandingProperty.cellTemplate\\\">\",\r\n             \"              <a data-nodrag>\",\r\n             \"                  <i ng-class=\\\"$icon_class\\\" ng-click=\\\"toggleExpand(node)\\\"\",\r\n             \"                     class=\\\"tree-icon\\\"></i>\",\r\n             \"              </a>\",\r\n             \"             {{node[expandingProperty.field] || node[expandingProperty]}}\",\r\n             \"       </td>\",\r\n             \"        <td ng-if=\\\"expandingProperty.template\\\" compile=\\\"expandingProperty.template\\\"></td>\",\r\n             \"        <td ng-repeat=\\\"col in colDefinitions\\\" ng-class=\\\"col.cellClass\\\" ng-style=\\\"col.cellStyle\\\"\",\r\n             \"            compile=\\\"col.cellTemplate\\\">\",\r\n             \"            {{node[col.field]}}\",\r\n             \"       </td>\",\r\n             \"    </tr>\",\r\n             \"    </tbody>\",\r\n             \"</table>\"].join('')\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusCopy.html',\r\n            \"<label><i class=\\\"fa fa-copy\\\"></i>&nbsp;<b>Copying</b></label>\"\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusMove.html',\r\n            '<label><i class=\"fa fa-file-text\"></i>&nbsp;<b>Moving</b></label>'\r\n        );\r\n    }]\r\n);\r\n\r\n}).call(window);"]}