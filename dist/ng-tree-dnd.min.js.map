{"version":3,"sources":["ng-tree-dnd.js"],"names":["angular","isUndefinedOrNull","val","isUndefined","isDefined","module","constant","tree","empty","hidden","node","nodes","handle","place","drag","status","icon","1","0","-1","directive","$compile","restrict","link","scope","element","attrs","$watch","compile","new_val","new_elem","isFunction","html","append","compileReplace","replaceWith","$element","$type","$class","addClass","replace","_enabledDragDrop","dragEnabled","dropEnabled","$modelValue","$icon_class","$node_class","treeDndNode","newValue","oldValue","setScope","__icon__","getScopeNode","getData","getElementChilds","querySelector","$nodes_class","treeDndNodes","$injector","$timeout","$http","$window","$document","$templateCache","$TreeDnDTemplate","$TreeDnDClass","$TreeDnDHelper","$TreeDnDPlugin","controller","$scope","$attrs","indent","indent_plus","indent_unit","$tree_class","primary_key","hasMultiSelect","colDefinitions","$globals","treeData","tree_nodes","sycning","copy","extend","iconExpand","iconCollapse","iconLeaf","for_all_descendants","fn","_i","_len","_nodes","__children__","length","getLastDescendant","last_child","n","selected_node","onClick","on_click","setTimeout","onSelect","select_node","on_select","passedExpand","_clone","toggleExpand","fnCallback","$callbacks","expand","__expanded__","getHash","__parent__","__uid__","accept","dragInfo","moveTo","isChanged","calsIndent","level","skipUnit","skipEdge","unit","edge","droppable","draggable","beforeDrop","event","changeKey","_key","Math","random","__selected__","clone","_this","this","remove","parent","splice","__index__","add","pos","push","enableDrag","enableDrop","placeElm","horizontal","dragDelay","enabledMove","statusMove","enabledHotkey","enabledCollapse","statusElm","dragging","beforeDrag","scopeDrag","dragStop","skiped","dropped","info","pass","isMove","changed","_node","_nodeAdd","_move","move","_parent","_parentRemove","_parentAdd","target","dragStart","dragMove","setDragging","enableMove","enableStatus","enabledStatus","hideStatus","refreshStatus","statusElmOld","getMove","getCopy","attr","find","removeClass","setPositionStatus","e","css","left","pageX","top","pageY","z-index","targeting","getPrevSibling","_index","__parent_real__","getNode","index","_hash","getScope","initPlace","dragElm","tagName","isTable","prop","toLowerCase","document","createElement","_len_down","height","parentNode","insertBefore","hidePlace","showPlace","getScopeTree","$safeApply","phase","$root","$$phase","$apply","tElement","tAttrs","$_Template","_element","trim","_fnInitFilter","_fnInitOrderBy","_fnGetControl","_fnInitDrag","w","i","len","_curW","_typeW","_nameW","_defaultW","_scopeW","_NotW","_AfterW","_BeforeW","getExpandOn","_firstNode","_keys","Object","keys","_regex","RegExp","test","expandingProperty","getColDefs","_col_defs","field","do_f","root","parent_real","visible","_icon","_index_real","_dept","_hashKey","isArray","expandLevel","__index_real__","__level__","__visible__","__hashKey__","__dept__","reload_data","oData","_data","_tree_nodes","console","log","expandOn","columnDefs","orderBy","filter","filterOptions","_offset","_max","_min","_deptTotal","abs","_defaultFilterOption","showParent","showChild","beginAnd","check_exist_attr","existAttr","isAnd","for_each_attrs","exist","passed","generateWatch","type","nameAttr","valDefault","nameScope","fnNotExist","fnAfter","fnBefore","old","indexOf","_watches","isHotkey","templateCopy","_url","get","setCopy","templateMove","setMove","treeClass","$tree","colDefs","filters","_passed","_iF","_keysF","_lenF","enabledFilter","option","primaryKey","indentUnit","optCallbacks","forEach","value","key","lenW","templateUrl","getPath","cache","success","data","factory","_$initConvert","line2tree","parentKey","parentId","rootIds","item","_primary","treeObjs","tree2tree","access_child","_copy","_child","_tree","_$helper","nodrag","targetElm","eventObj","obj","undefined","targetTouches","originalEvent","drop","width","offset","boundingClientRect","getBoundingClientRect","pageYOffset","body","scrollTop","documentElement","pageXOffset","scrollLeft","positionStarted","offsetX","offsetY","startX","lastX","startY","lastY","nowX","nowY","distX","distY","dirAx","dirX","dirY","lastDirX","lastDirY","distAxX","distAxY","positionMoved","firstMoving","newAx","moving","replaceIndent","children","_fnget","name","has","temp","templatePath","copyPath","movePath","scopes","_$init","path","$id","$filter","_filter","_state","options","fieldChild","parentPassed","_nodePassed","_childPassed","_fnCheck","callback","check","err","_fnProccess","condition","for_each_filter","_iO","_keysO","_lenO","_callback","conditions","_fnAfter","isNodePassed","isChildPassed","isParentPassed","__filtered__","__filtered_visible__","_fnBefore","_fnConvert","isObject","_fnMain","_options","_fnOrderBy","fnOrderBy","_fnOrder","list","isString","_fnDragEnd","holderWasShown","nodesSelected","lastSelectedNode","resetNodesSelected","__selected","_fnPlaceHolder","$params","_fnDragStart","hasTouch","button","which","uiTreeDragging","eventElm","eventScope","dragScope","eventElmTagName","_$scope","preventDefault","offsetEdge","_width","_scope","_needCollapse","_copied","_tbody","_holder","_swaper","after","bind","dragEndEvent","dragMoveEvent","dragCancelEvent","document_height","max","scrollHeight","offsetHeight","clientHeight","document_width","scrollWidth","offsetWidth","clientWidth","currentNode","$parent","ctrlKey","shiftKey","groupNodes","lastSelectedNodeIdx","includes","newSelectedNodeIdx","lowerIdx","higherIdx","idx","every","_fnDragMove","dragStarted","dragDelaying","getSelection","removeAllRanges","selection","leftElmPos","topElmPos","top_scroll","window","bottom_scroll","innerHeight","scrollBy","targetScope","targetBefore","targetOffset","isEmpty","isSwapped","_target","fnSwapTree","targetX","targetY","isVeritcal","_info","_drag","_drop","treeScope","isHolder","elementFromPoint","abortDrag","$$apply","_height","_prev","dragBorder","prepend","_isTable","_status","__multipleNodes","_fnBindDrag","unbind","_fnDragStartEvent","dragTimer","cancel","_fnKeydownHandler","keyCode","_fnKeyupHandler","bindDrag","dragEnd","keydownHandler","keyupHandler","$on","fnSetCollapse","fnSetExpand","expand_all_parents","deselect_node","get_parent","for_all_ancestors","child","add_node","new_node","add_node_root","expand_all","collapse_all","remove_node","expand_node","collapse_node","get_selected_node","get_first_node","get_children","get_siblings","get_next_sibling","get_prev_sibling","get_first_child","get_closest_ancestor_next_sibling","get_next_node","get_prev_node","get_last_descendant","select_parent_node","select_first_node","select_next_sibling","select_prev_sibling","select_next_node","select_prev_node","run","put","join","call"],"mappings":"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","file":"ng-tree-dnd.min.js","sourcesContent":["/**\r\n * The MIT License (MIT)\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to\r\n * deal in the Software without restriction, including without limitation the\r\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\n * sell copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\n * IN THE SOFTWARE.\r\n * @preserve\r\n */\r\n\r\n/**\r\n * Implementing TreeDnD & Event DrapnDrop (allow drag multi tree-table include all type: table, ol, ul)\r\n * Demo: http://thienhung1989.github.io/angular-tree-dnd\r\n * Github: https://github.com/thienhung1989/angular-tree-dnd\r\n * @version 3.0.4\r\n * @preserve\r\n * (c) 2015 Nguyuễn Thiện Hùng - <nguyenthienhung1989@gmail.com>\r\n */\r\n(function () {\r\n    'use strict';\r\n    angular.isUndefinedOrNull = function (val) {\r\n        return angular.isUndefined(val) || val === null;\r\n    }\r\n\r\n    angular.isDefined = function (val) {\r\n        return !(angular.isUndefined(val) || val === null);\r\n    }\r\n\r\n    angular.module('ntt.TreeDnD', ['template/TreeDnD/TreeDnD.html']).constant(\r\n        '$TreeDnDClass', {\r\n            tree:   'tree-dnd',\r\n            empty:  'tree-dnd-empty',\r\n            hidden: 'tree-dnd-hidden',\r\n            node:   'tree-dnd-node',\r\n            nodes:  'tree-dnd-nodes',\r\n            handle: 'tree-dnd-handle',\r\n            place:  'tree-dnd-placeholder',\r\n            drag:   'tree-dnd-drag',\r\n            status: 'tree-dnd-status',\r\n            icon:   {\r\n                '1':  'glyphicon glyphicon-minus',\r\n                '0':  'glyphicon glyphicon-plus',\r\n                '-1': 'glyphicon glyphicon-file'\r\n            }\r\n        }\r\n    ).directive(\r\n    'compile', [\r\n        '$compile', function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compile, function (new_val) {\r\n                            if (new_val) {\r\n                                /*\r\n                                 * Compile creates a linking function\r\n                                 * that can be used with any scope.\r\n                                 */\r\n                                var link = $compile(new_val);\r\n                                /*\r\n                                 * Executing the linking function\r\n                                 * creates a new element.\r\n                                 */\r\n                                var new_elem = link(scope);\r\n                                // Which we can then append to our DOM element.\r\n                                if(angular.isFunction(element.empty)){\r\n                                    element.empty()\r\n                                }else{\r\n                                    element.html('');\r\n                                }\r\n\r\n                                element.append(new_elem)\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n)\r\n    .directive(\r\n    'compileReplace', [\r\n        '$compile', function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compileReplace, function (new_val) {\r\n                            if (new_val) {\r\n                                /*\r\n                                 * Compile creates a linking function\r\n                                 * that can be used with any scope.\r\n                                 */\r\n                                var link = $compile(new_val);\r\n                                /*\r\n                                 * Executing the linking function\r\n                                 * creates a new element.\r\n                                 */\r\n                                var new_elem = link(scope);\r\n\r\n                                element.replaceWith(new_elem)\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n).directive(\r\n    'treeDndNodeHandle', function () {\r\n        return {\r\n            restrict: 'A',\r\n            scope:    true,\r\n            link:     function (scope, element, attrs) {\r\n                scope.$element = element;\r\n                scope.$type = 'TreeDnDNodeHandle';\r\n                if (scope.$class.handle) {\r\n                    element.addClass(scope.$class.handle);\r\n                }\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDndNode', function () {\r\n        return {\r\n            restrict: 'A',\r\n            replace:  true,\r\n            link:     function (scope, element, attrs) {\r\n                var _enabledDragDrop = (typeof scope.dragEnabled === 'boolean' || typeof scope.dropEnabled === 'boolean');\r\n                scope.$modelValue = null;\r\n                scope.$icon_class = '';\r\n                scope.$node_class = '';\r\n\r\n                if (scope.$class.node) {\r\n                    element.addClass(scope.$class.node);\r\n                    scope.$node_class = scope.$class.node;\r\n                }\r\n\r\n                scope.$watch(\r\n                    attrs.treeDndNode, function (newValue, oldValue, scope) {\r\n                        if (_enabledDragDrop) {\r\n                            scope.setScope(scope, newValue);\r\n                        }\r\n                        scope.$modelValue = newValue;\r\n                        scope.$icon_class = scope.$class.icon[newValue.__icon__];\r\n                    }, true\r\n                );\r\n\r\n                if (_enabledDragDrop) {\r\n\r\n                    scope.$element = element;\r\n                    scope.$type = 'TreeDnDNode';\r\n\r\n                    scope.getScopeNode = function () {\r\n                        return scope;\r\n                    };\r\n\r\n                    scope.getData = function () {\r\n                        return scope.$modelValue;\r\n                    };\r\n\r\n                    scope.getElementChilds = function () {\r\n                        return angular.element(element[0].querySelector('[tree-dnd-nodes]'));\r\n                    };\r\n                }\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDndNodes', function () {\r\n        return {\r\n            restrict: 'A',\r\n            replace:  true,\r\n            link:     function (scope, element, attrs) {\r\n                scope.nodes = [];\r\n                scope.$nodes_class = '';\r\n                scope.$type = 'TreeDnDNodes';\r\n                scope.$element = element;\r\n                scope.getScopeNode = null;\r\n\r\n                scope.$watch(\r\n                    attrs.treeDndNodes, function (newValue, oldValue, scope) {\r\n                        scope.nodes = newValue;\r\n                    }, true\r\n                );\r\n\r\n                if (scope.$class.nodes) {\r\n                    element.addClass(scope.$class.nodes);\r\n                    scope.$nodes_class = scope.$class.nodes;\r\n                }\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDnd', [\r\n        '$injector', '$timeout', '$http', '$compile', '$window', '$document', '$templateCache',\r\n        '$TreeDnDTemplate', '$TreeDnDClass', '$TreeDnDHelper', '$TreeDnDPlugin',\r\n        function ($injector, $timeout, $http, $compile, $window, $document, $templateCache,\r\n                  $TreeDnDTemplate, $TreeDnDClass, $TreeDnDHelper, $TreeDnDPlugin) {\r\n            return {\r\n                restrict:   'E',\r\n                scope:      true,\r\n                replace:    true,\r\n                controller: [\r\n                    '$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\r\n                        $scope.indent = 20;\r\n                        $scope.indent_plus = 15;\r\n                        $scope.indent_unit = 'px';\r\n                        $scope.$tree_class = 'table';\r\n                        $scope.primary_key = '__uid__';\r\n                        $scope.hasMultiSelect = $attrs.hasMultiSelect === 'true';\r\n\r\n                        $scope.$type = 'TreeDnD';\r\n                        // $scope.enabledFilter = null;\r\n                        $scope.colDefinitions = [];\r\n                        $scope.$globals = {};\r\n                        $scope.$class = {};\r\n\r\n                        $scope.treeData = [];\r\n                        $scope.tree_nodes = [];\r\n\r\n                        $scope.sycning = false;\r\n\r\n                        $scope.$class = angular.copy($TreeDnDClass);\r\n                        angular.extend(\r\n                            $scope.$class.icon, {\r\n                                '1':  $attrs.iconExpand || 'glyphicon glyphicon-minus',\r\n                                '0':  $attrs.iconCollapse || 'glyphicon glyphicon-plus',\r\n                                '-1': $attrs.iconLeaf || 'glyphicon glyphicon-file'\r\n                            }\r\n                        );\r\n\r\n                        $scope.for_all_descendants = function (node, fn) {\r\n                            if (angular.isFunction(fn)) {\r\n                                var _i, _len, _nodes;\r\n\r\n                                if (fn(node)) {\r\n                                    return false;\r\n                                }\r\n                                _nodes = node.__children__;\r\n                                _len = _nodes.length;\r\n                                for (_i = 0; _i < _len; _i++) {\r\n                                    if (!$scope.for_all_descendants(_nodes[_i], fn)) {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                            }\r\n                            return true;\r\n                        };\r\n\r\n                        $scope.getLastDescendant = function (node) {\r\n                            var last_child, n;\r\n                            if (!node) {\r\n                                node = $scope.tree ? $scope.tree.selected_node : false;\r\n                            }\r\n                            if(node === false){\r\n                                return false;\r\n                            }\r\n                            n = node.__children__.length;\r\n                            if (n === 0) {\r\n                                return node;\r\n                            } else {\r\n                                last_child = node.__children__[n - 1];\r\n                                return $scope.getLastDescendant(last_child);\r\n                            }\r\n                        };\r\n\r\n                        $scope.getElementChilds = function () {\r\n                            return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\r\n                        };\r\n\r\n                        $scope.onClick = function (node) {\r\n                            if (angular.isDefined($scope.tree) && angular.isFunction($scope.tree.on_click)) {\r\n                                // We want to detach from Angular's digest cycle so we can\r\n                                // independently measure the time for one cycle.\r\n                                setTimeout(\r\n                                    function () {\r\n                                        $scope.tree.on_click(node);\r\n                                    }, 0\r\n                                );\r\n                            }\r\n                        };\r\n\r\n                        $scope.onSelect = function (node) {\r\n                            if (angular.isDefined($scope.tree)) {\r\n                                if (node !== $scope.tree.selected_node) {\r\n                                    $scope.tree.select_node(node);\r\n                                }\r\n\r\n                                if (angular.isFunction($scope.tree.on_select)) {\r\n                                    setTimeout(\r\n                                        function () {\r\n                                            $scope.tree.on_select(node);\r\n                                        }, 0\r\n                                    );\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        var passedExpand, _clone;\r\n                        $scope.toggleExpand = function (node, fnCallback) {\r\n                            passedExpand = true;\r\n                            if (angular.isFunction(fnCallback) && !fnCallback(node)) {\r\n                                passedExpand = false;\r\n                            } else if (angular.isFunction($scope.$callbacks.expand) && !$scope.$callbacks.expand(node)) {\r\n                                passedExpand = false;\r\n                            }\r\n\r\n                            if (passedExpand) {\r\n                                if (node.__children__.length > 0) {\r\n                                    node.__expanded__ = !node.__expanded__;\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        $scope.getHash = function (node) {\r\n                            if ($scope.primary_key === '__uid__') {\r\n                                return '#' + node.__parent__ + '#' + node.__uid__;\r\n                            } else {\r\n                                return '#' + node.__parent__ + '#' + node[$scope.primary_key];\r\n                            }\r\n                        };\r\n\r\n                        $scope.$callbacks = {\r\n                            for_all_descendants: $scope.for_all_descendants,\r\n                            expand:              function (node) {\r\n                                return true;\r\n                            },\r\n                            accept:              function (dragInfo, moveTo, isChanged) {\r\n                                return $scope.dropEnabled === true;\r\n                            },\r\n                            calsIndent:          function (level, skipUnit, skipEdge) {\r\n                                var unit = 0,\r\n                                    edge = skipEdge ? 0 : $scope.indent_plus;\r\n                                if (!skipUnit) {\r\n                                    unit = $scope.indent_unit ? $scope.indent_unit : 'px';\r\n                                }\r\n\r\n                                if (level - 1 < 1) {\r\n                                    return edge + unit;\r\n                                } else {\r\n                                    return $scope.indent * (level - 1) + edge + unit;\r\n                                }\r\n                            },\r\n                            droppable:           function () {\r\n                                return $scope.dropEnabled === true;\r\n                            },\r\n                            draggable:           function () {\r\n                                return $scope.dragEnabled === true;\r\n                            },\r\n                            beforeDrop:          function (event) {\r\n                                return true;\r\n                            },\r\n                            changeKey:           function (node) {\r\n                                var _key = node.__uid__;\r\n                                node.__uid__ = Math.random();\r\n                                if (node.__selected__) {\r\n                                    delete(node.__selected__);\r\n                                }\r\n\r\n                                if ($scope.primary_key !== '__uid__') {\r\n                                    _key = '' + node[$scope.primary_key];\r\n                                    _key = _key.replace(/_#.+$/g, '') + '_#' + node.__uid__;\r\n\r\n                                    node[$scope.primary_key] = _key;\r\n                                }\r\n                                // delete(node.__hashKey__);\r\n                            },\r\n                            clone:               function (node, _this) {\r\n                                _clone = angular.copy(node);\r\n                                this.for_all_descendants(_clone, this.changeKey);\r\n                                return _clone;\r\n                            },\r\n                            remove:              function (node, parent, _this) {\r\n                                return parent.splice(node.__index__, 1)[0];\r\n                            },\r\n                            add:                 function (node, pos, parent, _this) {\r\n                                if (parent) {\r\n                                    if (parent.length > -1) {\r\n                                        if (pos > -1) {\r\n                                            parent.splice(pos, 0, node);\r\n                                        } else {\r\n                                            // todo If children need load crazy\r\n                                            parent.push(node);\r\n                                        }\r\n                                    } else {\r\n                                        parent.push(node);\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        if ($attrs.enableDrag || $attrs.enableDrop) {\r\n                            $scope.placeElm = null;\r\n                            //                            $scope.dragBorder = 30;\r\n                            $scope.dragEnabled = null;\r\n                            $scope.dropEnabled = null;\r\n                            $scope.horizontal = null;\r\n\r\n                            if ($attrs.enableDrag) {\r\n\r\n                                $scope.dragDelay = 0;\r\n                                $scope.enabledMove = true;\r\n                                $scope.statusMove = true;\r\n                                $scope.enabledHotkey = false;\r\n                                $scope.enabledCollapse = null;\r\n                                $scope.statusElm = null;\r\n                                $scope.dragging = null;\r\n\r\n                                angular.extend(\r\n                                    $scope.$callbacks, {\r\n                                        beforeDrag: function (scopeDrag) {\r\n                                            return true;\r\n                                        },\r\n                                        dragStop:   function (event, skiped) {},\r\n                                        dropped:    function (info, pass, isMove) {\r\n                                            if (!info) {\r\n                                                return null;\r\n                                            }\r\n\r\n                                            if (!info.changed && isMove) {\r\n                                                return false;\r\n                                            }\r\n                                            var _node = info.node,\r\n                                                _nodeAdd = null,\r\n                                                _move = info.move,\r\n                                                _parent = null,\r\n                                                _parentRemove = (info.parent || info.drag.treeData),\r\n                                                _parentAdd = (_move.parent || info.target.treeData);\r\n\r\n                                            if (info.target.$callbacks.accept(info, info.move, info.changed)) {\r\n                                                if (isMove) {\r\n                                                    _parent = _parentRemove;\r\n                                                    if (angular.isDefined(_parent.__children__)) {\r\n                                                        _parent = _parent.__children__;\r\n                                                    }\r\n\r\n                                                    _nodeAdd = info.drag.$callbacks.remove(\r\n                                                        _node,\r\n                                                        _parent,\r\n                                                        info.drag.$callbacks\r\n                                                    );\r\n                                                } else {\r\n                                                    _nodeAdd = info.drag.$callbacks.clone(_node, info.drag.$callbacks);\r\n                                                }\r\n\r\n                                                // if node dragging change index in sample node parent\r\n                                                // and index node decrement\r\n                                                if (isMove &&\r\n                                                    info.drag === info.target &&\r\n                                                    _parentRemove === _parentAdd &&\r\n                                                    _move.pos >= info.node.__index__) {\r\n                                                    _move.pos--;\r\n                                                }\r\n\r\n                                                _parent = _parentAdd;\r\n                                                if (_parent.__children__) {\r\n                                                    _parent = _parent.__children__;\r\n                                                }\r\n\r\n                                                info.target.$callbacks.add(\r\n                                                    _nodeAdd,\r\n                                                    _move.pos,\r\n                                                    _parent,\r\n                                                    info.drag.$callbacks\r\n                                                );\r\n\r\n                                                return true;\r\n                                            }\r\n\r\n                                            return false;\r\n                                        },\r\n                                        dragStart:  function (event) {},\r\n                                        dragMove:   function (event) {}\r\n                                    }\r\n                                );\r\n\r\n                                $scope.setDragging = function (dragInfo) {\r\n                                    $scope.dragging = dragInfo;\r\n                                };\r\n\r\n                                $scope.enableMove = function (val) {\r\n                                    if (typeof val === \"boolean\") {\r\n                                        $scope.enabledMove = val;\r\n                                    } else {\r\n                                        $scope.enabledMove = true;\r\n                                    }\r\n                                };\r\n\r\n                                if ($attrs.enableStatus) {\r\n                                    $scope.enabledStatus = false;\r\n\r\n                                    $scope.hideStatus = function () {\r\n                                        if ($scope.statusElm) {\r\n                                            $scope.statusElm.addClass($scope.$class.hidden);\r\n                                        }\r\n                                    };\r\n\r\n                                    $scope.refreshStatus = function () {\r\n                                        if (!$scope.dragging) {\r\n                                            return;\r\n                                        }\r\n\r\n                                        if ($scope.enabledStatus) {\r\n                                            var statusElmOld = $scope.statusElm;\r\n                                            if ($scope.enabledMove) {\r\n                                                $scope.statusElm = angular.element($TreeDnDTemplate.getMove($scope));\r\n                                            } else {\r\n                                                $scope.statusElm = angular.element($TreeDnDTemplate.getCopy($scope));\r\n                                            }\r\n\r\n                                            if (statusElmOld !== $scope.statusElm) {\r\n                                                if (statusElmOld) {\r\n                                                    $scope.statusElm.attr('class', statusElmOld.attr('class'));\r\n                                                    $scope.statusElm.attr('style', statusElmOld.attr('style'));\r\n                                                    statusElmOld.remove();\r\n                                                }\r\n                                                $document.find('body').append($scope.statusElm);\r\n\r\n                                            }\r\n\r\n                                            $scope.statusElm.removeClass($scope.$class.hidden);\r\n                                        }\r\n                                    };\r\n\r\n                                    $scope.setPositionStatus = function (e) {\r\n                                        if ($scope.statusElm) {\r\n                                            $scope.statusElm.css(\r\n                                                {\r\n                                                    'left':    e.pageX + 10 + 'px',\r\n                                                    'top':     e.pageY + 15 + 'px',\r\n                                                    'z-index': 9999\r\n                                                }\r\n                                            );\r\n                                            $scope.statusElm.addClass($scope.$class.status);\r\n                                        }\r\n                                    };\r\n                                }\r\n                            }\r\n\r\n                            $scope.targeting = false;\r\n\r\n                            $scope.getPrevSibling = function (node) {\r\n                                if (node && node.__index__ > 0) {\r\n                                    var _parent, _index = node.__index__ - 1;\r\n\r\n                                    if (angular.isDefined(node.__parent_real__)) {\r\n                                        _parent = $scope.tree_nodes[node.__parent_real__];\r\n                                        return _parent.__children__[_index];\r\n                                    }\r\n                                    return $scope.treeData[_index];\r\n\r\n                                }\r\n                                return null;\r\n                            };\r\n\r\n                            $scope.getNode = function (index) {\r\n                                if (angular.isUndefinedOrNull(index)) {\r\n                                    return null;\r\n                                }\r\n                                return $scope.tree_nodes[index];\r\n                            };\r\n\r\n                            $scope.setScope = function (scope, node) {\r\n                                var _hash = $scope.getHash(node);\r\n                                if ($scope.$globals[_hash] !== scope) {\r\n                                    $scope.$globals[_hash] = scope;\r\n                                }\r\n                            };\r\n\r\n                            $scope.getScope = function (node) {\r\n                                if (node) {\r\n                                    return $scope.$globals[$scope.getHash(node)];\r\n                                }\r\n                                return $scope;\r\n\r\n                            };\r\n\r\n                            $scope.initPlace = function (element, dragElm) {\r\n\r\n                                var tagName = null,\r\n                                    isTable = false;\r\n\r\n                                if (element) {\r\n                                    tagName = element.prop('tagName').toLowerCase();\r\n                                    isTable = (tagName === 'tr' || tagName === 'td');\r\n                                } else {\r\n                                    tagName = $scope.getElementChilds().prop('tagName').toLowerCase();\r\n                                    isTable = (tagName === 'tbody' || tagName === 'table');\r\n                                }\r\n\r\n                                if (!$scope.placeElm) {\r\n\r\n                                    if (isTable) {\r\n                                        $scope.placeElm = angular.element($window.document.createElement('tr'));\r\n                                        var _len_down = $scope.colDefinitions.length;\r\n                                        $scope.placeElm.append(\r\n                                            angular.element($window.document.createElement('td'))\r\n                                                .addClass($scope.$class.empty)\r\n                                                .addClass('indented')\r\n                                                .addClass($scope.$class.place)\r\n                                        );\r\n                                        while (_len_down-- > 0) {\r\n                                            $scope.placeElm.append(\r\n                                                angular.element($window.document.createElement('td'))\r\n                                                    .addClass($scope.$class.empty)\r\n                                                    .addClass($scope.$class.place)\r\n                                            );\r\n                                        }\r\n                                    } else {\r\n                                        $scope.placeElm = angular.element($window.document.createElement('li'))\r\n                                            .addClass($scope.$class.empty)\r\n                                            .addClass($scope.$class.place);\r\n                                    }\r\n\r\n                                }\r\n\r\n                                if (dragElm) {\r\n                                    $scope.placeElm.css('height', $TreeDnDHelper.height(dragElm) + 'px');\r\n                                }\r\n\r\n                                if (element) {\r\n                                    element[0].parentNode.insertBefore($scope.placeElm[0], element[0]);\r\n                                } else {\r\n                                    $scope.getElementChilds().append($scope.placeElm);\r\n                                }\r\n\r\n                                return $scope.placeElm;\r\n                            };\r\n\r\n                            $scope.hidePlace = function () {\r\n                                if ($scope.placeElm) {\r\n                                    $scope.placeElm.addClass($scope.$class.hidden);\r\n                                }\r\n                            };\r\n\r\n                            $scope.showPlace = function () {\r\n                                if ($scope.placeElm) {\r\n                                    $scope.placeElm.removeClass($scope.$class.hidden);\r\n                                }\r\n                            };\r\n\r\n                            $scope.getScopeTree = function () {\r\n                                return $scope;\r\n                            };\r\n\r\n                        }\r\n\r\n                        $scope.$safeApply = function (fn) {\r\n                            var phase = this.$root.$$phase;\r\n                            if (phase === '$apply' || phase === '$digest') {\r\n                                if (fn && (typeof(fn) === 'function')) {\r\n                                    fn();\r\n                                }\r\n                            } else {\r\n                                this.$apply(fn);\r\n                            }\r\n                        };\r\n\r\n                    }],\r\n                compile:    function compile(tElement, tAttrs) {\r\n\r\n                    var $_Template = '',\r\n                        _element = tElement.html().trim();\r\n                    if (_element.length > 0) {\r\n                        $_Template = _element;\r\n                        tElement.html('');\r\n                    }\r\n\r\n                    return function fnPost(scope, element, attrs) {\r\n                        var getExpandOn = function () {\r\n                                if (scope.treeData && scope.treeData.length) {\r\n                                    var _firstNode = scope.treeData[0], _keys = Object.keys(_firstNode),\r\n                                        _regex = new RegExp(\"^__([a-zA-Z0-9_\\-]*)__$\"),\r\n                                        _len,\r\n                                        i;\r\n                                    // Auto get first field with type is string;\r\n                                    for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                                        if (typeof (_firstNode[_keys[i]]) === 'string' && !_regex.test(_keys[i])) {\r\n                                            scope.expandingProperty = _keys[i];\r\n                                            return;\r\n                                        }\r\n                                    }\r\n\r\n                                    // Auto get first\r\n                                    if (angular.isUndefinedOrNull(scope.expandingProperty)) {\r\n                                        scope.expandingProperty = _keys[0];\r\n                                    }\r\n\r\n                                }\r\n                            },\r\n                            getColDefs = function () {\r\n                                // Auto get Defs except attribute __level__ ....\r\n                                if (scope.treeData.length) {\r\n                                    var _col_defs = [], _firstNode = scope.treeData[0],\r\n                                        _regex = new RegExp(\"(^__([a-zA-Z0-9_\\-]*)__$|^\" + scope.expandingProperty + \"$)\"),\r\n                                        _keys = Object.keys(_firstNode),\r\n                                        i, _len;\r\n                                    // Auto get first field with type is string;\r\n                                    for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                                        if (typeof (_firstNode[_keys[i]]) === 'string' && !_regex.test(_keys[i])) {\r\n                                            _col_defs.push(\r\n                                                {\r\n                                                    field: _keys[i]\r\n                                                }\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                    scope.colDefinitions = _col_defs;\r\n                                }\r\n                            },\r\n                            _fnInitFilter,\r\n                            _fnInitOrderBy,\r\n                            _fnGetControl,\r\n                            _fnInitDrag,\r\n                            do_f = function (root, node, parent, parent_real, level, visible, index) {\r\n                                var _i, _len, _icon, _index_real, _dept, _hashKey;\r\n                                if (!angular.isArray(node.__children__)) {\r\n                                    node.__children__ = [];\r\n                                }\r\n\r\n                                node.__parent_real__ = parent_real;\r\n                                node.__parent__ = parent;\r\n                                _len = node.__children__.length;\r\n\r\n                                if (angular.isUndefinedOrNull(node.__expanded__) && _len > 0) {\r\n                                    node.__expanded__ = level < scope.expandLevel;\r\n                                }\r\n\r\n                                if (_len === 0) {\r\n                                    _icon = -1;\r\n                                } else {\r\n                                    if (node.__expanded__) {\r\n                                        _icon = 1;\r\n                                    } else {\r\n                                        _icon = 0;\r\n                                    }\r\n                                }\r\n                                // Insert item vertically\r\n                                _index_real = root.length;\r\n                                node.__index__ = index;\r\n                                node.__index_real__ = _index_real;\r\n                                node.__level__ = level;\r\n                                node.__icon__ = _icon;\r\n                                node.__visible__ = !!visible;\r\n\r\n                                if (angular.isUndefinedOrNull(node.__uid__)) {\r\n                                    node.__uid__ = \"\" + Math.random();\r\n                                }\r\n\r\n                                root.push(node);\r\n\r\n                                // Check node children\r\n                                _dept = 1;\r\n                                if (_len > 0) {\r\n                                    for (_i = 0; _i < _len; _i++) {\r\n                                        _dept += do_f(\r\n                                            root,\r\n                                            node.__children__[_i],\r\n                                            (scope.primary_key === '__uid__') ? node.__uid__ : node[scope.primary_key],\r\n                                            _index_real,\r\n                                            level + 1,\r\n                                            visible && node.__expanded__,\r\n                                            _i\r\n                                        );\r\n                                    }\r\n                                }\r\n\r\n                                _hashKey = scope.getHash(node);\r\n\r\n                                if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\r\n                                    node.__hashKey__ = _hashKey;\r\n                                    // delete(scope.$globals[_hashKey]);\r\n                                }\r\n\r\n                                node.__dept__ = _dept;\r\n\r\n                                return _dept;\r\n                            },\r\n                            reload_data = function (oData) {\r\n                                var _data,\r\n                                    _len,\r\n                                    _tree_nodes = [];\r\n                                console.log('---------');\r\n                                if (angular.isDefined(oData)) {\r\n                                    if (!angular.isArray(oData) || oData.length === 0) {\r\n                                        return [];\r\n                                    } else {\r\n                                        _data = oData;\r\n                                    }\r\n                                } else if (!angular.isArray(scope.treeData) || scope.treeData.length === 0) {\r\n                                    return [];\r\n                                } else {\r\n                                    _data = scope.treeData;\r\n                                }\r\n\r\n                                if (!attrs.expandOn) {\r\n                                    getExpandOn();\r\n                                }\r\n\r\n                                if (!attrs.columnDefs) {\r\n                                    getColDefs();\r\n                                }\r\n\r\n                                if (angular.isDefined(scope.orderBy)) {\r\n                                    if (!angular.isFunction(_fnInitOrderBy)) {\r\n                                        _fnInitOrderBy = $TreeDnDPlugin('$TreeDnDOrderBy');\r\n                                    }\r\n\r\n                                    if (angular.isFunction(_fnInitOrderBy)) {\r\n                                        _data = _fnInitOrderBy(_data, scope.orderBy);\r\n                                    }\r\n                                }\r\n\r\n                                if (angular.isDefined(scope.filter)) {\r\n                                    if (!angular.isFunction(_fnInitFilter)) {\r\n                                        _fnInitFilter = $TreeDnDPlugin('$TreeDnDFilter');\r\n                                    }\r\n\r\n                                    if (angular.isFunction(_fnInitFilter)) {\r\n                                        _data = _fnInitFilter(_data, scope.filter, scope.filterOptions);\r\n                                    }\r\n                                }\r\n\r\n                                _len = _data.length;\r\n                                if (_len > 0) {\r\n                                    var _i,\r\n                                        _offset, _max, _min, _keys,\r\n                                        _deptTotal = 0;\r\n\r\n                                    for (_i = 0; _i < _len; _i++) {\r\n                                        _deptTotal += do_f(_tree_nodes, _data[_i], null, null, 1, true, _i);\r\n                                    }\r\n\r\n                                    // clear Element Empty\r\n                                    _keys = Object.keys(scope.$globals);\r\n                                    _len = scope.$globals.length;\r\n                                    _offset = _len - _deptTotal;\r\n\r\n                                    if (_offset !== 0) {\r\n                                        _max = _len - _offset;\r\n                                        _min = _max - Math.abs(_offset);\r\n                                        for (_i = _min; _i < _max; _i++) {\r\n                                            delete(scope.$globals[_keys[_i]]);\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                // clear memory\r\n                                if (angular.isDefined(scope.tree_nodes)) {\r\n                                    delete(scope.tree_nodes);\r\n                                }\r\n\r\n                                scope.tree_nodes = _tree_nodes;\r\n                                return _tree_nodes;\r\n                            },\r\n                            _defaultFilterOption = {\r\n                                showParent: true,\r\n                                showChild:  false,\r\n                                beginAnd:   true\r\n                            },\r\n                            tree,\r\n                            check_exist_attr = function (attrs, existAttr, isAnd) {\r\n                                if (angular.isUndefinedOrNull(existAttr)) {\r\n                                    return false;\r\n                                }\r\n\r\n                                if (existAttr === '*' || !angular.isUndefined(attrs[existAttr])) {\r\n                                    return true;\r\n                                }\r\n\r\n                                if (angular.isArray(existAttr)) {\r\n                                    return for_each_attrs(attrs, existAttr, isAnd);\r\n                                }\r\n                            },\r\n                            for_each_attrs = function (attrs, exist, isAnd) {\r\n                                var i, len = exist.length, passed = false;\r\n\r\n                                if (len === 0) {\r\n                                    return null;\r\n                                }\r\n                                for (i = 0; i < len; i++) {\r\n                                    if (check_exist_attr(attrs, exist[i], !isAnd)) {\r\n                                        passed = true;\r\n                                        if (!isAnd) {\r\n                                            return true;\r\n                                        }\r\n                                    } else {\r\n                                        if (isAnd) {\r\n                                            return false;\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                return passed;\r\n                            },\r\n                            generateWatch = function (type, nameAttr, valDefault, nameScope, fnNotExist, fnAfter, fnBefore) {\r\n                                nameScope = nameScope || nameAttr;\r\n                                if (typeof type === 'string' || angular.isArray(type)) {\r\n                                    if (angular.isFunction(fnBefore) && fnBefore()) {\r\n                                        return;//jmp\r\n                                    }\r\n                                    if (typeof tAttrs[nameAttr] === 'string') {\r\n                                        scope.$watch(\r\n                                            tAttrs[nameAttr], function (val, old, scope) {\r\n                                                if ((typeof type === 'string' && typeof val === type) ||\r\n                                                    (angular.isArray(type) && type.indexOf(typeof val) > -1)\r\n                                                ) {\r\n                                                    scope[nameScope] = val;\r\n                                                } else {\r\n                                                    if (angular.isFunction(valDefault)) {\r\n                                                        scope[nameScope] = valDefault(val);\r\n                                                    } else {\r\n                                                        scope[nameScope] = valDefault;\r\n                                                    }\r\n                                                }\r\n\r\n                                                if (angular.isFunction(fnAfter)) {\r\n                                                    fnAfter(scope[nameScope], scope);\r\n                                                }\r\n                                            }, true\r\n                                        );\r\n                                    } else {\r\n\r\n                                        if (angular.isFunction(fnNotExist)) {\r\n                                            scope[nameScope] = fnNotExist();\r\n                                        } else if (!angular.isUndefined(fnNotExist)) {\r\n                                            scope[nameScope] = fnNotExist;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            _watches = [\r\n                                [\r\n                                    'enableDrag', [\r\n                                    ['boolean', 'enableStatus', null, 'enabledStatus'],\r\n                                    ['boolean', 'enableMove', null, 'enabledMove'],\r\n                                    ['number', 'dragDelay', 0, null, 0],\r\n                                    ['boolean', 'enableCollapse', null, 'enabledCollapse'],\r\n                                    [\r\n                                        'boolean', 'enableHotkey', null, 'enabledHotkey', null, function (isHotkey) {\r\n                                        if (isHotkey) {\r\n                                            scope.enabledMove = false;\r\n                                        } else {\r\n                                            scope.enabledMove = scope.statusMove;\r\n                                        }\r\n                                    }]\r\n                                ]],\r\n                                [\r\n                                    ['enableDrag', 'enableStatus'], [\r\n                                    [\r\n                                        'string', 'templateCopy', attrs.templateCopy, 'templateCopy', null,\r\n                                        function (_url) {\r\n                                            if (_url && $templateCache.get(_url)) {\r\n                                                $TreeDnDTemplate.setCopy(_url, scope);\r\n                                            }\r\n                                        }],\r\n                                    [\r\n                                        'string', 'templateMove', attrs.templateMove, 'templateMove', null,\r\n                                        function (_url) {\r\n                                            if (_url && $templateCache.get(_url)) {\r\n                                                $TreeDnDTemplate.setMove(_url, scope);\r\n                                            }\r\n                                        }]\r\n                                ]],\r\n                                [\r\n                                    [['enableDrag', 'enableDrop']], [\r\n                                    ['number', 'dragBorder', 30, 'dragBorder', 30]]\r\n                                ],\r\n                                [\r\n                                    '*', [\r\n                                    ['boolean', 'horizontal'],\r\n                                    [\r\n                                        'callback', 'treeClass', function (val) {\r\n                                        switch (typeof val) {\r\n                                            case 'string':\r\n                                                scope.$tree_class = val;\r\n                                                break;\r\n                                            case 'object':\r\n                                                angular.extend(scope.$class, val);\r\n                                                scope.$tree_class = scope.$class.tree;\r\n                                                break;\r\n                                            default:\r\n                                                scope.$tree_class = attrs.treeClass;\r\n                                                break;\r\n                                        }\r\n                                    }, 'treeClass', function () {\r\n                                        scope.$tree_class = scope.$class.tree + ' table';\r\n                                    }, null, function () {\r\n                                        if (/^(\\s+[\\w\\-]+){2,}$/g.test(\" \" + attrs.treeClass)) {\r\n                                            scope.$tree_class = attrs.treeClass.trim();\r\n                                            return true;\r\n                                        }\r\n                                    }],\r\n                                    [\r\n                                        ['object', 'string'], 'expandOn', getExpandOn, 'expandingProperty', getExpandOn,\r\n                                        function (expandOn) {\r\n                                            if (angular.isUndefinedOrNull(expandOn)) {\r\n                                                scope.expandingProperty = attrs.expandOn;\r\n                                            }\r\n                                        }],\r\n                                    [\r\n                                        'object', 'treeControl', angular.isDefined(scope.tree) ? scope.tree : {},\r\n                                        'tree', null, function ($tree) {\r\n\r\n                                        if (!angular.isFunction(_fnGetControl)) {\r\n                                            _fnGetControl = $TreeDnDPlugin('$TreeDnDControl');\r\n                                        }\r\n\r\n                                        if (angular.isFunction(_fnGetControl)) {\r\n                                            tree = angular.extend(\r\n                                                $tree,\r\n                                                _fnGetControl(scope)\r\n                                            );\r\n                                        }\r\n                                    }],\r\n                                    [\r\n                                        ['array', 'object'], 'columnDefs', getColDefs, 'colDefinitions', getColDefs,\r\n                                        function (colDefs) {\r\n                                            if (angular.isUndefinedOrNull(colDefs) || !angular.isArray(colDefs)) {\r\n                                                scope.colDefinitions = getColDefs();\r\n                                            }\r\n                                        }],\r\n                                    [['object', 'string', 'array', 'function'], 'orderBy', attrs.orderBy],\r\n                                    [\r\n                                        ['object', 'array'], 'filter', null, 'filter', null, function (filters) {\r\n                                        var _passed = false;\r\n                                        if (angular.isDefined(filters) && !angular.isArray(filters)) {\r\n                                            var _keysF = Object.keys(filters),\r\n                                                _lenF = _keysF.length, _iF;\r\n\r\n                                            if (_lenF > 0) {\r\n                                                for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                                                    if ((typeof filters[_keysF[_iF]]) === 'string' &&\r\n                                                        filters[_keysF[_iF]].length === 0) {\r\n                                                        continue;\r\n                                                    }\r\n                                                    _passed = true;\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                        scope.enabledFilter = _passed;\r\n                                        reload_data();\r\n                                    }],\r\n                                    [\r\n                                        'object', 'filterOptions', _defaultFilterOption, 'filterOptions',\r\n                                        _defaultFilterOption, function (option) {\r\n                                        if (typeof option === \"object\") {\r\n                                            scope.filterOptions = angular.extend(_defaultFilterOption, option);\r\n                                        }\r\n                                    }],\r\n                                    ['string', 'primaryKey', attrs.primaryKey, 'primary_key', '__uid__'],\r\n                                    ['string', 'indentUnit', attrs.indentUnit, 'indent_unit'],\r\n                                    ['number', 'indent', 30, null, 30],\r\n                                    ['number', 'indentPlus', 20, null, 20],\r\n                                    [\r\n                                        'null', 'callbacks',\r\n                                        function (optCallbacks) {\r\n                                            angular.forEach(\r\n                                                optCallbacks, function (value, key) {\r\n                                                    if (typeof value === \"function\") {\r\n                                                        if (scope.$callbacks[key]) {\r\n                                                            scope.$callbacks[key] = value;\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            );\r\n                                            return scope.$callbacks;\r\n                                        },\r\n                                        '$callbacks'\r\n                                    ],\r\n                                    [\r\n                                        'number', 'expandLevel', 3, 'expandLevel', 3, function () {\r\n                                        reload_data();\r\n                                    }],\r\n                                    ['boolean', 'enableDrag', null, 'dragEnabled'],\r\n                                    ['boolean', 'enableDrop', null, 'dropEnabled']\r\n                                ]]\r\n                            ],\r\n                            w, lenW = _watches.length,\r\n                            i, len,\r\n                            _curW,\r\n                            _typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW;\r\n                        for (w = 0; w < lenW; w++) {\r\n                            // skip if not exist\r\n                            if (!check_exist_attr(attrs, _watches[w][0], true)) {\r\n                                continue;\r\n                            }\r\n                            _curW = _watches[w][1];\r\n                            for (i = 0, len = _curW.length; i < len; i++) {\r\n                                _typeW = _curW[i][0];\r\n                                _nameW = _curW[i][1];\r\n                                _defaultW = _curW[i][2];\r\n                                _scopeW = _curW[i][3];\r\n                                _NotW = _curW[i][4];\r\n                                _AfterW = _curW[i][5];\r\n                                _BeforeW = _curW[i][6];\r\n                                generateWatch(_typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW);\r\n                            }\r\n                        }\r\n\r\n                        if (attrs.treeData) {\r\n                            scope.$watch(\r\n                                attrs.treeData, function (val) {\r\n                                    scope.treeData = val;\r\n                                }, true\r\n                            );\r\n                        }\r\n\r\n                        scope.$watch(\r\n                            'treeData', function (val) {\r\n                                reload_data(val);\r\n                            }, true\r\n                        );\r\n\r\n                        scope.reload_data = reload_data;\r\n\r\n                        if (attrs.enableDrag) {\r\n                            _fnInitDrag = $TreeDnDPlugin('$TreeDnDDrag');\r\n                            if (angular.isFunction(_fnInitDrag)) {\r\n                                _fnInitDrag(scope, element, $window, $document);\r\n                            }\r\n                        }\r\n\r\n                        // apply Template\r\n                        scope.$safeApply(\r\n                            function () {\r\n                                if ($_Template.length > 0) {\r\n                                    element.append($compile($_Template)(scope));\r\n                                } else {\r\n                                    $http.get(\r\n                                        attrs.templateUrl || $TreeDnDTemplate.getPath(),\r\n                                        {cache: $templateCache}\r\n                                    ).success(\r\n                                        function (data) {\r\n                                            element.append($compile(data.trim())(scope));\r\n                                        }\r\n                                    );\r\n                                }\r\n                            }\r\n                        );\r\n                    };\r\n                }\r\n            };\r\n        }]\r\n).factory(\r\n    '$TreeDnDConvert', function () {\r\n        var _$initConvert = {\r\n            line2tree: function (data, primaryKey, parentKey) {\r\n                if (!data || data.length === 0 || !primaryKey || !parentKey) {\r\n                    return [];\r\n                }\r\n                var tree = [],\r\n                    rootIds = [],\r\n                    item = data[0],\r\n                    _primary = item[primaryKey],\r\n                    treeObjs = {},\r\n                    parentId, parent,\r\n                    len = data.length,\r\n                    i = 0;\r\n                while (i < len) {\r\n                    item = data[i++];\r\n                    _primary = item[primaryKey];\r\n                    treeObjs[_primary] = item;\r\n                    parentId = item[parentKey];\r\n                    if (parentId) {\r\n                        parent = treeObjs[parentId];\r\n                        if (parent.__children__) {\r\n                            parent.__children__.push(item);\r\n                        } else {\r\n                            parent.__children__ = [item];\r\n                        }\r\n                    } else {\r\n                        rootIds.push(_primary);\r\n                    }\r\n                }\r\n                len = rootIds.length;\r\n                for (i = 0; i < len; i++) {\r\n                    tree.push(treeObjs[rootIds[i]]);\r\n                }\r\n                return tree;\r\n            },\r\n            tree2tree: function (data, parentKey) {\r\n                var access_child = function (data) {\r\n                    var _tree = [];\r\n                    var _i, _len = data.length, _copy, _child;\r\n                    for (_i = 0; _i < _len; _i++) {\r\n                        _copy = angular.copy(data[_i]);\r\n                        if (angular.isArray(_copy[parentKey]) && _copy[parentKey].length > 0) {\r\n                            _child = access_child(_copy[parentKey]);\r\n                            delete(_copy[parentKey]);\r\n                            _copy.__children__ = _child;\r\n                        }\r\n                        _tree.push(_copy);\r\n                    }\r\n                    return _tree;\r\n                };\r\n\r\n                return access_child(data);\r\n            }\r\n        }\r\n\r\n        return _$initConvert;\r\n    }\r\n).factory(\r\n    '$TreeDnDHelper', [\r\n        '$document', '$window', function ($document, $window) {\r\n            var _$helper = {\r\n                nodrag:          function (targetElm) {\r\n                    return (typeof targetElm.attr('data-nodrag')) !== \"undefined\";\r\n                },\r\n                eventObj:        function (e) {\r\n                    var obj = e;\r\n                    if (e.targetTouches !== undefined) {\r\n                        obj = e.targetTouches.item(0);\r\n                    } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\r\n                        obj = e.originalEvent.targetTouches.item(0);\r\n                    }\r\n                    return obj;\r\n                },\r\n                dragInfo:        function (scope) {\r\n                    var _node = scope.getData(),\r\n                        _tree = scope.getScopeTree(),\r\n                        _parent = scope.getNode(_node.__parent_real__);\r\n                    return {\r\n                        node:    _node,\r\n                        parent:  _parent,\r\n                        move:    {\r\n                            parent: _parent,\r\n                            pos:    _node.__index__\r\n                        },\r\n                        scope:   scope,\r\n                        target:  _tree,\r\n                        drag:    _tree,\r\n                        drop:    scope.getPrevSibling(_node),\r\n                        changed: false\r\n                    };\r\n                },\r\n                height:          function (element) {\r\n                    return element.prop('scrollHeight');\r\n                },\r\n                width:           function (element) {\r\n                    return element.prop('scrollWidth');\r\n                },\r\n                offset:          function (element) {\r\n                    var boundingClientRect = element[0].getBoundingClientRect();\r\n                    return {\r\n                        width:  element.prop('offsetWidth'),\r\n                        height: element.prop('offsetHeight'),\r\n                        top:    boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\r\n                        left:   boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\r\n                    };\r\n                },\r\n                positionStarted: function (e, target) {\r\n                    var pos = {};\r\n                    pos.offsetX = e.pageX - this.offset(target).left;\r\n                    pos.offsetY = e.pageY - this.offset(target).top;\r\n                    pos.startX = pos.lastX = e.pageX;\r\n                    pos.startY = pos.lastY = e.pageY;\r\n                    pos.nowX = pos.nowY = pos.distX = pos.distY = pos.dirAx = 0;\r\n                    pos.dirX = pos.dirY = pos.lastDirX = pos.lastDirY = pos.distAxX = pos.distAxY = 0;\r\n                    return pos;\r\n                },\r\n                positionMoved:   function (e, pos, firstMoving) {\r\n                    // mouse position last events\r\n                    pos.lastX = pos.nowX;\r\n                    pos.lastY = pos.nowY;\r\n                    // mouse position this events\r\n                    pos.nowX = e.pageX;\r\n                    pos.nowY = e.pageY;\r\n                    // distance mouse moved between events\r\n                    pos.distX = pos.nowX - pos.lastX;\r\n                    pos.distY = pos.nowY - pos.lastY;\r\n                    // direction mouse was moving\r\n                    pos.lastDirX = pos.dirX;\r\n                    pos.lastDirY = pos.dirY;\r\n                    // direction mouse is now moving (on both axis)\r\n                    pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\r\n                    pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\r\n                    // axis mouse is now moving on\r\n                    var newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\r\n                    // do nothing on first move\r\n                    if (firstMoving) {\r\n                        pos.dirAx = newAx;\r\n                        pos.moving = true;\r\n                        return;\r\n                    }\r\n                    // calc distance moved on this axis (and direction)\r\n                    if (pos.dirAx !== newAx) {\r\n                        pos.distAxX = 0;\r\n                        pos.distAxY = 0;\r\n                    } else {\r\n                        pos.distAxX += Math.abs(pos.distX);\r\n                        if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\r\n                            pos.distAxX = 0;\r\n                        }\r\n                        pos.distAxY += Math.abs(pos.distY);\r\n                        if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\r\n                            pos.distAxY = 0;\r\n                        }\r\n                    }\r\n                    pos.dirAx = newAx;\r\n                },\r\n                replaceIndent:   function (scope, element, indent, attr) {\r\n                    attr = attr ? attr : 'left';\r\n                    angular.element(element.children()[0]).css(attr, scope.$callbacks.calsIndent(indent));\r\n                }\r\n            };\r\n            return _$helper;\r\n        }]\r\n).factory(\r\n    '$TreeDnDPlugin',['$injector', function ($injector) {\r\n        var _fnget = function (name) {\r\n                if (angular.isDefined($injector) && $injector.has(name)) {\r\n                    return $injector.get(name);\r\n                }\r\n                return null;\r\n            };\r\n        return _fnget;\r\n    }]\r\n).factory(\r\n    '$TreeDnDTemplate', [\r\n        '$templateCache', function ($templateCache) {\r\n            var templatePath = 'template/TreeDnD/TreeDnD.html',\r\n                copyPath = 'template/TreeDnD/TreeDnDStatusCopy.html',\r\n                movePath = 'template/TreeDnD/TreeDnDStatusMove.html',\r\n                scopes = {},\r\n                temp,\r\n                _$init = {\r\n                    setMove: function (path, scope) {\r\n                        if (!scopes[scope.$id]) {\r\n                            scopes[scope.$id] = {};\r\n                        }\r\n                        scopes[scope.$id].movePath = path;\r\n                    },\r\n                    setCopy: function (path, scope) {\r\n                        if (!scopes[scope.$id]) {\r\n                            scopes[scope.$id] = {};\r\n                        }\r\n                        scopes[scope.$id].copyPath = path;\r\n                    },\r\n                    getPath: function () {\r\n                        return templatePath;\r\n                    },\r\n                    getCopy: function (scope) {\r\n                        if (scopes[scope.$id] && scopes[scope.$id].copyPath) {\r\n                            temp = $templateCache.get(scopes[scope.$id].copyPath);\r\n                            if (temp) {\r\n                                return temp;\r\n                            }\r\n                        }\r\n                        return $templateCache.get(copyPath);\r\n                    },\r\n                    getMove: function (scope) {\r\n                        if (scopes[scope.$id] && scopes[scope.$id].movePath) {\r\n                            temp = $templateCache.get(scopes[scope.$id].movePath);\r\n                            if (temp) {\r\n                                return temp;\r\n                            }\r\n                        }\r\n                        return $templateCache.get(movePath);\r\n                    }\r\n                };\r\n\r\n            return _$init;\r\n        }]\r\n).factory(\r\n    '$TreeDnDFilter', [\r\n        '$filter', function ($filter) {\r\n            var _iF, _lenF, _keysF,\r\n                _filter,\r\n                _state,\r\n                for_all_descendants = function for_all_descendants(options, node, fieldChild, fnBefore, fnAfter, parentPassed) {\r\n                    if (!angular.isFunction(fnBefore)) {\r\n                        return null;\r\n                    }\r\n\r\n                    var _i, _len, _nodes,\r\n                        _nodePassed = fnBefore(options, node),\r\n                        _childPassed = false;\r\n\r\n                    if (angular.isDefined(node[fieldChild])) {\r\n                        _nodes = node[fieldChild];\r\n                        _len = _nodes.length;\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            _childPassed = for_all_descendants(\r\n                                options,\r\n                                _nodes[_i],\r\n                                fieldChild,\r\n                                fnBefore,\r\n                                fnAfter,\r\n                                _nodePassed || parentPassed\r\n                            ) || _childPassed;\r\n                        }\r\n                    }\r\n\r\n                    if (angular.isFunction(fnAfter)) {\r\n                        fnAfter(options, node, _nodePassed === true, _childPassed === true, parentPassed === true);\r\n                    }\r\n\r\n                    return _nodePassed || _childPassed;\r\n                },\r\n                // Check data by filter\r\n                _fnCheck = function _fnCheck(callback, check) {\r\n                    if (angular.isUndefinedOrNull(check) || angular.isArray(check)) {\r\n                        return null;\r\n                    }\r\n\r\n                    if (angular.isFunction(callback)) {\r\n                        return callback(check, $filter);\r\n                    } else {\r\n                        if (typeof callback === 'boolean') {\r\n                            check = !!check;\r\n                            return check === callback;\r\n                        } else if (angular.isDefined(callback)) {\r\n                            try {\r\n                                var _regex = new RegExp(callback);\r\n                                return _regex.test(check);\r\n                            }\r\n                            catch (err) {\r\n                                if (typeof check === 'string') {\r\n                                    return check.indexOf(callback) > -1;\r\n                                } else {\r\n                                    return null;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            return null;\r\n                        }\r\n                    }\r\n                },\r\n                _fnProccess = function _fnProccess(node, condition, isAnd) {\r\n                    if (angular.isArray(condition)) {\r\n                        return for_each_filter(node, condition, isAnd);\r\n                    } else {\r\n                        var _key = condition.field,\r\n                            _callback = condition.callback,\r\n                            _iO, _keysO, _lenO;\r\n\r\n                        if (_key === '_$') {\r\n                            _keysO = Object.keys(node);\r\n                            _lenO = _keysO.length;\r\n                            for (_iO = 0; _iO < _lenO; _iO++) {\r\n                                if (_fnCheck(_callback, node[_keysO[_iO]])) {\r\n                                    return true;\r\n                                }\r\n                            }\r\n                        } else if (angular.isDefined(node[_key])) {\r\n                            return _fnCheck(_callback, node[_key]);\r\n                        }\r\n                    }\r\n                },\r\n                for_each_filter = function for_each_filter(node, conditions, isAnd) {\r\n                    var i, len = conditions.length, passed = false;\r\n                    if (len === 0) {\r\n                        return null;\r\n                    }\r\n\r\n                    for (i = 0; i < len; i++) {\r\n                        if (_fnProccess(node, conditions[i], !isAnd)) {\r\n                            passed = true;\r\n                            // if condition `or` then return;\r\n                            if (!isAnd) {\r\n                                return true;\r\n                            }\r\n                        } else {\r\n\r\n                            // if condition `and` and result in fnProccess = false then return;\r\n                            if (isAnd) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return passed;\r\n                },\r\n\r\n                // Will call _fnAfter to clear data no need\r\n                _fnAfter = function _fnAfter(options, node, isNodePassed, isChildPassed, isParentPassed) {\r\n                    if (isNodePassed === true) {\r\n                        node.__filtered__ = true;\r\n                        node.__filtered_visible__ = true;\r\n                        return; //jmp\r\n                    } else if ((isChildPassed === true && options.showParent === true)\r\n                               || (isParentPassed === true && options.showChild === true)) {\r\n                        node.__filtered__ = false;\r\n                        node.__filtered_visible__ = true;\r\n                        return; //jmp\r\n                    }\r\n\r\n                    // remove attr __filtered__\r\n                    delete(node.__filtered__);\r\n                    delete(node.__filtered_visible__);\r\n                },\r\n                _fnBefore = function _fnBefore(options, node) {\r\n                    if (options.filter.length === 0) {\r\n                        return true;\r\n                    } else {\r\n                        return _fnProccess(node, options.filter, options.beginAnd || false);\r\n                    }\r\n                },\r\n                _fnConvert = function _fnConvert(filters) {\r\n                    // convert filter object to array filter\r\n                    if (angular.isObject(filters) && !angular.isArray(filters)) {\r\n                        _keysF = Object.keys(filters);\r\n                        _lenF = _keysF.length;\r\n                        _filter = [];\r\n\r\n                        if (_lenF > 0) {\r\n                            for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                                if ((typeof filters[_keysF[_iF]]) === 'string' && filters[_keysF[_iF]].length === 0) {\r\n                                    continue;\r\n                                } else if (angular.isArray(filters[_keysF[_iF]])) {\r\n                                    _state = filters[_keysF[_iF]];\r\n                                } else if (angular.isObject(filters[_keysF[_iF]])) {\r\n                                    _state = _fnConvert(filters[_keysF[_iF]]);\r\n                                } else {\r\n                                    _state = {\r\n                                        field:    _keysF[_iF],\r\n                                        callback: filters[_keysF[_iF]]\r\n                                    };\r\n                                }\r\n                                _filter.push(_state);\r\n                            }\r\n                        }\r\n                        _state = null;\r\n                        return _filter;\r\n                    }\r\n                    else {\r\n                        return filters;\r\n                    }\r\n                },\r\n                _fnMain = function _fnMain(treeData, filters, _options) {\r\n                    if (!angular.isArray(treeData)\r\n                        || treeData.length === 0\r\n                        || !(angular.isArray(filters) || angular.isObject(filters))\r\n                        || filters.length === 0) {\r\n                        return treeData;\r\n                    }\r\n\r\n                    var _i, _len,\r\n                        _filter;\r\n\r\n                    _filter = _fnConvert(filters);\r\n                    if (!(angular.isArray(_filter) || angular.isObject(_filter))\r\n                        || _filter.length === 0) {\r\n                        return treeData;\r\n                    }\r\n                    _options.filter = _filter;\r\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                        for_all_descendants(\r\n                            _options,\r\n                            treeData[_i],\r\n                            '__children__',\r\n                            _fnBefore, _fnAfter\r\n                        );\r\n                    }\r\n\r\n                    return treeData;\r\n                };\r\n\r\n            return _fnMain;\r\n        }]\r\n).factory(\r\n    '$TreeDnDOrderBy', [\r\n        '$filter', function ($filter) {\r\n            var _fnOrderBy = $filter('orderBy'),\r\n                for_all_descendants = function for_all_descendants(options, node, name, fnOrderBy) {\r\n                    var _i, _len, _nodes;\r\n\r\n                    if (angular.isDefined(node[name])) {\r\n                        _nodes = node[name];\r\n                        _len = _nodes.length;\r\n                        // OrderBy children\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            _nodes[_i] = for_all_descendants(options, _nodes[_i], name, fnOrderBy);\r\n                        }\r\n\r\n                        node[name] = fnOrderBy(node[name], options);\r\n                    }\r\n                    return node;\r\n                },\r\n                _fnOrder = function _fnOrder(list, orderBy) {\r\n                    return _fnOrderBy(list, orderBy);\r\n                },\r\n                _fnMain = function _fnMain(treeData, orderBy) {\r\n                    if (!angular.isArray(treeData)\r\n                        || treeData.length === 0\r\n                        || !(angular.isArray(orderBy) || angular.isObject(orderBy) || angular.isString(orderBy) || angular.isFunction(orderBy))\r\n                        || (orderBy.length === 0 && !angular.isFunction(orderBy))) {\r\n                        return treeData;\r\n                    }\r\n\r\n                    var _i, _len,\r\n                        _iF, _lenF, _keysF;\r\n\r\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                        treeData[_i] = for_all_descendants(\r\n                            orderBy,\r\n                            treeData[_i],\r\n                            '__children__',\r\n                            _fnOrder\r\n                        );\r\n                    }\r\n\r\n                    treeData = _fnOrder(treeData, orderBy);\r\n                    return treeData;\r\n                };\r\n\r\n            return _fnMain;\r\n        }]\r\n).factory(\r\n    '$TreeDnDDrag', [\r\n        '$timeout', '$TreeDnDHelper',\r\n        function ($timeout, $TreeDnDHelper) {\r\n            var _fnDragEnd;\r\n            var holderWasShown = false;\r\n            var nodesSelected = [];\r\n            var lastSelectedNode = null;\r\n\r\n            var resetNodesSelected = function () {\r\n                nodesSelected.forEach(function (node) { node.__selected = false; });\r\n                nodesSelected = [];\r\n            };\r\n\r\n            var _offset,\r\n                _fnPlaceHolder = function (e, $params) {\r\n                    if ($params.placeElm) {\r\n                        _offset = $TreeDnDHelper.offset($params.placeElm);\r\n                        if (_offset.top <= e.pageY && e.pageY <= _offset.top + _offset.height &&\r\n                            _offset.left <= e.pageX && e.pageX <= _offset.left + _offset.width\r\n                           ) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                },\r\n                _fnDragStart = function (e, $params) {\r\n                    holderWasShown = false;\r\n\r\n                    if (!$params.hasTouch && (e.button === 2 || e.which === 3)) {\r\n                        // disable right click\r\n                        return;\r\n                    }\r\n                    if (e.uiTreeDragging || (e.originalEvent && e.originalEvent.uiTreeDragging)) { // event has already fired in other scope.\r\n                        return;\r\n                    }\r\n                    // the element which is clicked.\r\n                    var eventElm = angular.element(e.target),\r\n                        eventScope = eventElm.scope();\r\n                    if (!eventScope || !eventScope.$type) {\r\n                        return;\r\n                    }\r\n                    // if (eventScope.$type !== 'TreeDnDNode') { // Check if it is a node or a handle\r\n                    //     return;\r\n                    // }\r\n\r\n                    if (eventScope.$type !== 'TreeDnDNodeHandle') { // If the node has a handle, then it should be clicked by the handle\r\n                        var currentNode = eventScope.$parent.$modelValue;\r\n                        if (eventScope.hasMultiSelect && currentNode && currentNode.parentId !== null) {\r\n                            if (e.ctrlKey) {\r\n                                lastSelectedNode = currentNode;\r\n                                currentNode.__selected = !currentNode.__selected;\r\n                            } else if (e.shiftKey) {\r\n                                var groupNodes = eventScope.$parent.$parent.$parent.$modelValue.__children__;\r\n                                var lastSelectedNodeIdx = (lastSelectedNode && groupNodes.includes(lastSelectedNode)) ? groupNodes.indexOf(lastSelectedNode) : 0;\r\n                                var newSelectedNodeIdx = groupNodes.indexOf(currentNode);\r\n                                var lowerIdx = lastSelectedNodeIdx < newSelectedNodeIdx ? lastSelectedNodeIdx : newSelectedNodeIdx;\r\n                                var higherIdx = lastSelectedNodeIdx > newSelectedNodeIdx ? lastSelectedNodeIdx : newSelectedNodeIdx;\r\n\r\n                                resetNodesSelected();\r\n\r\n                                for (var idx = lowerIdx; idx <= higherIdx; idx++) {\r\n                                    groupNodes[idx].__selected = true;\r\n                                    nodesSelected.push(groupNodes[idx]);\r\n                                }\r\n                            } else {\r\n                                lastSelectedNode = currentNode;\r\n                                resetNodesSelected();\r\n                                currentNode.__selected = true;\r\n                            }\r\n\r\n                            if (nodesSelected.every(function (node) { return node !== currentNode; }) && currentNode.__selected) {\r\n                                nodesSelected.push(currentNode);\r\n                            } else if (nodesSelected.includes(currentNode) && !currentNode.__selected) {\r\n                                nodesSelected.splice(nodesSelected.indexOf(currentNode), 1);\r\n                            }\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    var eventElmTagName = eventElm.prop('tagName').toLowerCase(),\r\n                        dragScope,\r\n                        _$scope = $params.$scope;\r\n                    if (eventElmTagName === 'input'\r\n                        || eventElmTagName === 'textarea'\r\n                        || eventElmTagName === 'button'\r\n                        || eventElmTagName === 'select') { // if it's a input or button, ignore it\r\n                        return;\r\n                    }\r\n                    // check if it or it's parents has a 'data-nodrag' attribute\r\n                    while (eventElm && eventElm[0] && eventElm[0] !== $params.element) {\r\n                        if ($TreeDnDHelper.nodrag(eventElm)) { // if the node mark as `nodrag`, DONOT drag it.\r\n                            return;\r\n                        }\r\n                        eventElm = eventElm.parent();\r\n                    }\r\n\r\n                    e.uiTreeDragging = true; // stop event bubbling\r\n                    if (e.originalEvent) {\r\n                        e.originalEvent.uiTreeDragging = true;\r\n                    }\r\n                    e.preventDefault();\r\n\r\n                    dragScope = eventScope.getScopeNode();\r\n\r\n                    $params.firstMoving = true;\r\n\r\n                    if (!_$scope.$callbacks.beforeDrag(dragScope)) {\r\n                        return;\r\n                    }\r\n\r\n                    var eventObj = $TreeDnDHelper.eventObj(e),\r\n                        tagName = dragScope.$element.prop('tagName').toLowerCase(),\r\n                        isTable = (tagName === 'tr');\r\n\r\n                    $params.dragInfo = $TreeDnDHelper.dragInfo(dragScope);\r\n\r\n                    _$scope.setDragging($params.dragInfo);\r\n\r\n                    $params.pos = $TreeDnDHelper.positionStarted(eventObj, dragScope.$element);\r\n\r\n                    if (isTable) {\r\n                        $params.dragElm = angular.element($params.$window.document.createElement('table'))\r\n                            .addClass(_$scope.$class.tree)\r\n                            .addClass(_$scope.$class.drag)\r\n                            .addClass(_$scope.$tree_class);\r\n                    } else {\r\n                        $params.dragElm = angular.element($params.$window.document.createElement('ul'))\r\n                            .addClass(_$scope.$class.drag)\r\n                            .addClass('tree-dnd-nodes')\r\n                            .addClass(_$scope.$tree_class);\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'width':   $TreeDnDHelper.width(dragScope.$element) + 'px',\r\n                            'z-index': 9995\r\n                        }\r\n                    );\r\n\r\n                    $params.offsetEdge = 0;\r\n                    var _width = $TreeDnDHelper.width(dragScope.$element),\r\n                        _scope = dragScope,\r\n                        _element = _scope.$element,\r\n                        _clone = null,\r\n                        _needCollapse = !!_$scope.enabledCollapse,\r\n                        _copied = false,\r\n                        _tbody = null;\r\n\r\n                    if (isTable) {\r\n                        $params.offsetEdge = $params.dragInfo.node.__level__ - 1;\r\n                        _tbody = angular.element($params.$window.document.createElement('tbody'));\r\n\r\n                        _$scope.for_all_descendants(\r\n                            $params.dragInfo.node, function (_node) {\r\n                                _scope = _$scope.getScope(_node);\r\n                                _element = _scope.$element;\r\n\r\n                                if (!_copied) {\r\n                                    _clone = _element.clone();\r\n\r\n                                    $TreeDnDHelper.replaceIndent(\r\n                                        _scope,\r\n                                        _clone,\r\n                                        _node.__level__ - $params.offsetEdge,\r\n                                        'padding-left'\r\n                                    );\r\n\r\n                                    _tbody.append(_clone);\r\n\r\n                                    // skip all, just clone parent\r\n                                    if (_needCollapse) {\r\n                                        _copied = true;\r\n                                    }\r\n                                }\r\n\r\n                                if (_$scope.enabledMove && _$scope.$class.hidden) {\r\n                                    _element.addClass(_$scope.$class.hidden);\r\n                                }\r\n                            }\r\n                        );\r\n\r\n                        $params.dragElm.append(_tbody);\r\n                    } else {\r\n\r\n                        if (!_needCollapse) {\r\n                            _clone = _element.clone();\r\n                        } else {\r\n                            var _holder = _scope.getElementChilds(),\r\n                                _swaper = angular.element(\"<swaped />\");\r\n\r\n                            // Insert tag `<holder>` & move _holder into tag `<swaper>`;\r\n                            _holder.after(angular.element(\"<holder />\"));\r\n                            _swaper.append(_holder);\r\n\r\n                            // Clone without Children & remove tag `<holder>`\r\n                            _clone = _element.clone();\r\n                            _clone.find(\"holder\").remove();\r\n\r\n                            // bring childs back frome `swaper` & remove tag `<swaper>`\r\n                            _element.find(\"holder\").replaceWith(_holder);\r\n\r\n                            // Reset & clear all;\r\n                            _swaper.remove();\r\n                            _holder = null;\r\n                        }\r\n\r\n                        $params.dragElm.append(_clone);\r\n                        if (_$scope.enabledMove && _$scope.$class.hidden) {\r\n                            _element.addClass(_$scope.$class.hidden);\r\n                        }\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'left': eventObj.pageX - $params.pos.offsetX + _$scope.$callbacks.calsIndent(\r\n                                $params.offsetEdge + 1,\r\n                                true,\r\n                                true\r\n                            )       + 'px',\r\n                            'top':  eventObj.pageY - $params.pos.offsetY + 'px'\r\n                        }\r\n                    );\r\n\r\n                    if (nodesSelected.length > 1) {\r\n                        $params.dragElm.append(angular.element('<div class=\"numBadge\">' + nodesSelected.length + '</div>'));\r\n                    }\r\n\r\n                    // moving item with descendant\r\n                    $params.$document.find('body').append($params.dragElm);\r\n                    if (_$scope.$callbacks.droppable()) {\r\n                        $params.placeElm = _$scope.initPlace(dragScope.$element, $params.dragElm);\r\n\r\n                        if (isTable) {\r\n                            $TreeDnDHelper.replaceIndent(_$scope, $params.placeElm, $params.dragInfo.node.__level__);\r\n                        }\r\n\r\n                        $params.placeElm.css('width', _width);\r\n                    }\r\n\r\n                    _$scope.showPlace();\r\n                    _$scope.targeting = true;\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.refreshStatus();\r\n                        _$scope.setPositionStatus(e);\r\n                    }\r\n\r\n                    angular.element($params.$document).bind('touchend', $params.dragEndEvent);\r\n                    angular.element($params.$document).bind('touchcancel', $params.dragEndEvent);\r\n                    angular.element($params.$document).bind('touchmove', $params.dragMoveEvent);\r\n                    angular.element($params.$document).bind('mouseup', $params.dragEndEvent);\r\n                    angular.element($params.$document).bind('mousemove', $params.dragMoveEvent);\r\n                    angular.element($params.$document).bind('mouseleave', $params.dragCancelEvent);\r\n\r\n                    $params.document_height = Math.max(\r\n                        $params.body.scrollHeight,\r\n                        $params.body.offsetHeight,\r\n                        $params.html.clientHeight,\r\n                        $params.html.scrollHeight,\r\n                        $params.html.offsetHeight\r\n                    );\r\n\r\n                    $params.document_width = Math.max(\r\n                        $params.body.scrollWidth,\r\n                        $params.body.offsetWidth,\r\n                        $params.html.clientWidth,\r\n                        $params.html.scrollWidth,\r\n                        $params.html.offsetWidth\r\n                    );\r\n                },\r\n                _fnDragMove = function (e, $params) {\r\n                    var _$scope = $params.$scope;\r\n                    if (!$params.dragStarted) {\r\n                        if (!$params.dragDelaying) {\r\n                            $params.dragStarted = true;\r\n                            _$scope.$safeApply(\r\n                                function () {\r\n                                    _$scope.$callbacks.dragStart($params.dragInfo);\r\n                                }\r\n                            );\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    if (!$params.dragElm) {\r\n                        return;\r\n                    }\r\n\r\n                    e.preventDefault();\r\n                    if ($params.$window.getSelection) {\r\n                        $params.$window.getSelection().removeAllRanges();\r\n                    } else if ($params.$window.document.selection) {\r\n                        $params.$window.document.selection.empty();\r\n                    }\r\n\r\n                    var eventObj = $TreeDnDHelper.eventObj(e),\r\n                        leftElmPos = eventObj.pageX - $params.pos.offsetX,\r\n                        topElmPos = eventObj.pageY - $params.pos.offsetY;\r\n\r\n                    //dragElm can't leave the screen on the left\r\n                    if (leftElmPos < 0) {\r\n                        leftElmPos = 0;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the top\r\n                    if (topElmPos < 0) {\r\n                        topElmPos = 0;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the bottom\r\n                    if ((topElmPos + 10) > $params.document_height) {\r\n                        topElmPos = $params.document_height - 10;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the right\r\n                    if ((leftElmPos + 10) > $params.document_width) {\r\n                        leftElmPos = $params.document_width - 10;\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'left': leftElmPos + _$scope.$callbacks.calsIndent(\r\n                                $params.offsetEdge + 1,\r\n                                true,\r\n                                true\r\n                            )       + 'px',\r\n                            'top':  topElmPos + 'px'\r\n                        }\r\n                    );\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.setPositionStatus(e);\r\n                    }\r\n\r\n                    var top_scroll = window.pageYOffset || $params.$window.document.documentElement.scrollTop,\r\n                        bottom_scroll = top_scroll + (window.innerHeight || $params.$window.document.clientHeight || $params.$window.document.clientHeight);\r\n                    // to scroll down if cursor y-position is greater than the bottom position the vertical scroll\r\n                    if (bottom_scroll < eventObj.pageY && bottom_scroll <= $params.document_height) {\r\n                        window.scrollBy(0, 10);\r\n                    }\r\n                    // to scroll top if cursor y-position is less than the top position the vertical scroll\r\n                    if (top_scroll > eventObj.pageY) {\r\n                        window.scrollBy(0, -10);\r\n                    }\r\n\r\n                    $TreeDnDHelper.positionMoved(e, $params.pos, $params.firstMoving);\r\n\r\n                    if ($params.firstMoving) {\r\n                        $params.firstMoving = false;\r\n                        return;\r\n                    }\r\n                    // check if add it as a child node first\r\n\r\n                    var targetX = eventObj.pageX - $params.$window.document.body.scrollLeft,\r\n                        targetY = eventObj.pageY - (window.pageYOffset || $params.$window.document.documentElement.scrollTop),\r\n\r\n                        targetElm,\r\n                        targetScope,\r\n                        targetBefore,\r\n                        targetOffset,\r\n                        tagName,\r\n                        isTable,\r\n                        isChanged = true,\r\n                        isVeritcal = true,\r\n                        isEmpty,\r\n                        isSwapped,\r\n                        _scope,\r\n                        _target,\r\n                        _parent,\r\n                        _info = $params.dragInfo,\r\n                        _move = _info.move,\r\n                        _drag = _info.node,\r\n                        _drop = _info.drop,\r\n                        treeScope = _info.target,\r\n                        fnSwapTree,\r\n                        isHolder = _fnPlaceHolder(e, $params);\r\n\r\n                    if (!isHolder) {\r\n                        /* when using elementFromPoint() inside an iframe, you have to call\r\n                             elementFromPoint() twice to make sure IE8 returns the correct value\r\n                             $params.$window.document.elementFromPoint(targetX, targetY);*/\r\n\r\n                        targetElm = angular.element(\r\n                            $params.$window.document.elementFromPoint(\r\n                                targetX,\r\n                                targetY\r\n                            )\r\n                        );\r\n\r\n                        targetScope = targetElm.scope();\r\n                        if (!targetScope) {\r\n                            return;\r\n                        }\r\n\r\n                        fnSwapTree = function () {\r\n                            treeScope = targetScope.getScopeTree();\r\n                            _target = _info.target;\r\n                            if (_info.target !== treeScope) {\r\n                                if (treeScope.$callbacks.droppable()) {\r\n                                    // Replace by place-holder new\r\n                                    _target.hidePlace();\r\n                                    _target.targeting = false;\r\n                                    treeScope.targeting = true;\r\n\r\n                                    _info.target = treeScope;\r\n                                    $params.placeElm = treeScope.initPlace(targetScope.$element, $params.dragElm);\r\n\r\n                                    _target = null;\r\n                                    isSwapped = true;\r\n                                } else {\r\n                                    // Not allowed Drop Item\r\n                                    return false;\r\n                                }\r\n                            }\r\n                            return true;\r\n                        };\r\n\r\n                        var abortDrag = function () {\r\n                            holderWasShown = false;\r\n                            if (_$scope.enabledStatus) {\r\n                                _$scope.hideStatus();\r\n                            }\r\n                            _$scope.$$apply = false;\r\n                            _fnDragEnd(e, $params);\r\n                        };\r\n\r\n                        if (angular.isFunction(targetScope.getScopeNode)) {\r\n                            targetScope = targetScope.getScopeNode();\r\n\r\n                            if (!fnSwapTree()) {\r\n                                return;\r\n                            }\r\n                        } else {\r\n                            if (holderWasShown) {\r\n                                setTimeout(function () {\r\n                                    // setTimeout is necessary because otherwise the placeholder will not be deleted in some cases\r\n                                    // see: https://stackoverflow.com/questions/779379/why-is-settimeoutfn-0-sometimes-useful\r\n                                    treeScope.placeElm.remove();\r\n                                    abortDrag();\r\n                                }, 0);\r\n                                return;\r\n                            }\r\n\r\n                            if (targetScope.$type === 'TreeDnDNodes' || targetScope.$type === 'TreeDnD') {\r\n                                if (targetScope.tree_nodes) {\r\n                                    if (targetScope.tree_nodes.length === 0) {\r\n                                        if (!fnSwapTree()) {\r\n                                            return;\r\n                                        }\r\n                                        // Empty\r\n                                        isEmpty = true;\r\n                                    }\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            } else {\r\n                                return;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        holderWasShown = true;\r\n                    }\r\n\r\n                    if ($params.pos.dirAx && !isSwapped || isHolder) {\r\n                        isVeritcal = false;\r\n                        targetScope = _info.scope;\r\n                    }\r\n\r\n                    if (!targetScope.$element && !targetScope) {\r\n                        return;\r\n                    }\r\n\r\n                    tagName = targetScope.$element.prop('tagName').toLowerCase();\r\n                    isTable = (tagName === 'tbody' || tagName === 'table' || tagName === 'tr' || tagName === 'td');\r\n                    if (isEmpty) {\r\n                        _move.parent = null;\r\n                        _move.pos = 0;\r\n\r\n                        _drop = null;\r\n                    } else {\r\n                        // move vertical\r\n                        if (isVeritcal) {\r\n                            targetElm = targetScope.$element; // Get the element of tree-dnd-node\r\n\r\n                            targetOffset = $TreeDnDHelper.offset(targetElm);\r\n\r\n                            if (targetScope.horizontal && !isTable) {\r\n                                targetBefore = eventObj.pageX < (targetOffset.left + $TreeDnDHelper.width(targetElm) / 2);\r\n                            } else {\r\n                                if (isTable) {\r\n                                    targetBefore = eventObj.pageY < (targetOffset.top + $TreeDnDHelper.height(targetElm) / 2);\r\n                                } else {\r\n                                    var _height = $TreeDnDHelper.height(targetElm);\r\n\r\n                                    if (targetScope.getElementChilds()) {\r\n                                        _height -= -$TreeDnDHelper.height(targetScope.getElementChilds());\r\n                                    }\r\n\r\n                                    if (eventObj.pageY > targetOffset.top + _height) {\r\n                                        return;\r\n                                    }\r\n\r\n                                    targetBefore = eventObj.pageY < (targetOffset.top + _height / 2);\r\n                                }\r\n                            }\r\n\r\n                            if (!angular.isFunction(targetScope.getData)) {\r\n                                return;\r\n                            }\r\n\r\n                            _target = targetScope.getData();\r\n                            _parent = targetScope.getNode(_target.__parent_real__);\r\n\r\n                            if (targetBefore) {\r\n                                var _prev = targetScope.getPrevSibling(_target);\r\n\r\n                                _move.parent = _parent;\r\n                                _move.pos = angular.isDefined(_prev) ? _prev.__index__ + 1 : 0;\r\n\r\n                                _drop = _prev;\r\n                            } else {\r\n                                if (_target.__expanded__ && !(_target.__children__.length === 1 && _target.__index_real__ === _drag.__parent_real__)) {\r\n                                    _move.parent = _target;\r\n                                    _move.pos = 0;\r\n\r\n                                    _drop = null;\r\n                                } else {\r\n                                    _move.parent = _parent;\r\n                                    _move.pos = _target.__index__ + 1;\r\n\r\n                                    _drop = _target;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            // move horizontal\r\n                            if ($params.pos.dirAx && $params.pos.distAxX >= treeScope.dragBorder) {\r\n                                $params.pos.distAxX = 0;\r\n                                // increase horizontal level if previous sibling exists and is not collapsed\r\n                                if ($params.pos.distX > 0) {\r\n                                    _parent = _drop;\r\n                                    if (!_parent) {\r\n                                        if (_move.pos - 1 >= 0) {\r\n                                            _parent = _move.parent.__children__[_move.pos - 1];\r\n                                        } else {\r\n                                            return;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (_info.drag === _info.target && _parent === _drag && _$scope.enabledMove) {\r\n                                        _parent = treeScope.getPrevSibling(_parent);\r\n                                    }\r\n\r\n                                    if (_parent && _parent.__visible__) {\r\n                                        var _len = _parent.__children__.length;\r\n\r\n                                        _move.parent = _parent;\r\n                                        _move.pos = _len;\r\n\r\n                                        if (_len > 0) {\r\n                                            _drop = _parent.__children__[_len - 1];\r\n                                        } else {\r\n                                            _drop = null;\r\n                                        }\r\n                                    } else {\r\n                                        // Not changed\r\n                                        return;\r\n                                    }\r\n                                } else if ($params.pos.distX < 0) {\r\n                                    _target = _move.parent;\r\n                                    if (_target &&\r\n                                        (_target.__children__.length === 0 ||\r\n                                         _target.__children__.length - 1 < _move.pos ||\r\n                                         (_info.drag === _info.target &&\r\n                                          _target.__index_real__ === _drag.__parent_real__ &&\r\n                                          _target.__children__.length - 1 === _drag.__index__ && _$scope.enabledMove))\r\n                                       ) {\r\n                                        _parent = treeScope.getNode(_target.__parent_real__);\r\n\r\n                                        _move.parent = _parent;\r\n                                        _move.pos = _target.__index__ + 1;\r\n\r\n                                        _drop = _target;\r\n                                    } else {\r\n                                        // Not changed\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            } else {\r\n                                // limited\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (_info.drag === _info.target &&\r\n                        _move.parent &&\r\n                        _drag.__parent_real__ === _move.parent.__index_real__ &&\r\n                        _drag.__index__ === _move.pos\r\n                       ) {\r\n                        isChanged = false;\r\n                    }\r\n\r\n                    if (treeScope.$callbacks.accept(_info, _move, isChanged)) {\r\n                        _info.move = _move;\r\n                        _info.drop = _drop;\r\n                        _info.changed = isChanged;\r\n                        _info.scope = targetScope;\r\n\r\n                        if (isTable) {\r\n                            $TreeDnDHelper.replaceIndent(\r\n                                treeScope,\r\n                                $params.placeElm,\r\n                                angular.isUndefinedOrNull(_move.parent) ? 1 : _move.parent.__level__ + 1\r\n                            );\r\n\r\n                            if (_drop) {\r\n                                _parent = (_move.parent ? _move.parent.__children__ : null ) || _info.target.treeData;\r\n\r\n                                if (_drop.__index__ < _parent.length - 1) {\r\n                                    // Find fast\r\n                                    _drop = _parent[_drop.__index__ + 1];\r\n                                    _scope = _info.target.getScope(_drop);\r\n                                    _scope.$element[0].parentNode.insertBefore(\r\n                                        $params.placeElm[0],\r\n                                        _scope.$element[0]\r\n                                    );\r\n                                } else {\r\n                                    _target = _info.target.getLastDescendant(_drop);\r\n                                    _scope = _info.target.getScope(_target);\r\n                                    _scope.$element.after($params.placeElm);\r\n                                }\r\n                            } else {\r\n                                _scope = _info.target.getScope(_move.parent);\r\n                                if (_scope) {\r\n                                    if (_move.parent) {\r\n                                        _scope.$element.after($params.placeElm);\r\n\r\n                                    } else {\r\n                                        _scope.getElementChilds().prepend($params.placeElm);\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else {\r\n                            _scope = _info.target.getScope(_drop || _move.parent);\r\n\r\n                            if (_drop) {\r\n                                _scope.$element.after($params.placeElm);\r\n                            } else {\r\n                                _scope.getElementChilds().prepend($params.placeElm);\r\n                            }\r\n                        }\r\n\r\n                        treeScope.showPlace();\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragMove(_info);\r\n                            }\r\n                        );\r\n                    }\r\n                },\r\n                _fnDragEnd = function (e, $params) {\r\n                    holderWasShown = false;\r\n\r\n                    e.preventDefault();\r\n                    if ($params.dragElm) {\r\n                        var _passed = false,\r\n                            _$scope = $params.$scope,\r\n                            _scope = _$scope.getScope($params.dragInfo.node),\r\n                            tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                            _isTable = (tagName === 'tr'),\r\n                            _element = _scope.$element;\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _passed = _$scope.$callbacks.beforeDrop($params.dragInfo);\r\n                            }\r\n                        );\r\n\r\n                        // rollback all\r\n                        if (_isTable) {\r\n                            _$scope.for_all_descendants(\r\n                                $params.dragInfo.node, function (_node) {\r\n                                    _scope = _$scope.getScope(_node);\r\n                                    _element = _scope.$element;\r\n\r\n                                    if (_scope.$class.hidden) {\r\n                                        _element.removeClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                            );\r\n                        } else {\r\n                            if (_$scope.$class.hidden) {\r\n                                _element.removeClass(_$scope.$class.hidden);\r\n                            }\r\n                        }\r\n\r\n                        $params.dragElm.remove();\r\n                        $params.dragElm = null;\r\n\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.hideStatus();\r\n                        }\r\n\r\n                        var _status = false;\r\n                        if (_$scope.$$apply) {\r\n                            _$scope.$safeApply(\r\n                                function () {\r\n                                    $params.dragInfo.__multipleNodes = nodesSelected;\r\n                                    resetNodesSelected();\r\n\r\n                                    _status = _$scope.$callbacks.dropped(\r\n                                        $params.dragInfo,\r\n                                        _passed,\r\n                                        _$scope.enabledMove\r\n                                    );\r\n                                }\r\n                            );\r\n                        } else {\r\n                            _fnBindDrag($params);\r\n                        }\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragStop($params.dragInfo, _status);\r\n                            }\r\n                        );\r\n\r\n                        $params.dragInfo.target.hidePlace();\r\n                        $params.dragInfo.target.targeting = false;\r\n\r\n                        $params.dragInfo = null;\r\n                        _$scope.$$apply = false;\r\n                        _$scope.setDragging(null);\r\n                    }\r\n\r\n                    angular.element($params.$document).unbind('touchend', $params.dragEndEvent); // Mobile\r\n                    angular.element($params.$document).unbind('touchcancel', $params.dragEndEvent); // Mobile\r\n                    angular.element($params.$document).unbind('touchmove', $params.dragMoveEvent); // Mobile\r\n                    angular.element($params.$document).unbind('mouseup', $params.dragEndEvent);\r\n                    angular.element($params.$document).unbind('mousemove', $params.dragMoveEvent);\r\n                    angular.element($params.$window.document.body).unbind('mouseleave', $params.dragCancelEvent);\r\n                },\r\n                _fnDragStartEvent = function (e, $params) {\r\n                    if ($params.$scope.$callbacks.draggable()) {\r\n                        _fnDragStart(e, $params);\r\n                    }\r\n                },\r\n                _fnBindDrag = function ($params) {\r\n                    $params.element.bind(\r\n                        'touchstart mousedown', function (e) {\r\n                            $params.dragDelaying = true;\r\n                            $params.dragStarted = false;\r\n                            _fnDragStartEvent(e, $params);\r\n                            $params.dragTimer = $timeout(\r\n                                function () {\r\n                                    $params.dragDelaying = false;\r\n                                }, $params.$scope.dragDelay\r\n                            );\r\n                        }\r\n                    );\r\n                    $params.element.bind(\r\n                        'touchend touchcancel mouseup', function () {\r\n                            $timeout.cancel($params.dragTimer);\r\n                        }\r\n                    );\r\n                },\r\n                _fnKeydownHandler = function (e, $params) {\r\n                    var _$scope = $params.$scope;\r\n                    if (e.keyCode === 27) {\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.hideStatus();\r\n                        }\r\n\r\n                        _$scope.$$apply = false;\r\n                        _fnDragEnd(e, $params);\r\n                    } else {\r\n                        if (_$scope.enabledHotkey && e.shiftKey) {\r\n                            _$scope.enableMove(true);\r\n                            if (_$scope.enabledStatus) {\r\n                                _$scope.refreshStatus();\r\n                            }\r\n\r\n                            if (!$params.dragInfo) {\r\n                                return;\r\n                            }\r\n\r\n                            var _scope = _$scope.getScope($params.dragInfo.node),\r\n                                tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                                _element = _scope.$element;\r\n\r\n                            if (tagName === 'tr') {\r\n                                _$scope.for_all_descendants(\r\n                                    $params.dragInfo.node, function (_node) {\r\n                                        _scope = _$scope.getScope(_node);\r\n                                        _element = _scope.$element;\r\n\r\n                                        if (_$scope.$class.hidden) {\r\n                                            _element.addClass(_$scope.$class.hidden);\r\n                                        }\r\n                                    }\r\n                                );\r\n                            } else {\r\n                                if (_$scope.$class.hidden) {\r\n                                    _element.addClass(_$scope.$class.hidden);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                _fnKeyupHandler = function (e, $params) {\r\n                    var _$scope = $params.$scope;\r\n                    if (_$scope.enabledHotkey && !e.shiftKey) {\r\n                        _$scope.enableMove(false);\r\n\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.refreshStatus();\r\n                        }\r\n\r\n                        if (!$params.dragInfo) {\r\n                            return;\r\n                        }\r\n\r\n                        var _scope = _$scope.getScope($params.dragInfo.node),\r\n                            tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                            _element = _scope.$element;\r\n\r\n                        if (tagName === 'tr') {\r\n                            _$scope.for_all_descendants(\r\n                                $params.dragInfo.node, function (_node) {\r\n\r\n                                    _scope = _$scope.getScope(_node);\r\n                                    _element = _scope.$element;\r\n\r\n                                    if (_$scope.$class.hidden) {\r\n                                        _element.removeClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                            );\r\n                        } else {\r\n                            if (_$scope.$class.hidden) {\r\n                                _element.removeClass(_$scope.$class.hidden);\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n\r\n                _$init = function (scope, element, $window, $document) {\r\n                    var $params = {\r\n                        hasTouch:        ('ontouchstart' in window),\r\n                        firstMoving:     null,\r\n                        dragInfo:        null,\r\n                        pos:             null,\r\n                        placeElm:        null,\r\n                        dragElm:         null,\r\n                        dragDelaying:    true,\r\n                        dragStarted:     false,\r\n                        dragTimer:       null,\r\n                        body:            document.body,\r\n                        html:            document.documentElement,\r\n                        document_height: null,\r\n                        document_width:  null,\r\n                        offsetEdge:      null,\r\n                        $scope:          scope,\r\n                        $window:         $window,\r\n                        $document:       $document,\r\n                        element:         element,\r\n                        bindDrag:        function () {\r\n                            _fnBindDrag($params);\r\n                        },\r\n                        dragEnd:         function (e) {\r\n                            _fnDragEnd(e, $params);\r\n                        },\r\n                        dragMoveEvent:   function (e) {\r\n                            _fnDragMove(e, $params)\r\n                        },\r\n                        dragEndEvent:    function (e) {\r\n                            scope.$$apply = true;\r\n                            _fnDragEnd(e, $params);\r\n                        },\r\n                        dragCancelEvent: function (e) {\r\n                            _fnDragEnd(e, $params);\r\n                        }\r\n                    },\r\n                        keydownHandler = function (e) {\r\n                            return _fnKeydownHandler(e, $params);\r\n                        },\r\n                        keyupHandler = function (e) {\r\n                            return _fnKeyupHandler(e, $params);\r\n                        };\r\n\r\n                    scope.dragEnd = function (e) {\r\n                        $params.dragEnd(e);\r\n                    };\r\n\r\n                    $params.bindDrag();\r\n\r\n                    angular.element($window.document.body).bind(\"keydown\", keydownHandler);\r\n                    angular.element($window.document.body).bind(\"keyup\", keyupHandler);\r\n                    //unbind handler that retains scope\r\n                    scope.$on(\r\n                        '$destroy', function () {\r\n                            angular.element($window.document.body).unbind(\"keydown\", keydownHandler);\r\n                            angular.element($window.document.body).unbind(\"keyup\", keyupHandler);\r\n                            if (scope.statusElm) {\r\n                                scope.statusElm.remove();\r\n                            }\r\n\r\n                            if (scope.placeElm) {\r\n                                scope.placeElm.remove();\r\n                            }\r\n                        }\r\n                    );\r\n                };\r\n\r\n            return _$init;\r\n        }\r\n    ]\r\n).factory(\r\n    '$TreeDnDControl', function () {\r\n        var _target, _parent,\r\n            i, len,\r\n            fnSetCollapse = function fnSetCollapse(node) {\r\n                node.__expanded__ = false;\r\n            },\r\n            fnSetExpand = function fnSetExpand(node) {\r\n                node.__expanded__ = true;\r\n            },\r\n\r\n            _$init = function _$init(scope) {\r\n                var n, tree = {\r\n                    selected_node:                     null,\r\n                    for_all_descendants:               scope.for_all_descendants,\r\n                    select_node:                       function (node) {\r\n                        if (!node) {\r\n                            if (tree.selected_node) {\r\n                                delete(tree.selected_node.__selected__);\r\n                            }\r\n                            tree.selected_node = null;\r\n                            return null;\r\n                        }\r\n\r\n                        if (node !== tree.selected_node) {\r\n                            if (tree.selected_node) {\r\n                                delete(tree.selected_node.__selected__);\r\n                            }\r\n                            node.__selected__ = true;\r\n                            tree.selected_node = node;\r\n                            tree.expand_all_parents(node);\r\n                            if (angular.isFunction(tree.on_select)) {\r\n                                tree.on_select(node);\r\n                            }\r\n                        }\r\n                        return node;\r\n                    },\r\n                    deselect_node:                     function () {\r\n                        _target = null;\r\n                        if (tree.selected_node) {\r\n                            delete(tree.selected_node.__selected__);\r\n                            _target = tree.selected_node;\r\n                            tree.selected_node = null;\r\n                        }\r\n                        return _target;\r\n                    },\r\n                    get_parent:                        function (node) {\r\n                        if (node && node.__parent_real__ !== null) {\r\n                            return scope.tree_nodes[node.__parent_real__];\r\n                        }\r\n                        return null;\r\n                    },\r\n                    for_all_ancestors:                 function (child, fn) {\r\n                        _parent = tree.get_parent(child);\r\n                        if (_parent) {\r\n                            if (fn(_parent)) {\r\n                                return false;\r\n                            }\r\n\r\n                            return tree.for_all_ancestors(_parent, fn);\r\n                        }\r\n                        return true;\r\n                    },\r\n                    expand_all_parents:                function (child) {\r\n                        return tree.for_all_ancestors(\r\n                            child, fnSetExpand\r\n                        );\r\n                    },\r\n                    reload_data:                       function () {\r\n                        return scope.reload_data();\r\n                    },\r\n                    add_node:                          function (parent, new_node, index) {\r\n                        if (typeof index !== 'number') {\r\n                            if (parent) {\r\n                                parent.__children__.push(new_node);\r\n                                parent.__expanded__ = true;\r\n                            } else {\r\n                                scope.treeData.push(new_node);\r\n                            }\r\n                        } else {\r\n                            if (parent) {\r\n                                parent.__children__.splice(index, 0, new_node);\r\n                                parent.__expanded__ = true;\r\n                            } else {\r\n                                scope.treeData.splice(index, 0, new_node);\r\n                            }\r\n                        }\r\n                        return new_node;\r\n                    },\r\n                    add_node_root:                     function (new_node) {\r\n                        tree.add_node(null, new_node);\r\n                        return new_node;\r\n                    },\r\n                    expand_all:                        function () {\r\n                        len = scope.treeData.length;\r\n                        for (i = 0; i < len; i++) {\r\n                            tree.for_all_descendants(\r\n                                scope.treeData[i], fnSetExpand\r\n                            );\r\n                        }\r\n                    },\r\n                    collapse_all:                      function () {\r\n                        len = scope.treeData.length;\r\n                        for (i = 0; i < len; i++) {\r\n                            tree.for_all_descendants(\r\n                                scope.treeData[i], fnSetCollapse\r\n                            );\r\n                        }\r\n                    },\r\n                    remove_node:                       function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            if (node.__parent_real__ !== null) {\r\n                                _parent = tree.get_parent(node).__children__;\r\n                            } else {\r\n                                _parent = scope.treeData;\r\n                            }\r\n\r\n                            _parent.splice(node.__index__, 1);\r\n\r\n                            if (tree.selected_node === node) {\r\n                                tree.selected_node = null;\r\n                            }\r\n                        }\r\n                    },\r\n                    expand_node:                       function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            node.__expanded__ = true;\r\n                            return node;\r\n                        }\r\n                    },\r\n                    collapse_node:                     function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            node.__expanded__ = false;\r\n                            return node;\r\n                        }\r\n                    },\r\n                    get_selected_node:                 function () {\r\n                        return tree.selected_node;\r\n                    },\r\n                    get_first_node:                    function () {\r\n                        len = scope.treeData.length;\r\n                        if (len > 0) {\r\n                            return scope.treeData[0];\r\n                        }\r\n                        return null;\r\n                    },\r\n                    get_children:                      function (node) {\r\n                        return node.__children__;\r\n                    },\r\n                    get_siblings:                      function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            _parent = tree.get_parent(node);\r\n                            if (_parent) {\r\n                                _target = _parent.__children__;\r\n                            } else {\r\n                                _target = scope.treeData;\r\n                            }\r\n                            return _target;\r\n                        }\r\n                    },\r\n                    get_next_sibling:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            _target = tree.get_siblings(node);\r\n                            n = _target.length;\r\n                            if (node.__index__ < n) {\r\n                                return _target[node.__index__ + 1];\r\n                            }\r\n                        }\r\n                    },\r\n                    get_prev_sibling:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n                        _target = tree.get_siblings(node);\r\n                        if (node.__index__ > 0) {\r\n                            return _target[node.__index__ - 1];\r\n                        }\r\n                    },\r\n                    get_first_child:                   function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            _target = node.__children__;\r\n                            if (_target && _target.length > 0) {\r\n                                return node.__children__[0];\r\n                            }\r\n                        }\r\n                        return null;\r\n                    },\r\n                    get_closest_ancestor_next_sibling: function (node) {\r\n                        node = node || tree.selected_node;\r\n                        _target = tree.get_next_sibling(node);\r\n                        if (_target) {\r\n                            return _target;\r\n                        }\r\n\r\n                        _parent = tree.get_parent(node);\r\n                        return tree.get_closest_ancestor_next_sibling(_parent);\r\n                    },\r\n                    get_next_node:                     function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_first_child(node);\r\n                            if (_target) {\r\n                                return _target;\r\n                            } else {\r\n                                return tree.get_closest_ancestor_next_sibling(node);\r\n                            }\r\n                        }\r\n                    },\r\n                    get_prev_node:                     function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_prev_sibling(node);\r\n                            if (_target) {\r\n                                return tree.get_last_descendant(_target);\r\n                            }\r\n\r\n                            _parent = tree.get_parent(node);\r\n                            return _parent;\r\n                        }\r\n                    },\r\n                    get_last_descendant:               scope.getLastDescendant,\r\n                    select_parent_node:                function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _parent = tree.get_parent(node);\r\n                            if (_parent) {\r\n                                return tree.select_node(_parent);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_first_node:                 function () {\r\n                        return tree.select_node(tree.get_first_node());\r\n                    },\r\n                    select_next_sibling:               function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_next_sibling(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_prev_sibling:               function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_prev_sibling(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_next_node:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_next_node(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_prev_node:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_prev_node(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n                angular.extend(scope.tree, tree);\r\n                return scope.tree;\r\n            };\r\n\r\n        return _$init;\r\n    }\r\n);\n\nangular.module('template/TreeDnD/TreeDnD.html', []).run(\r\n    [\r\n        '$templateCache', function ($templateCache) {\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnD.html',\r\n            [\"<table ng-class=\\\"$tree_class\\\">\",\r\n             \"    <thead>\",\r\n             \"  <tr>\",\r\n             \"     <th ng-class=\\\"expandingProperty.titleClass\\\" ng-style=\\\"expandingProperty.titleStyle\\\">\",\r\n             \"         {{expandingProperty.displayName || expandingProperty.field || expandingProperty}}\",\r\n             \"        <\\/th>\",\r\n             \"        <th ng-repeat=\\\"col in colDefinitions\\\" ng-class=\\\"col.titleClass\\\" ng-style=\\\"col.titleStyle\\\">\",\r\n             \"         {{col.displayName || col.field}}\",\r\n             \"     </th>\",\r\n             \"    </tr>\",\r\n             \"    </thead>\",\r\n             \" <tbody tree-dnd-nodes=\\\"tree_nodes\\\">\",\r\n             \"  <tr tree-dnd-node=\\\"node\\\" ng-repeat=\\\"node in nodes track by node.__hashKey__ \\\" ng-show=\\\"node.__visible__\\\"\",\r\n             \"       ng-click=\\\"onSelect(node)\\\" ng-class=\\\"(node.__selected__ ? ' active':'')\\\">\",\r\n             \"        <td ng-if=\\\"!expandingProperty.template\\\" tree-dnd-node-handle\",\r\n             \"         ng-style=\\\"expandingProperty.cellStyle ? expandingProperty.cellStyle : {'padding-left': $callbacks.calsIndent(node.__level__)}\\\"\",\r\n             \"          ng-class=\\\"expandingProperty.cellClass\\\"\",\r\n             \"            compile=\\\"expandingProperty.cellTemplate\\\">\",\r\n             \"              <a data-nodrag>\",\r\n             \"                  <i ng-class=\\\"$icon_class\\\" ng-click=\\\"toggleExpand(node)\\\"\",\r\n             \"                     class=\\\"tree-icon\\\"></i>\",\r\n             \"              </a>\",\r\n             \"             {{node[expandingProperty.field] || node[expandingProperty]}}\",\r\n             \"       </td>\",\r\n             \"        <td ng-if=\\\"expandingProperty.template\\\" compile=\\\"expandingProperty.template\\\"></td>\",\r\n             \"        <td ng-repeat=\\\"col in colDefinitions\\\" ng-class=\\\"col.cellClass\\\" ng-style=\\\"col.cellStyle\\\"\",\r\n             \"            compile=\\\"col.cellTemplate\\\">\",\r\n             \"            {{node[col.field]}}\",\r\n             \"       </td>\",\r\n             \"    </tr>\",\r\n             \"    </tbody>\",\r\n             \"</table>\"].join('')\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusCopy.html',\r\n            \"<label><i class=\\\"fa fa-copy\\\"></i>&nbsp;<b>Copying</b></label>\"\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusMove.html',\r\n            '<label><i class=\"fa fa-file-text\"></i>&nbsp;<b>Moving</b></label>'\r\n        );\r\n    }]\r\n);\r\n\r\n}).call(window);"]}