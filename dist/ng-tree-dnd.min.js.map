{"version":3,"sources":["ng-tree-dnd.js"],"names":["angular","isUndefinedOrNull","val","isUndefined","isDefined","module","constant","tree","empty","hidden","node","nodes","handle","place","drag","status","icon","1","0","-1","factory","$filter","_iF","_lenF","_keysF","_filter","_state","for_all_descendants","options","fieldChild","fnBefore","fnAfter","parentPassed","isFunction","_i","_len","_nodes","_nodePassed","_childPassed","length","_fnCheck","callback","check","isArray","_regex","RegExp","test","err","indexOf","_fnProccess","condition","isAnd","for_each_filter","_iO","_keysO","_lenO","_key","field","_callback","Object","keys","conditions","i","len","passed","_fnAfter","isNodePassed","isChildPassed","isParentPassed","__filtered__","__filtered_visible__","showParent","showChild","_fnBefore","filter","beginAnd","_fnConvert","filters","isObject","push","_fnMain","treeData","_options","_fnOrderBy","name","fnOrderBy","_fnOrder","list","orderBy","isString","directive","$compile","restrict","link","scope","element","attrs","$watch","compile","new_val","new_elem","html","append","compileReplace","replaceWith","$element","$type","$class","addClass","replace","_enabledDragDrop","dragEnabled","dropEnabled","$modelValue","$icon_class","$node_class","treeDndNode","newValue","oldValue","setScope","__icon__","getScopeNode","getData","getElementChilds","querySelector","$nodes_class","treeDndNodes","$injector","$timeout","$http","$window","$document","$templateCache","$TreeDnDTemplate","$TreeDnDClass","$TreeDnDHelper","$TreeDnDPlugin","controller","$scope","$attrs","indent","indent_plus","indent_unit","$tree_class","primary_key","hasMultiSelect","onlyDeepestDrop","colDefinitions","$globals","tree_nodes","sycning","copy","extend","iconExpand","iconCollapse","iconLeaf","fn","__children__","getLastDescendant","last_child","n","selected_node","onClick","on_click","setTimeout","onSelect","select_node","on_select","passedExpand","_clone","toggleExpand","fnCallback","$callbacks","expand","__expanded__","getHash","__parent__","__uid__","accept","dragInfo","moveTo","isChanged","calsIndent","level","skipUnit","skipEdge","unit","edge","droppable","draggable","beforeDrop","event","changeKey","Math","random","__selected__","clone","_this","this","remove","parent","splice","__index__","add","pos","enableDrag","enableDrop","placeElm","horizontal","dragDelay","enabledMove","statusMove","enabledHotkey","enabledCollapse","statusElm","dragging","beforeDrag","scopeDrag","dragStop","skiped","dropped","info","pass","isMove","changed","_node","_nodeAdd","_move","move","_parent","_parentRemove","_parentAdd","target","dragStart","dragMove","setDragging","enableMove","enableStatus","enabledStatus","hideStatus","refreshStatus","statusElmOld","getMove","getCopy","attr","find","removeClass","setPositionStatus","e","css","left","pageX","top","pageY","z-index","targeting","getPrevSibling","_index","__parent_real__","getNode","index","_hash","getScope","initPlace","dragElm","tagName","isTable","prop","toLowerCase","document","createElement","_len_down","height","parentNode","insertBefore","hidePlace","showPlace","getScopeTree","$safeApply","phase","$root","$$phase","$apply","tElement","tAttrs","$_Template","_element","trim","_fnInitFilter","_fnInitOrderBy","_fnGetControl","_fnInitDrag","w","_curW","_typeW","_nameW","_defaultW","_scopeW","_NotW","_AfterW","_BeforeW","getExpandOn","_firstNode","_keys","expandingProperty","getColDefs","_col_defs","do_f","root","parent_real","visible","_icon","_index_real","_dept","_hashKey","expandLevel","__index_real__","__level__","__visible__","__hashKey__","__dept__","reload_data","oData","_data","_tree_nodes","expandOn","columnDefs","filterOptions","_offset","_max","_min","_deptTotal","abs","_defaultFilterOption","check_exist_attr","existAttr","for_each_attrs","exist","generateWatch","type","nameAttr","valDefault","nameScope","fnNotExist","old","_watches","isHotkey","templateCopy","_url","get","setCopy","templateMove","setMove","treeClass","$tree","colDefs","_passed","enabledFilter","option","primaryKey","indentUnit","optCallbacks","forEach","value","key","lenW","templateUrl","getPath","cache","success","data","_$initConvert","line2tree","parentKey","parentId","rootIds","item","_primary","treeObjs","tree2tree","access_child","_copy","_child","_tree","_$helper","nodrag","targetElm","eventObj","obj","undefined","targetTouches","originalEvent","drop","width","offset","boundingClientRect","getBoundingClientRect","pageYOffset","body","scrollTop","documentElement","pageXOffset","scrollLeft","positionStarted","offsetX","offsetY","startX","lastX","startY","lastY","nowX","nowY","distX","distY","dirAx","dirX","dirY","lastDirX","lastDirY","distAxX","distAxY","positionMoved","firstMoving","newAx","moving","replaceIndent","children","_fnget","has","temp","templatePath","copyPath","movePath","scopes","_$init","path","$id","$rootScope","_fnDragEnd","holderWasShown","nodesSelected","lastSelectedNode","resetNodesSelected","__selected","_fnPlaceHolder","$params","_fnDragStart","hasTouch","button","which","uiTreeDragging","eventElm","eventScope","currentNode","$parent","includes","dragScope","eventElmTagName","_$scope","preventDefault","offsetEdge","_width","_scope","_needCollapse","_copied","_tbody","_holder","_swaper","after","bind","dragEndEvent","dragMoveEvent","dragCancelEvent","document_height","max","scrollHeight","offsetHeight","clientHeight","document_width","scrollWidth","offsetWidth","clientWidth","ctrlKey","shiftKey","groupNodes","lastSelectedNodeIdx","newSelectedNodeIdx","lowerIdx","higherIdx","idx","every","_fnDragMove","dragStarted","dragDelaying","getSelection","removeAllRanges","selection","leftElmPos","topElmPos","top_scroll","window","bottom_scroll","innerHeight","scrollBy","targetScope","targetBefore","targetOffset","isEmpty","isSwapped","_target","fnSwapTree","targetX","targetY","isVeritcal","_info","_drag","_drop","treeScope","isHolder","elementFromPoint","abortDrag","$$apply","_height","_prev","dragBorder","prepend","_isTable","_status","__multipleNodes","_fnBindDrag","unbind","_fnDragStartEvent","dragTimer","cancel","_fnKeydownHandler","keyCode","_fnKeyupHandler","bindDrag","dragEnd","keydownHandler","keyupHandler","$on","fnSetCollapse","fnSetExpand","expand_all_parents","deselect_node","get_parent","for_all_ancestors","child","add_node","new_node","add_node_root","expand_all","collapse_all","remove_node","expand_node","collapse_node","get_selected_node","get_first_node","get_children","get_siblings","get_next_sibling","get_prev_sibling","get_first_child","get_closest_ancestor_next_sibling","get_next_node","get_prev_node","get_last_descendant","select_parent_node","select_first_node","select_next_sibling","select_prev_sibling","select_next_node","select_prev_node","reset_selected_nodes","run","put","join","call"],"mappings":"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","file":"ng-tree-dnd.min.js","sourcesContent":["/**\r\n * The MIT License (MIT)\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to\r\n * deal in the Software without restriction, including without limitation the\r\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\n * sell copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\n * IN THE SOFTWARE.\r\n * @preserve\r\n */\r\n\r\n/**\r\n * Implementing TreeDnD & Event DrapnDrop (allow drag multi tree-table include all type: table, ol, ul)\r\n * Demo: http://thienhung1989.github.io/angular-tree-dnd\r\n * Github: https://github.com/thienhung1989/angular-tree-dnd\r\n * @version 3.2.4\r\n * @preserve\r\n * (c) 2015 Nguyuễn Thiện Hùng - <nguyenthienhung1989@gmail.com>\r\n */\r\n(function () {\r\n    'use strict';\r\n    angular.isUndefinedOrNull = function (val) {\r\n        return angular.isUndefined(val) || val === null;\r\n    }\r\n\r\n    angular.isDefined = function (val) {\r\n        return !(angular.isUndefined(val) || val === null);\r\n    }\r\n\r\n    angular.module('ntt.TreeDnD', ['template/TreeDnD/TreeDnD.html']).constant(\r\n        '$TreeDnDClass', {\r\n            tree:   'tree-dnd',\r\n            empty:  'tree-dnd-empty',\r\n            hidden: 'tree-dnd-hidden',\r\n            node:   'tree-dnd-node',\r\n            nodes:  'tree-dnd-nodes',\r\n            handle: 'tree-dnd-handle',\r\n            place:  'tree-dnd-placeholder',\r\n            drag:   'tree-dnd-drag',\r\n            status: 'tree-dnd-status',\r\n            icon:   {\r\n                '1':  'glyphicon glyphicon-minus',\r\n                '0':  'glyphicon glyphicon-plus',\r\n                '-1': 'glyphicon glyphicon-file'\r\n            }\r\n        }\r\n    ).factory(\r\n    '$TreeDnDFilter', [\r\n        '$filter', function ($filter) {\r\n            var _iF, _lenF, _keysF,\r\n                _filter,\r\n                _state,\r\n                for_all_descendants = function for_all_descendants(options, node, fieldChild, fnBefore, fnAfter, parentPassed) {\r\n                    if (!angular.isFunction(fnBefore)) {\r\n                        return null;\r\n                    }\r\n\r\n                    var _i, _len, _nodes,\r\n                        _nodePassed = fnBefore(options, node),\r\n                        _childPassed = false;\r\n\r\n                    if (angular.isDefined(node[fieldChild])) {\r\n                        _nodes = node[fieldChild];\r\n                        _len = _nodes.length;\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            _childPassed = for_all_descendants(\r\n                                options,\r\n                                _nodes[_i],\r\n                                fieldChild,\r\n                                fnBefore,\r\n                                fnAfter,\r\n                                _nodePassed || parentPassed\r\n                            ) || _childPassed;\r\n                        }\r\n                    }\r\n\r\n                    if (angular.isFunction(fnAfter)) {\r\n                        fnAfter(options, node, _nodePassed === true, _childPassed === true, parentPassed === true);\r\n                    }\r\n\r\n                    return _nodePassed || _childPassed;\r\n                },\r\n                // Check data by filter\r\n                _fnCheck = function _fnCheck(callback, check) {\r\n                    if (angular.isUndefinedOrNull(check) || angular.isArray(check)) {\r\n                        return null;\r\n                    }\r\n\r\n                    if (angular.isFunction(callback)) {\r\n                        return callback(check, $filter);\r\n                    } else {\r\n                        if (typeof callback === 'boolean') {\r\n                            check = !!check;\r\n                            return check === callback;\r\n                        } else if (angular.isDefined(callback)) {\r\n                            try {\r\n                                var _regex = new RegExp(callback);\r\n                                return _regex.test(check);\r\n                            }\r\n                            catch (err) {\r\n                                if (typeof check === 'string') {\r\n                                    return check.indexOf(callback) > -1;\r\n                                } else {\r\n                                    return null;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            return null;\r\n                        }\r\n                    }\r\n                },\r\n                _fnProccess = function _fnProccess(node, condition, isAnd) {\r\n                    if (angular.isArray(condition)) {\r\n                        return for_each_filter(node, condition, isAnd);\r\n                    } else {\r\n                        var _key = condition.field,\r\n                            _callback = condition.callback,\r\n                            _iO, _keysO, _lenO;\r\n\r\n                        if (_key === '_$') {\r\n                            _keysO = Object.keys(node);\r\n                            _lenO = _keysO.length;\r\n                            for (_iO = 0; _iO < _lenO; _iO++) {\r\n                                if (_fnCheck(_callback, node[_keysO[_iO]])) {\r\n                                    return true;\r\n                                }\r\n                            }\r\n                        } else if (angular.isDefined(node[_key])) {\r\n                            return _fnCheck(_callback, node[_key]);\r\n                        }\r\n                    }\r\n                },\r\n                for_each_filter = function for_each_filter(node, conditions, isAnd) {\r\n                    var i, len = conditions.length, passed = false;\r\n                    if (len === 0) {\r\n                        return null;\r\n                    }\r\n\r\n                    for (i = 0; i < len; i++) {\r\n                        if (_fnProccess(node, conditions[i], !isAnd)) {\r\n                            passed = true;\r\n                            // if condition `or` then return;\r\n                            if (!isAnd) {\r\n                                return true;\r\n                            }\r\n                        } else {\r\n\r\n                            // if condition `and` and result in fnProccess = false then return;\r\n                            if (isAnd) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return passed;\r\n                },\r\n\r\n                // Will call _fnAfter to clear data no need\r\n                _fnAfter = function _fnAfter(options, node, isNodePassed, isChildPassed, isParentPassed) {\r\n                    if (isNodePassed === true) {\r\n                        node.__filtered__ = true;\r\n                        node.__filtered_visible__ = true;\r\n                        return; //jmp\r\n                    } else if ((isChildPassed === true && options.showParent === true)\r\n                               || (isParentPassed === true && options.showChild === true)) {\r\n                        node.__filtered__ = false;\r\n                        node.__filtered_visible__ = true;\r\n                        return; //jmp\r\n                    }\r\n\r\n                    // remove attr __filtered__\r\n                    delete(node.__filtered__);\r\n                    delete(node.__filtered_visible__);\r\n                },\r\n                _fnBefore = function _fnBefore(options, node) {\r\n                    if (options.filter.length === 0) {\r\n                        return true;\r\n                    } else {\r\n                        return _fnProccess(node, options.filter, options.beginAnd || false);\r\n                    }\r\n                },\r\n                _fnConvert = function _fnConvert(filters) {\r\n                    // convert filter object to array filter\r\n                    if (angular.isObject(filters) && !angular.isArray(filters)) {\r\n                        _keysF = Object.keys(filters);\r\n                        _lenF = _keysF.length;\r\n                        _filter = [];\r\n\r\n                        if (_lenF > 0) {\r\n                            for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                                if ((typeof filters[_keysF[_iF]]) === 'string' && filters[_keysF[_iF]].length === 0) {\r\n                                    continue;\r\n                                } else if (angular.isArray(filters[_keysF[_iF]])) {\r\n                                    _state = filters[_keysF[_iF]];\r\n                                } else if (angular.isObject(filters[_keysF[_iF]])) {\r\n                                    _state = _fnConvert(filters[_keysF[_iF]]);\r\n                                } else {\r\n                                    _state = {\r\n                                        field:    _keysF[_iF],\r\n                                        callback: filters[_keysF[_iF]]\r\n                                    };\r\n                                }\r\n                                _filter.push(_state);\r\n                            }\r\n                        }\r\n                        _state = null;\r\n                        return _filter;\r\n                    }\r\n                    else {\r\n                        return filters;\r\n                    }\r\n                },\r\n                _fnMain = function _fnMain(treeData, filters, _options) {\r\n                    if (!angular.isArray(treeData)\r\n                        || treeData.length === 0\r\n                        || !(angular.isArray(filters) || angular.isObject(filters))\r\n                        || filters.length === 0) {\r\n                        return treeData;\r\n                    }\r\n\r\n                    var _i, _len,\r\n                        _filter;\r\n\r\n                    _filter = _fnConvert(filters);\r\n                    if (!(angular.isArray(_filter) || angular.isObject(_filter))\r\n                        || _filter.length === 0) {\r\n                        return treeData;\r\n                    }\r\n                    _options.filter = _filter;\r\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                        for_all_descendants(\r\n                            _options,\r\n                            treeData[_i],\r\n                            '__children__',\r\n                            _fnBefore, _fnAfter\r\n                        );\r\n                    }\r\n\r\n                    return treeData;\r\n                };\r\n\r\n            return _fnMain;\r\n        }]\r\n).factory(\r\n    '$TreeDnDOrderBy', [\r\n        '$filter', function ($filter) {\r\n            var _fnOrderBy = $filter('orderBy'),\r\n                for_all_descendants = function for_all_descendants(options, node, name, fnOrderBy) {\r\n                    var _i, _len, _nodes;\r\n\r\n                    if (angular.isDefined(node[name])) {\r\n                        _nodes = node[name];\r\n                        _len = _nodes.length;\r\n                        // OrderBy children\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            _nodes[_i] = for_all_descendants(options, _nodes[_i], name, fnOrderBy);\r\n                        }\r\n\r\n                        node[name] = fnOrderBy(node[name], options);\r\n                    }\r\n                    return node;\r\n                },\r\n                _fnOrder = function _fnOrder(list, orderBy) {\r\n                    return _fnOrderBy(list, orderBy);\r\n                },\r\n                _fnMain = function _fnMain(treeData, orderBy) {\r\n                    if (!angular.isArray(treeData)\r\n                        || treeData.length === 0\r\n                        || !(angular.isArray(orderBy) || angular.isObject(orderBy) || angular.isString(orderBy) || angular.isFunction(orderBy))\r\n                        || (orderBy.length === 0 && !angular.isFunction(orderBy))) {\r\n                        return treeData;\r\n                    }\r\n\r\n                    var _i, _len,\r\n                        _iF, _lenF, _keysF;\r\n\r\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                        treeData[_i] = for_all_descendants(\r\n                            orderBy,\r\n                            treeData[_i],\r\n                            '__children__',\r\n                            _fnOrder\r\n                        );\r\n                    }\r\n\r\n                    treeData = _fnOrder(treeData, orderBy);\r\n                    return treeData;\r\n                };\r\n\r\n            return _fnMain;\r\n        }]\r\n).directive(\r\n    'compile', [\r\n        '$compile', function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compile, function (new_val) {\r\n                            if (new_val) {\r\n                                /*\r\n                                 * Compile creates a linking function\r\n                                 * that can be used with any scope.\r\n                                 */\r\n                                var link = $compile(new_val);\r\n                                /*\r\n                                 * Executing the linking function\r\n                                 * creates a new element.\r\n                                 */\r\n                                var new_elem = link(scope);\r\n                                // Which we can then append to our DOM element.\r\n                                if(angular.isFunction(element.empty)){\r\n                                    element.empty()\r\n                                }else{\r\n                                    element.html('');\r\n                                }\r\n\r\n                                element.append(new_elem)\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n)\r\n    .directive(\r\n    'compileReplace', [\r\n        '$compile', function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compileReplace, function (new_val) {\r\n                            if (new_val) {\r\n                                /*\r\n                                 * Compile creates a linking function\r\n                                 * that can be used with any scope.\r\n                                 */\r\n                                var link = $compile(new_val);\r\n                                /*\r\n                                 * Executing the linking function\r\n                                 * creates a new element.\r\n                                 */\r\n                                var new_elem = link(scope);\r\n\r\n                                element.replaceWith(new_elem)\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n).directive(\r\n    'treeDndNodeHandle', function () {\r\n        return {\r\n            restrict: 'A',\r\n            scope:    true,\r\n            link:     function (scope, element, attrs) {\r\n                scope.$element = element;\r\n                scope.$type = 'TreeDnDNodeHandle';\r\n                if (scope.$class.handle) {\r\n                    element.addClass(scope.$class.handle);\r\n                }\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDndNode', function () {\r\n        return {\r\n            restrict: 'A',\r\n            replace:  true,\r\n            link:     function (scope, element, attrs) {\r\n                var _enabledDragDrop = (typeof scope.dragEnabled === 'boolean' || typeof scope.dropEnabled === 'boolean');\r\n                scope.$modelValue = null;\r\n                scope.$icon_class = '';\r\n                scope.$node_class = '';\r\n\r\n                if (scope.$class.node) {\r\n                    element.addClass(scope.$class.node);\r\n                    scope.$node_class = scope.$class.node;\r\n                }\r\n\r\n                scope.$watch(\r\n                    attrs.treeDndNode, function (newValue, oldValue, scope) {\r\n                        if (_enabledDragDrop) {\r\n                            scope.setScope(scope, newValue);\r\n                        }\r\n                        scope.$modelValue = newValue;\r\n                        scope.$icon_class = scope.$class.icon[newValue.__icon__];\r\n                    }, true\r\n                );\r\n\r\n                if (_enabledDragDrop) {\r\n\r\n                    scope.$element = element;\r\n                    scope.$type = 'TreeDnDNode';\r\n\r\n                    scope.getScopeNode = function () {\r\n                        return scope;\r\n                    };\r\n\r\n                    scope.getData = function () {\r\n                        return scope.$modelValue;\r\n                    };\r\n\r\n                    scope.getElementChilds = function () {\r\n                        return angular.element(element[0].querySelector('[tree-dnd-nodes]'));\r\n                    };\r\n                }\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDndNodes', function () {\r\n        return {\r\n            restrict: 'A',\r\n            replace:  true,\r\n            link:     function (scope, element, attrs) {\r\n                scope.nodes = [];\r\n                scope.$nodes_class = '';\r\n                scope.$type = 'TreeDnDNodes';\r\n                scope.$element = element;\r\n                scope.getScopeNode = null;\r\n\r\n                scope.$watch(\r\n                    attrs.treeDndNodes, function (newValue, oldValue, scope) {\r\n                        scope.nodes = newValue;\r\n                    }, true\r\n                );\r\n\r\n                if (scope.$class.nodes) {\r\n                    element.addClass(scope.$class.nodes);\r\n                    scope.$nodes_class = scope.$class.nodes;\r\n                }\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDnd', [\r\n        '$injector', '$timeout', '$http', '$compile', '$window', '$document', '$templateCache',\r\n        '$TreeDnDTemplate', '$TreeDnDClass', '$TreeDnDHelper', '$TreeDnDPlugin',\r\n        function ($injector, $timeout, $http, $compile, $window, $document, $templateCache,\r\n                  $TreeDnDTemplate, $TreeDnDClass, $TreeDnDHelper, $TreeDnDPlugin) {\r\n            return {\r\n                restrict:   'E',\r\n                scope:      true,\r\n                replace:    true,\r\n                controller: [\r\n                    '$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\r\n                        $scope.indent = 20;\r\n                        $scope.indent_plus = 15;\r\n                        $scope.indent_unit = 'px';\r\n                        $scope.$tree_class = 'table';\r\n                        $scope.primary_key = '__uid__';\r\n                        $scope.hasMultiSelect = $attrs.hasMultiSelect === 'true';\r\n                        $scope.onlyDeepestDrop = $attrs.onlyDeepestDrop === 'true';\r\n\r\n                        $scope.$type = 'TreeDnD';\r\n                        // $scope.enabledFilter = null;\r\n                        $scope.colDefinitions = [];\r\n                        $scope.$globals = {};\r\n                        $scope.$class = {};\r\n\r\n                        $scope.treeData = [];\r\n                        $scope.tree_nodes = [];\r\n\r\n                        $scope.sycning = false;\r\n\r\n                        $scope.$class = angular.copy($TreeDnDClass);\r\n                        angular.extend(\r\n                            $scope.$class.icon, {\r\n                                '1':  $attrs.iconExpand || 'glyphicon glyphicon-minus',\r\n                                '0':  $attrs.iconCollapse || 'glyphicon glyphicon-plus',\r\n                                '-1': $attrs.iconLeaf || 'glyphicon glyphicon-file'\r\n                            }\r\n                        );\r\n\r\n                        $scope.for_all_descendants = function (node, fn) {\r\n                            if (angular.isFunction(fn)) {\r\n                                var _i, _len, _nodes;\r\n\r\n                                if (fn(node)) {\r\n                                    return false;\r\n                                }\r\n                                _nodes = node.__children__;\r\n                                _len = _nodes.length;\r\n                                for (_i = 0; _i < _len; _i++) {\r\n                                    if (!$scope.for_all_descendants(_nodes[_i], fn)) {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                            }\r\n                            return true;\r\n                        };\r\n\r\n                        $scope.getLastDescendant = function (node) {\r\n                            var last_child, n;\r\n                            if (!node) {\r\n                                node = $scope.tree ? $scope.tree.selected_node : false;\r\n                            }\r\n                            if(node === false){\r\n                                return false;\r\n                            }\r\n                            n = node.__children__.length;\r\n                            if (n === 0) {\r\n                                return node;\r\n                            } else {\r\n                                last_child = node.__children__[n - 1];\r\n                                return $scope.getLastDescendant(last_child);\r\n                            }\r\n                        };\r\n\r\n                        $scope.getElementChilds = function () {\r\n                            return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\r\n                        };\r\n\r\n                        $scope.onClick = function (node) {\r\n                            if (angular.isDefined($scope.tree) && angular.isFunction($scope.tree.on_click)) {\r\n                                // We want to detach from Angular's digest cycle so we can\r\n                                // independently measure the time for one cycle.\r\n                                setTimeout(\r\n                                    function () {\r\n                                        $scope.tree.on_click(node);\r\n                                    }, 0\r\n                                );\r\n                            }\r\n                        };\r\n\r\n                        $scope.onSelect = function (node) {\r\n                            if (angular.isDefined($scope.tree)) {\r\n                                if (node !== $scope.tree.selected_node) {\r\n                                    $scope.tree.select_node(node);\r\n                                }\r\n\r\n                                if (angular.isFunction($scope.tree.on_select)) {\r\n                                    setTimeout(\r\n                                        function () {\r\n                                            $scope.tree.on_select(node);\r\n                                        }, 0\r\n                                    );\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        var passedExpand, _clone;\r\n                        $scope.toggleExpand = function (node, fnCallback) {\r\n                            passedExpand = true;\r\n                            if (angular.isFunction(fnCallback) && !fnCallback(node)) {\r\n                                passedExpand = false;\r\n                            } else if (angular.isFunction($scope.$callbacks.expand) && !$scope.$callbacks.expand(node)) {\r\n                                passedExpand = false;\r\n                            }\r\n\r\n                            if (passedExpand) {\r\n                                if (node.__children__.length > 0) {\r\n                                    node.__expanded__ = !node.__expanded__;\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        $scope.getHash = function (node) {\r\n                            if ($scope.primary_key === '__uid__') {\r\n                                return '#' + node.__parent__ + '#' + node.__uid__;\r\n                            } else {\r\n                                return '#' + node.__parent__ + '#' + node[$scope.primary_key];\r\n                            }\r\n                        };\r\n\r\n                        $scope.$callbacks = {\r\n                            for_all_descendants: $scope.for_all_descendants,\r\n                            expand:              function (node) {\r\n                                return true;\r\n                            },\r\n                            accept:              function (dragInfo, moveTo, isChanged) {\r\n                                return $scope.dropEnabled === true;\r\n                            },\r\n                            calsIndent:          function (level, skipUnit, skipEdge) {\r\n                                var unit = 0,\r\n                                    edge = skipEdge ? 0 : $scope.indent_plus;\r\n                                if (!skipUnit) {\r\n                                    unit = $scope.indent_unit ? $scope.indent_unit : 'px';\r\n                                }\r\n\r\n                                if (level - 1 < 1) {\r\n                                    return edge + unit;\r\n                                } else {\r\n                                    return $scope.indent * (level - 1) + edge + unit;\r\n                                }\r\n                            },\r\n                            droppable:           function () {\r\n                                return $scope.dropEnabled === true;\r\n                            },\r\n                            draggable:           function () {\r\n                                return $scope.dragEnabled === true;\r\n                            },\r\n                            beforeDrop:          function (event) {\r\n                                return true;\r\n                            },\r\n                            changeKey:           function (node) {\r\n                                var _key = node.__uid__;\r\n                                node.__uid__ = Math.random();\r\n                                if (node.__selected__) {\r\n                                    delete(node.__selected__);\r\n                                }\r\n\r\n                                if ($scope.primary_key !== '__uid__') {\r\n                                    _key = '' + node[$scope.primary_key];\r\n                                    _key = _key.replace(/_#.+$/g, '') + '_#' + node.__uid__;\r\n\r\n                                    node[$scope.primary_key] = _key;\r\n                                }\r\n                                // delete(node.__hashKey__);\r\n                            },\r\n                            clone:               function (node, _this) {\r\n                                _clone = angular.copy(node);\r\n                                this.for_all_descendants(_clone, this.changeKey);\r\n                                return _clone;\r\n                            },\r\n                            remove:              function (node, parent, _this) {\r\n                                return parent.splice(node.__index__, 1)[0];\r\n                            },\r\n                            add:                 function (node, pos, parent, _this) {\r\n                                if (parent) {\r\n                                    if (parent.length > -1) {\r\n                                        if (pos > -1) {\r\n                                            parent.splice(pos, 0, node);\r\n                                        } else {\r\n                                            // todo If children need load crazy\r\n                                            parent.push(node);\r\n                                        }\r\n                                    } else {\r\n                                        parent.push(node);\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        if ($attrs.enableDrag || $attrs.enableDrop) {\r\n                            $scope.placeElm = null;\r\n                            //                            $scope.dragBorder = 30;\r\n                            $scope.dragEnabled = null;\r\n                            $scope.dropEnabled = null;\r\n                            $scope.horizontal = null;\r\n\r\n                            if ($attrs.enableDrag) {\r\n\r\n                                $scope.dragDelay = 0;\r\n                                $scope.enabledMove = true;\r\n                                $scope.statusMove = true;\r\n                                $scope.enabledHotkey = false;\r\n                                $scope.enabledCollapse = null;\r\n                                $scope.statusElm = null;\r\n                                $scope.dragging = null;\r\n\r\n                                angular.extend(\r\n                                    $scope.$callbacks, {\r\n                                        beforeDrag: function (scopeDrag) {\r\n                                            return true;\r\n                                        },\r\n                                        dragStop:   function (event, skiped) {},\r\n                                        dropped:    function (info, pass, isMove) {\r\n                                            if (!info) {\r\n                                                return null;\r\n                                            }\r\n\r\n                                            if (!info.changed && isMove) {\r\n                                                return false;\r\n                                            }\r\n                                            var _node = info.node,\r\n                                                _nodeAdd = null,\r\n                                                _move = info.move,\r\n                                                _parent = null,\r\n                                                _parentRemove = (info.parent || info.drag.treeData),\r\n                                                _parentAdd = (_move.parent || info.target.treeData);\r\n\r\n                                            if (info.target.$callbacks.accept(info, info.move, info.changed)) {\r\n                                                if (isMove) {\r\n                                                    _parent = _parentRemove;\r\n                                                    if (angular.isDefined(_parent.__children__)) {\r\n                                                        _parent = _parent.__children__;\r\n                                                    }\r\n\r\n                                                    _nodeAdd = info.drag.$callbacks.remove(\r\n                                                        _node,\r\n                                                        _parent,\r\n                                                        info.drag.$callbacks\r\n                                                    );\r\n                                                } else {\r\n                                                    _nodeAdd = info.drag.$callbacks.clone(_node, info.drag.$callbacks);\r\n                                                }\r\n\r\n                                                // if node dragging change index in sample node parent\r\n                                                // and index node decrement\r\n                                                if (isMove &&\r\n                                                    info.drag === info.target &&\r\n                                                    _parentRemove === _parentAdd &&\r\n                                                    _move.pos >= info.node.__index__) {\r\n                                                    _move.pos--;\r\n                                                }\r\n\r\n                                                _parent = _parentAdd;\r\n                                                if (_parent.__children__) {\r\n                                                    _parent = _parent.__children__;\r\n                                                }\r\n\r\n                                                info.target.$callbacks.add(\r\n                                                    _nodeAdd,\r\n                                                    _move.pos,\r\n                                                    _parent,\r\n                                                    info.drag.$callbacks\r\n                                                );\r\n\r\n                                                return true;\r\n                                            }\r\n\r\n                                            return false;\r\n                                        },\r\n                                        dragStart:  function (event) {},\r\n                                        dragMove:   function (event) {}\r\n                                    }\r\n                                );\r\n\r\n                                $scope.setDragging = function (dragInfo) {\r\n                                    $scope.dragging = dragInfo;\r\n                                };\r\n\r\n                                $scope.enableMove = function (val) {\r\n                                    if (typeof val === \"boolean\") {\r\n                                        $scope.enabledMove = val;\r\n                                    } else {\r\n                                        $scope.enabledMove = true;\r\n                                    }\r\n                                };\r\n\r\n                                if ($attrs.enableStatus) {\r\n                                    $scope.enabledStatus = false;\r\n\r\n                                    $scope.hideStatus = function () {\r\n                                        if ($scope.statusElm) {\r\n                                            $scope.statusElm.addClass($scope.$class.hidden);\r\n                                        }\r\n                                    };\r\n\r\n                                    $scope.refreshStatus = function () {\r\n                                        if (!$scope.dragging) {\r\n                                            return;\r\n                                        }\r\n\r\n                                        if ($scope.enabledStatus) {\r\n                                            var statusElmOld = $scope.statusElm;\r\n                                            if ($scope.enabledMove) {\r\n                                                $scope.statusElm = angular.element($TreeDnDTemplate.getMove($scope));\r\n                                            } else {\r\n                                                $scope.statusElm = angular.element($TreeDnDTemplate.getCopy($scope));\r\n                                            }\r\n\r\n                                            if (statusElmOld !== $scope.statusElm) {\r\n                                                if (statusElmOld) {\r\n                                                    $scope.statusElm.attr('class', statusElmOld.attr('class'));\r\n                                                    $scope.statusElm.attr('style', statusElmOld.attr('style'));\r\n                                                    statusElmOld.remove();\r\n                                                }\r\n                                                $document.find('body').append($scope.statusElm);\r\n\r\n                                            }\r\n\r\n                                            $scope.statusElm.removeClass($scope.$class.hidden);\r\n                                        }\r\n                                    };\r\n\r\n                                    $scope.setPositionStatus = function (e) {\r\n                                        if ($scope.statusElm) {\r\n                                            $scope.statusElm.css(\r\n                                                {\r\n                                                    'left':    e.pageX + 10 + 'px',\r\n                                                    'top':     e.pageY + 15 + 'px',\r\n                                                    'z-index': 9999\r\n                                                }\r\n                                            );\r\n                                            $scope.statusElm.addClass($scope.$class.status);\r\n                                        }\r\n                                    };\r\n                                }\r\n                            }\r\n\r\n                            $scope.targeting = false;\r\n\r\n                            $scope.getPrevSibling = function (node) {\r\n                                if (node && node.__index__ > 0) {\r\n                                    var _parent, _index = node.__index__ - 1;\r\n\r\n                                    if (angular.isDefined(node.__parent_real__)) {\r\n                                        _parent = $scope.tree_nodes[node.__parent_real__];\r\n                                        return _parent.__children__[_index];\r\n                                    }\r\n                                    return $scope.treeData[_index];\r\n\r\n                                }\r\n                                return null;\r\n                            };\r\n\r\n                            $scope.getNode = function (index) {\r\n                                if (angular.isUndefinedOrNull(index)) {\r\n                                    return null;\r\n                                }\r\n                                return $scope.tree_nodes[index];\r\n                            };\r\n\r\n                            $scope.setScope = function (scope, node) {\r\n                                var _hash = $scope.getHash(node);\r\n                                if ($scope.$globals[_hash] !== scope) {\r\n                                    $scope.$globals[_hash] = scope;\r\n                                }\r\n                            };\r\n\r\n                            $scope.getScope = function (node) {\r\n                                if (node) {\r\n                                    return $scope.$globals[$scope.getHash(node)];\r\n                                }\r\n                                return $scope;\r\n\r\n                            };\r\n\r\n                            $scope.initPlace = function (element, dragElm) {\r\n\r\n                                var tagName = null,\r\n                                    isTable = false;\r\n\r\n                                if (element) {\r\n                                    tagName = element.prop('tagName').toLowerCase();\r\n                                    isTable = (tagName === 'tr' || tagName === 'td');\r\n                                } else {\r\n                                    tagName = $scope.getElementChilds().prop('tagName').toLowerCase();\r\n                                    isTable = (tagName === 'tbody' || tagName === 'table');\r\n                                }\r\n\r\n                                if (!$scope.placeElm) {\r\n\r\n                                    if (isTable) {\r\n                                        $scope.placeElm = angular.element($window.document.createElement('tr'));\r\n                                        var _len_down = $scope.colDefinitions.length;\r\n                                        $scope.placeElm.append(\r\n                                            angular.element($window.document.createElement('td'))\r\n                                                .addClass($scope.$class.empty)\r\n                                                .addClass('indented')\r\n                                                .addClass($scope.$class.place)\r\n                                        );\r\n                                        while (_len_down-- > 0) {\r\n                                            $scope.placeElm.append(\r\n                                                angular.element($window.document.createElement('td'))\r\n                                                    .addClass($scope.$class.empty)\r\n                                                    .addClass($scope.$class.place)\r\n                                            );\r\n                                        }\r\n                                    } else {\r\n                                        $scope.placeElm = angular.element($window.document.createElement('li'))\r\n                                            .addClass($scope.$class.empty)\r\n                                            .addClass($scope.$class.place);\r\n                                    }\r\n\r\n                                }\r\n\r\n                                if (dragElm) {\r\n                                    $scope.placeElm.css('height', $TreeDnDHelper.height(dragElm) + 'px');\r\n                                }\r\n\r\n                                if (element) {\r\n                                    element[0].parentNode.insertBefore($scope.placeElm[0], element[0]);\r\n                                } else {\r\n                                    $scope.getElementChilds().append($scope.placeElm);\r\n                                }\r\n\r\n                                return $scope.placeElm;\r\n                            };\r\n\r\n                            $scope.hidePlace = function () {\r\n                                if ($scope.placeElm) {\r\n                                    $scope.placeElm.addClass($scope.$class.hidden);\r\n                                }\r\n                            };\r\n\r\n                            $scope.showPlace = function () {\r\n                                if ($scope.placeElm) {\r\n                                    $scope.placeElm.removeClass($scope.$class.hidden);\r\n                                }\r\n                            };\r\n\r\n                            $scope.getScopeTree = function () {\r\n                                return $scope;\r\n                            };\r\n\r\n                        }\r\n\r\n                        $scope.$safeApply = function (fn) {\r\n                            var phase = this.$root.$$phase;\r\n                            if (phase === '$apply' || phase === '$digest') {\r\n                                if (fn && (typeof(fn) === 'function')) {\r\n                                    fn();\r\n                                }\r\n                            } else {\r\n                                this.$apply(fn);\r\n                            }\r\n                        };\r\n\r\n                    }],\r\n                compile:    function compile(tElement, tAttrs) {\r\n\r\n                    var $_Template = '',\r\n                        _element = tElement.html().trim();\r\n                    if (_element.length > 0) {\r\n                        $_Template = _element;\r\n                        tElement.html('');\r\n                    }\r\n\r\n                    return function fnPost(scope, element, attrs) {\r\n                        var getExpandOn = function () {\r\n                                if (scope.treeData && scope.treeData.length) {\r\n                                    var _firstNode = scope.treeData[0], _keys = Object.keys(_firstNode),\r\n                                        _regex = new RegExp(\"^__([a-zA-Z0-9_\\-]*)__$\"),\r\n                                        _len,\r\n                                        i;\r\n                                    // Auto get first field with type is string;\r\n                                    for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                                        if (typeof (_firstNode[_keys[i]]) === 'string' && !_regex.test(_keys[i])) {\r\n                                            scope.expandingProperty = _keys[i];\r\n                                            return;\r\n                                        }\r\n                                    }\r\n\r\n                                    // Auto get first\r\n                                    if (angular.isUndefinedOrNull(scope.expandingProperty)) {\r\n                                        scope.expandingProperty = _keys[0];\r\n                                    }\r\n\r\n                                }\r\n                            },\r\n                            getColDefs = function () {\r\n                                // Auto get Defs except attribute __level__ ....\r\n                                if (scope.treeData.length) {\r\n                                    var _col_defs = [], _firstNode = scope.treeData[0],\r\n                                        _regex = new RegExp(\"(^__([a-zA-Z0-9_\\-]*)__$|^\" + scope.expandingProperty + \"$)\"),\r\n                                        _keys = Object.keys(_firstNode),\r\n                                        i, _len;\r\n                                    // Auto get first field with type is string;\r\n                                    for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                                        if (typeof (_firstNode[_keys[i]]) === 'string' && !_regex.test(_keys[i])) {\r\n                                            _col_defs.push(\r\n                                                {\r\n                                                    field: _keys[i]\r\n                                                }\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                    scope.colDefinitions = _col_defs;\r\n                                }\r\n                            },\r\n                            _fnInitFilter,\r\n                            _fnInitOrderBy,\r\n                            _fnGetControl,\r\n                            _fnInitDrag,\r\n                            do_f = function (root, node, parent, parent_real, level, visible, index) {\r\n                                var _i, _len, _icon, _index_real, _dept, _hashKey;\r\n                                if (!angular.isArray(node.__children__)) {\r\n                                    node.__children__ = [];\r\n                                }\r\n\r\n                                node.__parent_real__ = parent_real;\r\n                                node.__parent__ = parent;\r\n                                _len = node.__children__.length;\r\n\r\n                                if (angular.isUndefinedOrNull(node.__expanded__) && _len > 0) {\r\n                                    node.__expanded__ = level < scope.expandLevel;\r\n                                }\r\n\r\n                                if (_len === 0) {\r\n                                    _icon = -1;\r\n                                } else {\r\n                                    if (node.__expanded__) {\r\n                                        _icon = 1;\r\n                                    } else {\r\n                                        _icon = 0;\r\n                                    }\r\n                                }\r\n                                // Insert item vertically\r\n                                _index_real = root.length;\r\n                                node.__index__ = index;\r\n                                node.__index_real__ = _index_real;\r\n                                node.__level__ = level;\r\n                                node.__icon__ = _icon;\r\n                                node.__visible__ = !!visible;\r\n\r\n                                if (angular.isUndefinedOrNull(node.__uid__)) {\r\n                                    node.__uid__ = \"\" + Math.random();\r\n                                }\r\n\r\n                                root.push(node);\r\n\r\n                                // Check node children\r\n                                _dept = 1;\r\n                                if (_len > 0) {\r\n                                    for (_i = 0; _i < _len; _i++) {\r\n                                        _dept += do_f(\r\n                                            root,\r\n                                            node.__children__[_i],\r\n                                            (scope.primary_key === '__uid__') ? node.__uid__ : node[scope.primary_key],\r\n                                            _index_real,\r\n                                            level + 1,\r\n                                            visible && node.__expanded__,\r\n                                            _i\r\n                                        );\r\n                                    }\r\n                                }\r\n\r\n                                _hashKey = scope.getHash(node);\r\n\r\n                                if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\r\n                                    node.__hashKey__ = _hashKey;\r\n                                    // delete(scope.$globals[_hashKey]);\r\n                                }\r\n\r\n                                node.__dept__ = _dept;\r\n\r\n                                return _dept;\r\n                            },\r\n                            reload_data = function (oData) {\r\n                                var _data,\r\n                                    _len,\r\n                                    _tree_nodes = [];\r\n//                                console.log('---------');\r\n                                if (angular.isDefined(oData)) {\r\n                                    if (!angular.isArray(oData) || oData.length === 0) {\r\n                                        return [];\r\n                                    } else {\r\n                                        _data = oData;\r\n                                    }\r\n                                } else if (!angular.isArray(scope.treeData) || scope.treeData.length === 0) {\r\n                                    return [];\r\n                                } else {\r\n                                    _data = scope.treeData;\r\n                                }\r\n\r\n                                if (!attrs.expandOn) {\r\n                                    getExpandOn();\r\n                                }\r\n\r\n                                if (!attrs.columnDefs) {\r\n                                    getColDefs();\r\n                                }\r\n\r\n                                if (angular.isDefined(scope.orderBy)) {\r\n                                    if (!angular.isFunction(_fnInitOrderBy)) {\r\n                                        _fnInitOrderBy = $TreeDnDPlugin('$TreeDnDOrderBy');\r\n                                    }\r\n\r\n                                    if (angular.isFunction(_fnInitOrderBy)) {\r\n                                        _data = _fnInitOrderBy(_data, scope.orderBy);\r\n                                    }\r\n                                }\r\n\r\n                                if (angular.isDefined(scope.filter)) {\r\n                                    if (!angular.isFunction(_fnInitFilter)) {\r\n                                        _fnInitFilter = $TreeDnDPlugin('$TreeDnDFilter');\r\n                                    }\r\n\r\n                                    if (angular.isFunction(_fnInitFilter)) {\r\n                                        _data = _fnInitFilter(_data, scope.filter, scope.filterOptions);\r\n                                    }\r\n                                }\r\n\r\n                                _len = _data.length;\r\n                                if (_len > 0) {\r\n                                    var _i,\r\n                                        _offset, _max, _min, _keys,\r\n                                        _deptTotal = 0;\r\n\r\n                                    for (_i = 0; _i < _len; _i++) {\r\n                                        _deptTotal += do_f(_tree_nodes, _data[_i], null, null, 1, true, _i);\r\n                                    }\r\n\r\n                                    // clear Element Empty\r\n                                    _keys = Object.keys(scope.$globals);\r\n                                    _len = scope.$globals.length;\r\n                                    _offset = _len - _deptTotal;\r\n\r\n                                    if (_offset !== 0) {\r\n                                        _max = _len - _offset;\r\n                                        _min = _max - Math.abs(_offset);\r\n                                        for (_i = _min; _i < _max; _i++) {\r\n                                            delete(scope.$globals[_keys[_i]]);\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                // clear memory\r\n                                if (angular.isDefined(scope.tree_nodes)) {\r\n                                    delete(scope.tree_nodes);\r\n                                }\r\n\r\n                                scope.tree_nodes = _tree_nodes;\r\n                                return _tree_nodes;\r\n                            },\r\n                            _defaultFilterOption = {\r\n                                showParent: true,\r\n                                showChild:  false,\r\n                                beginAnd:   true\r\n                            },\r\n                            tree,\r\n                            check_exist_attr = function (attrs, existAttr, isAnd) {\r\n                                if (angular.isUndefinedOrNull(existAttr)) {\r\n                                    return false;\r\n                                }\r\n\r\n                                if (existAttr === '*' || !angular.isUndefined(attrs[existAttr])) {\r\n                                    return true;\r\n                                }\r\n\r\n                                if (angular.isArray(existAttr)) {\r\n                                    return for_each_attrs(attrs, existAttr, isAnd);\r\n                                }\r\n                            },\r\n                            for_each_attrs = function (attrs, exist, isAnd) {\r\n                                var i, len = exist.length, passed = false;\r\n\r\n                                if (len === 0) {\r\n                                    return null;\r\n                                }\r\n                                for (i = 0; i < len; i++) {\r\n                                    if (check_exist_attr(attrs, exist[i], !isAnd)) {\r\n                                        passed = true;\r\n                                        if (!isAnd) {\r\n                                            return true;\r\n                                        }\r\n                                    } else {\r\n                                        if (isAnd) {\r\n                                            return false;\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                return passed;\r\n                            },\r\n                            generateWatch = function (type, nameAttr, valDefault, nameScope, fnNotExist, fnAfter, fnBefore) {\r\n                                nameScope = nameScope || nameAttr;\r\n                                if (typeof type === 'string' || angular.isArray(type)) {\r\n                                    if (angular.isFunction(fnBefore) && fnBefore()) {\r\n                                        return;//jmp\r\n                                    }\r\n                                    if (typeof tAttrs[nameAttr] === 'string') {\r\n                                        scope.$watch(\r\n                                            tAttrs[nameAttr], function (val, old, scope) {\r\n                                                if ((typeof type === 'string' && typeof val === type) ||\r\n                                                    (angular.isArray(type) && type.indexOf(typeof val) > -1)\r\n                                                ) {\r\n                                                    scope[nameScope] = val;\r\n                                                } else {\r\n                                                    if (angular.isFunction(valDefault)) {\r\n                                                        scope[nameScope] = valDefault(val);\r\n                                                    } else {\r\n                                                        scope[nameScope] = valDefault;\r\n                                                    }\r\n                                                }\r\n\r\n                                                if (angular.isFunction(fnAfter)) {\r\n                                                    fnAfter(scope[nameScope], scope);\r\n                                                }\r\n                                            }, true\r\n                                        );\r\n                                    } else {\r\n\r\n                                        if (angular.isFunction(fnNotExist)) {\r\n                                            scope[nameScope] = fnNotExist();\r\n                                        } else if (!angular.isUndefined(fnNotExist)) {\r\n                                            scope[nameScope] = fnNotExist;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            _watches = [\r\n                                [\r\n                                    'enableDrag', [\r\n                                    ['boolean', 'enableStatus', null, 'enabledStatus'],\r\n                                    ['boolean', 'enableMove', null, 'enabledMove'],\r\n                                    ['number', 'dragDelay', 0, null, 0],\r\n                                    ['boolean', 'enableCollapse', null, 'enabledCollapse'],\r\n                                    [\r\n                                        'boolean', 'enableHotkey', null, 'enabledHotkey', null, function (isHotkey) {\r\n                                        if (isHotkey) {\r\n                                            scope.enabledMove = false;\r\n                                        } else {\r\n                                            scope.enabledMove = scope.statusMove;\r\n                                        }\r\n                                    }]\r\n                                ]],\r\n                                [\r\n                                    ['enableDrag', 'enableStatus'], [\r\n                                    [\r\n                                        'string', 'templateCopy', attrs.templateCopy, 'templateCopy', null,\r\n                                        function (_url) {\r\n                                            if (_url && $templateCache.get(_url)) {\r\n                                                $TreeDnDTemplate.setCopy(_url, scope);\r\n                                            }\r\n                                        }],\r\n                                    [\r\n                                        'string', 'templateMove', attrs.templateMove, 'templateMove', null,\r\n                                        function (_url) {\r\n                                            if (_url && $templateCache.get(_url)) {\r\n                                                $TreeDnDTemplate.setMove(_url, scope);\r\n                                            }\r\n                                        }]\r\n                                ]],\r\n                                [\r\n                                    [['enableDrag', 'enableDrop']], [\r\n                                    ['number', 'dragBorder', 30, 'dragBorder', 30]]\r\n                                ],\r\n                                [\r\n                                    '*', [\r\n                                    ['boolean', 'horizontal'],\r\n                                    [\r\n                                        'callback', 'treeClass', function (val) {\r\n                                        switch (typeof val) {\r\n                                            case 'string':\r\n                                                scope.$tree_class = val;\r\n                                                break;\r\n                                            case 'object':\r\n                                                angular.extend(scope.$class, val);\r\n                                                scope.$tree_class = scope.$class.tree;\r\n                                                break;\r\n                                            default:\r\n                                                scope.$tree_class = attrs.treeClass;\r\n                                                break;\r\n                                        }\r\n                                    }, 'treeClass', function () {\r\n                                        scope.$tree_class = scope.$class.tree + ' table';\r\n                                    }, null, function () {\r\n                                        if (/^(\\s+[\\w\\-]+){2,}$/g.test(\" \" + attrs.treeClass)) {\r\n                                            scope.$tree_class = attrs.treeClass.trim();\r\n                                            return true;\r\n                                        }\r\n                                    }],\r\n                                    [\r\n                                        ['object', 'string'], 'expandOn', getExpandOn, 'expandingProperty', getExpandOn,\r\n                                        function (expandOn) {\r\n                                            if (angular.isUndefinedOrNull(expandOn)) {\r\n                                                scope.expandingProperty = attrs.expandOn;\r\n                                            }\r\n                                        }],\r\n                                    [\r\n                                        'object', 'treeControl', angular.isDefined(scope.tree) ? scope.tree : {},\r\n                                        'tree', null, function ($tree) {\r\n\r\n                                        if (!angular.isFunction(_fnGetControl)) {\r\n                                            _fnGetControl = $TreeDnDPlugin('$TreeDnDControl');\r\n                                        }\r\n\r\n                                        if (angular.isFunction(_fnGetControl)) {\r\n                                            tree = angular.extend(\r\n                                                $tree,\r\n                                                _fnGetControl(scope)\r\n                                            );\r\n                                        }\r\n                                    }],\r\n                                    [\r\n                                        ['array', 'object'], 'columnDefs', getColDefs, 'colDefinitions', getColDefs,\r\n                                        function (colDefs) {\r\n                                            if (angular.isUndefinedOrNull(colDefs) || !angular.isArray(colDefs)) {\r\n                                                scope.colDefinitions = getColDefs();\r\n                                            }\r\n                                        }],\r\n                                    [['object', 'string', 'array', 'function'], 'orderBy', attrs.orderBy],\r\n                                    [\r\n                                        ['object', 'array'], 'filter', null, 'filter', null, function (filters) {\r\n                                        var _passed = false;\r\n                                        if (angular.isDefined(filters) && !angular.isArray(filters)) {\r\n                                            var _keysF = Object.keys(filters),\r\n                                                _lenF = _keysF.length, _iF;\r\n\r\n                                            if (_lenF > 0) {\r\n                                                for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                                                    if ((typeof filters[_keysF[_iF]]) === 'string' &&\r\n                                                        filters[_keysF[_iF]].length === 0) {\r\n                                                        continue;\r\n                                                    }\r\n                                                    _passed = true;\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                        scope.enabledFilter = _passed;\r\n                                        reload_data();\r\n                                    }],\r\n                                    [\r\n                                        'object', 'filterOptions', _defaultFilterOption, 'filterOptions',\r\n                                        _defaultFilterOption, function (option) {\r\n                                        if (typeof option === \"object\") {\r\n                                            scope.filterOptions = angular.extend(_defaultFilterOption, option);\r\n                                        }\r\n                                    }],\r\n                                    ['string', 'primaryKey', attrs.primaryKey, 'primary_key', '__uid__'],\r\n                                    ['string', 'indentUnit', attrs.indentUnit, 'indent_unit'],\r\n                                    ['number', 'indent', 30, null, 30],\r\n                                    ['number', 'indentPlus', 20, null, 20],\r\n                                    [\r\n                                        'null', 'callbacks',\r\n                                        function (optCallbacks) {\r\n                                            angular.forEach(\r\n                                                optCallbacks, function (value, key) {\r\n                                                    if (typeof value === \"function\") {\r\n                                                        if (scope.$callbacks[key]) {\r\n                                                            scope.$callbacks[key] = value;\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            );\r\n                                            return scope.$callbacks;\r\n                                        },\r\n                                        '$callbacks'\r\n                                    ],\r\n                                    [\r\n                                        'number', 'expandLevel', 3, 'expandLevel', 3, function () {\r\n                                        reload_data();\r\n                                    }],\r\n                                    ['boolean', 'enableDrag', null, 'dragEnabled'],\r\n                                    ['boolean', 'enableDrop', null, 'dropEnabled']\r\n                                ]]\r\n                            ],\r\n                            w, lenW = _watches.length,\r\n                            i, len,\r\n                            _curW,\r\n                            _typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW;\r\n                        for (w = 0; w < lenW; w++) {\r\n                            // skip if not exist\r\n                            if (!check_exist_attr(attrs, _watches[w][0], true)) {\r\n                                continue;\r\n                            }\r\n                            _curW = _watches[w][1];\r\n                            for (i = 0, len = _curW.length; i < len; i++) {\r\n                                _typeW = _curW[i][0];\r\n                                _nameW = _curW[i][1];\r\n                                _defaultW = _curW[i][2];\r\n                                _scopeW = _curW[i][3];\r\n                                _NotW = _curW[i][4];\r\n                                _AfterW = _curW[i][5];\r\n                                _BeforeW = _curW[i][6];\r\n                                generateWatch(_typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW);\r\n                            }\r\n                        }\r\n\r\n                        if (attrs.treeData) {\r\n                            scope.$watch(\r\n                                attrs.treeData, function (val) {\r\n                                    scope.treeData = val;\r\n                                }, true\r\n                            );\r\n                        }\r\n\r\n                        scope.$watch(\r\n                            'treeData', function (val) {\r\n                                reload_data(val);\r\n                            }, true\r\n                        );\r\n\r\n                        scope.reload_data = reload_data;\r\n\r\n                        if (attrs.enableDrag) {\r\n                            _fnInitDrag = $TreeDnDPlugin('$TreeDnDDrag');\r\n                            if (angular.isFunction(_fnInitDrag)) {\r\n                                _fnInitDrag(scope, element, $window, $document);\r\n                            }\r\n                        }\r\n\r\n                        // apply Template\r\n                        scope.$safeApply(\r\n                            function () {\r\n                                if ($_Template.length > 0) {\r\n                                    element.append($compile($_Template)(scope));\r\n                                } else {\r\n                                    $http.get(\r\n                                        attrs.templateUrl || $TreeDnDTemplate.getPath(),\r\n                                        {cache: $templateCache}\r\n                                    ).success(\r\n                                        function (data) {\r\n                                            element.append($compile(data.trim())(scope));\r\n                                        }\r\n                                    );\r\n                                }\r\n                            }\r\n                        );\r\n                    };\r\n                }\r\n            };\r\n        }]\r\n).factory(\r\n    '$TreeDnDConvert', function () {\r\n        var _$initConvert = {\r\n            line2tree: function (data, primaryKey, parentKey) {\r\n                if (!data || data.length === 0 || !primaryKey || !parentKey) {\r\n                    return [];\r\n                }\r\n                var tree = [],\r\n                    rootIds = [],\r\n                    item = data[0],\r\n                    _primary = item[primaryKey],\r\n                    treeObjs = {},\r\n                    parentId, parent,\r\n                    len = data.length,\r\n                    i = 0;\r\n                while (i < len) {\r\n                    item = data[i++];\r\n                    _primary = item[primaryKey];\r\n                    treeObjs[_primary] = item;\r\n                    parentId = item[parentKey];\r\n                    if (parentId) {\r\n                        parent = treeObjs[parentId];\r\n                        if (parent.__children__) {\r\n                            parent.__children__.push(item);\r\n                        } else {\r\n                            parent.__children__ = [item];\r\n                        }\r\n                    } else {\r\n                        rootIds.push(_primary);\r\n                    }\r\n                }\r\n                len = rootIds.length;\r\n                for (i = 0; i < len; i++) {\r\n                    tree.push(treeObjs[rootIds[i]]);\r\n                }\r\n                return tree;\r\n            },\r\n            tree2tree: function (data, parentKey) {\r\n                var access_child = function (data) {\r\n                    var _tree = [];\r\n                    var _i, _len = data.length, _copy, _child;\r\n                    for (_i = 0; _i < _len; _i++) {\r\n                        _copy = angular.copy(data[_i]);\r\n                        if (angular.isArray(_copy[parentKey]) && _copy[parentKey].length > 0) {\r\n                            _child = access_child(_copy[parentKey]);\r\n                            delete(_copy[parentKey]);\r\n                            _copy.__children__ = _child;\r\n                        }\r\n                        _tree.push(_copy);\r\n                    }\r\n                    return _tree;\r\n                };\r\n\r\n                return access_child(data);\r\n            }\r\n        }\r\n\r\n        return _$initConvert;\r\n    }\r\n).factory(\r\n    '$TreeDnDHelper', [\r\n        '$document', '$window', function ($document, $window) {\r\n            var _$helper = {\r\n                nodrag:          function (targetElm) {\r\n                    return (typeof targetElm.attr('data-nodrag')) !== \"undefined\";\r\n                },\r\n                eventObj:        function (e) {\r\n                    var obj = e;\r\n                    if (e.targetTouches !== undefined) {\r\n                        obj = e.targetTouches.item(0);\r\n                    } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\r\n                        obj = e.originalEvent.targetTouches.item(0);\r\n                    }\r\n                    return obj;\r\n                },\r\n                dragInfo:        function (scope) {\r\n                    var _node = scope.getData(),\r\n                        _tree = scope.getScopeTree(),\r\n                        _parent = scope.getNode(_node.__parent_real__);\r\n                    return {\r\n                        node:    _node,\r\n                        parent:  _parent,\r\n                        move:    {\r\n                            parent: _parent,\r\n                            pos:    _node.__index__\r\n                        },\r\n                        scope:   scope,\r\n                        target:  _tree,\r\n                        drag:    _tree,\r\n                        drop:    scope.getPrevSibling(_node),\r\n                        changed: false\r\n                    };\r\n                },\r\n                height:          function (element) {\r\n                    return element.prop('scrollHeight');\r\n                },\r\n                width:           function (element) {\r\n                    return element.prop('scrollWidth');\r\n                },\r\n                offset:          function (element) {\r\n                    var boundingClientRect = element[0].getBoundingClientRect();\r\n                    return {\r\n                        width:  element.prop('offsetWidth'),\r\n                        height: element.prop('offsetHeight'),\r\n                        top:    boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\r\n                        left:   boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\r\n                    };\r\n                },\r\n                positionStarted: function (e, target) {\r\n                    var pos = {};\r\n                    pos.offsetX = e.pageX - this.offset(target).left;\r\n                    pos.offsetY = e.pageY - this.offset(target).top;\r\n                    pos.startX = pos.lastX = e.pageX;\r\n                    pos.startY = pos.lastY = e.pageY;\r\n                    pos.nowX = pos.nowY = pos.distX = pos.distY = pos.dirAx = 0;\r\n                    pos.dirX = pos.dirY = pos.lastDirX = pos.lastDirY = pos.distAxX = pos.distAxY = 0;\r\n                    return pos;\r\n                },\r\n                positionMoved:   function (e, pos, firstMoving) {\r\n                    // mouse position last events\r\n                    pos.lastX = pos.nowX;\r\n                    pos.lastY = pos.nowY;\r\n                    // mouse position this events\r\n                    pos.nowX = e.pageX;\r\n                    pos.nowY = e.pageY;\r\n                    // distance mouse moved between events\r\n                    pos.distX = pos.nowX - pos.lastX;\r\n                    pos.distY = pos.nowY - pos.lastY;\r\n                    // direction mouse was moving\r\n                    pos.lastDirX = pos.dirX;\r\n                    pos.lastDirY = pos.dirY;\r\n                    // direction mouse is now moving (on both axis)\r\n                    pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\r\n                    pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\r\n                    // axis mouse is now moving on\r\n                    var newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\r\n                    // do nothing on first move\r\n                    if (firstMoving) {\r\n                        pos.dirAx = newAx;\r\n                        pos.moving = true;\r\n                        return;\r\n                    }\r\n                    // calc distance moved on this axis (and direction)\r\n                    if (pos.dirAx !== newAx) {\r\n                        pos.distAxX = 0;\r\n                        pos.distAxY = 0;\r\n                    } else {\r\n                        pos.distAxX += Math.abs(pos.distX);\r\n                        if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\r\n                            pos.distAxX = 0;\r\n                        }\r\n                        pos.distAxY += Math.abs(pos.distY);\r\n                        if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\r\n                            pos.distAxY = 0;\r\n                        }\r\n                    }\r\n                    pos.dirAx = newAx;\r\n                },\r\n                replaceIndent:   function (scope, element, indent, attr) {\r\n                    attr = attr ? attr : 'left';\r\n                    angular.element(element.children()[0]).css(attr, scope.$callbacks.calsIndent(indent));\r\n                }\r\n            };\r\n            return _$helper;\r\n        }]\r\n).factory(\r\n    '$TreeDnDPlugin',['$injector', function ($injector) {\r\n        var _fnget = function (name) {\r\n                if (angular.isDefined($injector) && $injector.has(name)) {\r\n                    return $injector.get(name);\r\n                }\r\n                return null;\r\n            };\r\n        return _fnget;\r\n    }]\r\n).factory(\r\n    '$TreeDnDTemplate', [\r\n        '$templateCache', function ($templateCache) {\r\n            var templatePath = 'template/TreeDnD/TreeDnD.html',\r\n                copyPath = 'template/TreeDnD/TreeDnDStatusCopy.html',\r\n                movePath = 'template/TreeDnD/TreeDnDStatusMove.html',\r\n                scopes = {},\r\n                temp,\r\n                _$init = {\r\n                    setMove: function (path, scope) {\r\n                        if (!scopes[scope.$id]) {\r\n                            scopes[scope.$id] = {};\r\n                        }\r\n                        scopes[scope.$id].movePath = path;\r\n                    },\r\n                    setCopy: function (path, scope) {\r\n                        if (!scopes[scope.$id]) {\r\n                            scopes[scope.$id] = {};\r\n                        }\r\n                        scopes[scope.$id].copyPath = path;\r\n                    },\r\n                    getPath: function () {\r\n                        return templatePath;\r\n                    },\r\n                    getCopy: function (scope) {\r\n                        if (scopes[scope.$id] && scopes[scope.$id].copyPath) {\r\n                            temp = $templateCache.get(scopes[scope.$id].copyPath);\r\n                            if (temp) {\r\n                                return temp;\r\n                            }\r\n                        }\r\n                        return $templateCache.get(copyPath);\r\n                    },\r\n                    getMove: function (scope) {\r\n                        if (scopes[scope.$id] && scopes[scope.$id].movePath) {\r\n                            temp = $templateCache.get(scopes[scope.$id].movePath);\r\n                            if (temp) {\r\n                                return temp;\r\n                            }\r\n                        }\r\n                        return $templateCache.get(movePath);\r\n                    }\r\n                };\r\n\r\n            return _$init;\r\n        }]\r\n).factory(\r\n    '$TreeDnDDrag', [\r\n        '$rootScope', '$timeout', '$TreeDnDHelper',\r\n        function ($rootScope, $timeout, $TreeDnDHelper) {\r\n            var _fnDragEnd;\r\n            var holderWasShown = false;\r\n            var nodesSelected = [];\r\n            var lastSelectedNode = null;\r\n\r\n            $rootScope.resetNodesSelected = function () {\r\n                nodesSelected.forEach(function (node) { node.__selected = false; });\r\n                nodesSelected = [];\r\n                lastSelectedNode = null;\r\n            };\r\n\r\n            var _offset,\r\n                _fnPlaceHolder = function (e, $params) {\r\n                    if ($params.placeElm) {\r\n                        _offset = $TreeDnDHelper.offset($params.placeElm);\r\n                        if (_offset.top <= e.pageY && e.pageY <= _offset.top + _offset.height &&\r\n                            _offset.left <= e.pageX && e.pageX <= _offset.left + _offset.width\r\n                           ) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                },\r\n                _fnDragStart = function (e, $params) {\r\n                    holderWasShown = false;\r\n\r\n                    if (!$params.hasTouch && (e.button === 2 || e.which === 3)) {\r\n                        // disable right click\r\n                        return;\r\n                    }\r\n                    if (e.uiTreeDragging || (e.originalEvent && e.originalEvent.uiTreeDragging)) { // event has already fired in other scope.\r\n                        return;\r\n                    }\r\n                    // the element which is clicked.\r\n                    var eventElm = angular.element(e.target),\r\n                        eventScope = eventElm.scope();\r\n                    if (!eventScope || !eventScope.$type) {\r\n                        return;\r\n                    }\r\n                    // if (eventScope.$type !== 'TreeDnDNode') { // Check if it is a node or a handle\r\n                    //     return;\r\n                    // }\r\n\r\n                    var currentNode = eventScope.$parent.$modelValue;\r\n                    if (eventScope.$type !== 'TreeDnDNodeHandle') { // If the node has a handle, then it should be clicked by the handle\r\n                        if (eventScope.hasMultiSelect && currentNode && currentNode.parentId !== null) {\r\n                            if (e.ctrlKey) {\r\n                                lastSelectedNode = currentNode;\r\n                                currentNode.__selected = !currentNode.__selected;\r\n                            } else if (e.shiftKey) {\r\n                                var groupNodes = eventScope.$parent.$parent.$parent.$modelValue.__children__;\r\n                                var lastSelectedNodeIdx = (lastSelectedNode && groupNodes.includes(lastSelectedNode)) ? groupNodes.indexOf(lastSelectedNode) : 0;\r\n                                var newSelectedNodeIdx = groupNodes.indexOf(currentNode);\r\n                                var lowerIdx = lastSelectedNodeIdx < newSelectedNodeIdx ? lastSelectedNodeIdx : newSelectedNodeIdx;\r\n                                var higherIdx = lastSelectedNodeIdx > newSelectedNodeIdx ? lastSelectedNodeIdx : newSelectedNodeIdx;\r\n\r\n                                $rootScope.resetNodesSelected();\r\n                                lastSelectedNode = groupNodes[lastSelectedNodeIdx]\r\n\r\n                                for (var idx = lowerIdx; idx <= higherIdx; idx++) {\r\n                                    groupNodes[idx].__selected = true;\r\n                                    nodesSelected.push(groupNodes[idx]);\r\n                                }\r\n                            } else {\r\n                                $rootScope.resetNodesSelected();\r\n                                lastSelectedNode = currentNode;\r\n                                currentNode.__selected = true;\r\n                            }\r\n\r\n                            // Add or remove the current node from selected nodes\r\n                            if (nodesSelected.every(function (node) { return node !== currentNode; }) && currentNode.__selected) {\r\n                                nodesSelected.push(currentNode);\r\n                            } else if (nodesSelected.includes(currentNode) && !currentNode.__selected) {\r\n                                nodesSelected.splice(nodesSelected.indexOf(currentNode), 1);\r\n                            }\r\n                        }\r\n                        return;\r\n                    }\r\n                    if (!nodesSelected.includes(currentNode)) {\r\n                        $rootScope.resetNodesSelected();\r\n                    }\r\n\r\n                    var eventElmTagName = eventElm.prop('tagName').toLowerCase(),\r\n                        dragScope,\r\n                        _$scope = $params.$scope;\r\n                    if (eventElmTagName === 'input'\r\n                        || eventElmTagName === 'textarea'\r\n                        || eventElmTagName === 'button'\r\n                        || eventElmTagName === 'select') { // if it's a input or button, ignore it\r\n                        return;\r\n                    }\r\n                    // check if it or it's parents has a 'data-nodrag' attribute\r\n                    while (eventElm && eventElm[0] && eventElm[0] !== $params.element) {\r\n                        if ($TreeDnDHelper.nodrag(eventElm)) { // if the node mark as `nodrag`, DONOT drag it.\r\n                            return;\r\n                        }\r\n                        eventElm = eventElm.parent();\r\n                    }\r\n\r\n                    e.uiTreeDragging = true; // stop event bubbling\r\n                    if (e.originalEvent) {\r\n                        e.originalEvent.uiTreeDragging = true;\r\n                    }\r\n                    e.preventDefault();\r\n\r\n                    dragScope = eventScope.getScopeNode();\r\n\r\n                    $params.firstMoving = true;\r\n\r\n                    if (!_$scope.$callbacks.beforeDrag(dragScope)) {\r\n                        return;\r\n                    }\r\n\r\n                    var eventObj = $TreeDnDHelper.eventObj(e),\r\n                        tagName = dragScope.$element.prop('tagName').toLowerCase(),\r\n                        isTable = (tagName === 'tr');\r\n\r\n                    $params.dragInfo = $TreeDnDHelper.dragInfo(dragScope);\r\n\r\n                    _$scope.setDragging($params.dragInfo);\r\n\r\n                    $params.pos = $TreeDnDHelper.positionStarted(eventObj, dragScope.$element);\r\n\r\n                    if (isTable) {\r\n                        $params.dragElm = angular.element($params.$window.document.createElement('table'))\r\n                            .addClass(_$scope.$class.tree)\r\n                            .addClass(_$scope.$class.drag)\r\n                            .addClass(_$scope.$tree_class);\r\n                    } else {\r\n                        $params.dragElm = angular.element($params.$window.document.createElement('ul'))\r\n                            .addClass(_$scope.$class.drag)\r\n                            .addClass('tree-dnd-nodes')\r\n                            .addClass(_$scope.$tree_class);\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'width':   $TreeDnDHelper.width(dragScope.$element) + 'px',\r\n                            'z-index': 9995\r\n                        }\r\n                    );\r\n\r\n                    $params.offsetEdge = 0;\r\n                    var _width = $TreeDnDHelper.width(dragScope.$element),\r\n                        _scope = dragScope,\r\n                        _element = _scope.$element,\r\n                        _clone = null,\r\n                        _needCollapse = !!_$scope.enabledCollapse,\r\n                        _copied = false,\r\n                        _tbody = null;\r\n\r\n                    if (isTable) {\r\n                        $params.offsetEdge = $params.dragInfo.node.__level__ - 1;\r\n                        _tbody = angular.element($params.$window.document.createElement('tbody'));\r\n\r\n                        _$scope.for_all_descendants(\r\n                            $params.dragInfo.node, function (_node) {\r\n                                _scope = _$scope.getScope(_node);\r\n                                _element = _scope.$element;\r\n\r\n                                if (!_copied) {\r\n                                    _clone = _element.clone();\r\n\r\n                                    $TreeDnDHelper.replaceIndent(\r\n                                        _scope,\r\n                                        _clone,\r\n                                        _node.__level__ - $params.offsetEdge,\r\n                                        'padding-left'\r\n                                    );\r\n\r\n                                    _tbody.append(_clone);\r\n\r\n                                    // skip all, just clone parent\r\n                                    if (_needCollapse) {\r\n                                        _copied = true;\r\n                                    }\r\n                                }\r\n\r\n                                if (_$scope.enabledMove && _$scope.$class.hidden) {\r\n                                    _element.addClass(_$scope.$class.hidden);\r\n                                }\r\n                            }\r\n                        );\r\n\r\n                        $params.dragElm.append(_tbody);\r\n                    } else {\r\n\r\n                        if (!_needCollapse) {\r\n                            _clone = _element.clone();\r\n                        } else {\r\n                            var _holder = _scope.getElementChilds(),\r\n                                _swaper = angular.element(\"<swaped />\");\r\n\r\n                            // Insert tag `<holder>` & move _holder into tag `<swaper>`;\r\n                            _holder.after(angular.element(\"<holder />\"));\r\n                            _swaper.append(_holder);\r\n\r\n                            // Clone without Children & remove tag `<holder>`\r\n                            _clone = _element.clone();\r\n                            _clone.find(\"holder\").remove();\r\n\r\n                            // bring childs back frome `swaper` & remove tag `<swaper>`\r\n                            _element.find(\"holder\").replaceWith(_holder);\r\n\r\n                            // Reset & clear all;\r\n                            _swaper.remove();\r\n                            _holder = null;\r\n                        }\r\n\r\n                        $params.dragElm.append(_clone);\r\n                        if (_$scope.enabledMove && _$scope.$class.hidden) {\r\n                            _element.addClass(_$scope.$class.hidden);\r\n                        }\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'left': eventObj.pageX - $params.pos.offsetX + _$scope.$callbacks.calsIndent(\r\n                                $params.offsetEdge + 1,\r\n                                true,\r\n                                true\r\n                            )       + 'px',\r\n                            'top':  eventObj.pageY - $params.pos.offsetY + 'px'\r\n                        }\r\n                    );\r\n\r\n                    if (nodesSelected.length > 1) {\r\n                        $params.dragElm.append(angular.element('<div class=\"numBadge\">' + nodesSelected.length + '</div>'));\r\n                    }\r\n\r\n                    // moving item with descendant\r\n                    $params.$document.find('body').append($params.dragElm);\r\n                    if (_$scope.$callbacks.droppable()) {\r\n                        $params.placeElm = _$scope.initPlace(dragScope.$element, $params.dragElm);\r\n\r\n                        if (isTable) {\r\n                            $TreeDnDHelper.replaceIndent(_$scope, $params.placeElm, $params.dragInfo.node.__level__);\r\n                        }\r\n\r\n                        $params.placeElm.css('width', _width);\r\n                    }\r\n\r\n                    _$scope.showPlace();\r\n                    _$scope.targeting = true;\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.refreshStatus();\r\n                        _$scope.setPositionStatus(e);\r\n                    }\r\n\r\n                    angular.element($params.$document).bind('touchend', $params.dragEndEvent);\r\n                    angular.element($params.$document).bind('touchcancel', $params.dragEndEvent);\r\n                    angular.element($params.$document).bind('touchmove', $params.dragMoveEvent);\r\n                    angular.element($params.$document).bind('mouseup', $params.dragEndEvent);\r\n                    angular.element($params.$document).bind('mousemove', $params.dragMoveEvent);\r\n                    angular.element($params.$document).bind('mouseleave', $params.dragCancelEvent);\r\n\r\n                    $params.document_height = Math.max(\r\n                        $params.body.scrollHeight,\r\n                        $params.body.offsetHeight,\r\n                        $params.html.clientHeight,\r\n                        $params.html.scrollHeight,\r\n                        $params.html.offsetHeight\r\n                    );\r\n\r\n                    $params.document_width = Math.max(\r\n                        $params.body.scrollWidth,\r\n                        $params.body.offsetWidth,\r\n                        $params.html.clientWidth,\r\n                        $params.html.scrollWidth,\r\n                        $params.html.offsetWidth\r\n                    );\r\n                },\r\n                _fnDragMove = function (e, $params) {\r\n                    var _$scope = $params.$scope;\r\n                    if (!$params.dragStarted) {\r\n                        if (!$params.dragDelaying) {\r\n                            $params.dragStarted = true;\r\n                            _$scope.$safeApply(\r\n                                function () {\r\n                                    _$scope.$callbacks.dragStart($params.dragInfo);\r\n                                }\r\n                            );\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    if (!$params.dragElm) {\r\n                        return;\r\n                    }\r\n\r\n                    e.preventDefault();\r\n                    if ($params.$window.getSelection) {\r\n                        $params.$window.getSelection().removeAllRanges();\r\n                    } else if ($params.$window.document.selection) {\r\n                        $params.$window.document.selection.empty();\r\n                    }\r\n\r\n                    var eventObj = $TreeDnDHelper.eventObj(e),\r\n                        leftElmPos = eventObj.pageX - $params.pos.offsetX,\r\n                        topElmPos = eventObj.pageY - $params.pos.offsetY;\r\n\r\n                    //dragElm can't leave the screen on the left\r\n                    if (leftElmPos < 0) {\r\n                        leftElmPos = 0;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the top\r\n                    if (topElmPos < 0) {\r\n                        topElmPos = 0;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the bottom\r\n                    if ((topElmPos + 10) > $params.document_height) {\r\n                        topElmPos = $params.document_height - 10;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the right\r\n                    if ((leftElmPos + 10) > $params.document_width) {\r\n                        leftElmPos = $params.document_width - 10;\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'left': leftElmPos + _$scope.$callbacks.calsIndent(\r\n                                $params.offsetEdge + 1,\r\n                                true,\r\n                                true\r\n                            )       + 'px',\r\n                            'top':  topElmPos + 'px'\r\n                        }\r\n                    );\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.setPositionStatus(e);\r\n                    }\r\n\r\n                    var top_scroll = window.pageYOffset || $params.$window.document.documentElement.scrollTop,\r\n                        bottom_scroll = top_scroll + (window.innerHeight || $params.$window.document.clientHeight || $params.$window.document.clientHeight);\r\n                    // to scroll down if cursor y-position is greater than the bottom position the vertical scroll\r\n                    if (bottom_scroll < eventObj.pageY && bottom_scroll <= $params.document_height) {\r\n                        window.scrollBy(0, 10);\r\n                    }\r\n                    // to scroll top if cursor y-position is less than the top position the vertical scroll\r\n                    if (top_scroll > eventObj.pageY) {\r\n                        window.scrollBy(0, -10);\r\n                    }\r\n\r\n                    $TreeDnDHelper.positionMoved(e, $params.pos, $params.firstMoving);\r\n\r\n                    if ($params.firstMoving) {\r\n                        $params.firstMoving = false;\r\n                        return;\r\n                    }\r\n                    // check if add it as a child node first\r\n\r\n                    var targetX = eventObj.pageX - $params.$window.document.body.scrollLeft,\r\n                        targetY = eventObj.pageY - (window.pageYOffset || $params.$window.document.documentElement.scrollTop),\r\n\r\n                        targetElm,\r\n                        targetScope,\r\n                        targetBefore,\r\n                        targetOffset,\r\n                        tagName,\r\n                        isTable,\r\n                        isChanged = true,\r\n                        isVeritcal = true,\r\n                        isEmpty,\r\n                        isSwapped,\r\n                        _scope,\r\n                        _target,\r\n                        _parent,\r\n                        _info = $params.dragInfo,\r\n                        _move = _info.move,\r\n                        _drag = _info.node,\r\n                        _drop = _info.drop,\r\n                        treeScope = _info.target,\r\n                        fnSwapTree,\r\n                        isHolder = _fnPlaceHolder(e, $params);\r\n\r\n                    if (!isHolder) {\r\n                        /* when using elementFromPoint() inside an iframe, you have to call\r\n                             elementFromPoint() twice to make sure IE8 returns the correct value\r\n                             $params.$window.document.elementFromPoint(targetX, targetY);*/\r\n\r\n                        targetElm = angular.element(\r\n                            $params.$window.document.elementFromPoint(\r\n                                targetX,\r\n                                targetY\r\n                            )\r\n                        );\r\n\r\n                        targetScope = targetElm.scope();\r\n                        if (!targetScope) {\r\n                            return;\r\n                        }\r\n\r\n                        fnSwapTree = function () {\r\n                            treeScope = targetScope.getScopeTree();\r\n                            _target = _info.target;\r\n                            if (_info.target !== treeScope) {\r\n                                if (treeScope.$callbacks.droppable()) {\r\n                                    // Replace by place-holder new\r\n                                    _target.hidePlace();\r\n                                    _target.targeting = false;\r\n                                    treeScope.targeting = true;\r\n\r\n                                    _info.target = treeScope;\r\n                                    $params.placeElm = treeScope.initPlace(targetScope.$element, $params.dragElm);\r\n\r\n                                    _target = null;\r\n                                    isSwapped = true;\r\n                                } else {\r\n                                    // Not allowed Drop Item\r\n                                    return false;\r\n                                }\r\n                            }\r\n                            return true;\r\n                        };\r\n\r\n                        var abortDrag = function () {\r\n                            holderWasShown = false;\r\n                            if (_$scope.enabledStatus) {\r\n                                _$scope.hideStatus();\r\n                            }\r\n                            _$scope.$$apply = false;\r\n                            _fnDragEnd(e, $params);\r\n                        };\r\n\r\n                        if (angular.isFunction(targetScope.getScopeNode)) {\r\n                            targetScope = targetScope.getScopeNode();\r\n\r\n                            if (!fnSwapTree()) {\r\n                                return;\r\n                            }\r\n                        } else {\r\n                            if (holderWasShown) {\r\n                                setTimeout(function () {\r\n                                    // setTimeout is necessary because otherwise the placeholder will not be deleted in some cases\r\n                                    // see: https://stackoverflow.com/questions/779379/why-is-settimeoutfn-0-sometimes-useful\r\n                                    treeScope.placeElm.remove();\r\n                                    abortDrag();\r\n                                }, 0);\r\n                                return;\r\n                            }\r\n\r\n                            if (targetScope.$type === 'TreeDnDNodes' || targetScope.$type === 'TreeDnD') {\r\n                                if (targetScope.tree_nodes) {\r\n                                    if (targetScope.tree_nodes.length === 0) {\r\n                                        if (!fnSwapTree()) {\r\n                                            return;\r\n                                        }\r\n                                        // Empty\r\n                                        isEmpty = true;\r\n                                    }\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            } else {\r\n                                return;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        holderWasShown = true;\r\n                    }\r\n\r\n                    if ($params.pos.dirAx && !isSwapped || isHolder) {\r\n                        isVeritcal = false;\r\n                        targetScope = _info.scope;\r\n                    }\r\n\r\n                    if (!targetScope.$element && !targetScope) {\r\n                        return;\r\n                    }\r\n\r\n                    tagName = targetScope.$element.prop('tagName').toLowerCase();\r\n                    isTable = (tagName === 'tbody' || tagName === 'table' || tagName === 'tr' || tagName === 'td');\r\n                    if (isEmpty) {\r\n                        _move.parent = null;\r\n                        _move.pos = 0;\r\n\r\n                        _drop = null;\r\n                    } else {\r\n                        // move vertical\r\n                        if (isVeritcal) {\r\n                            targetElm = targetScope.$element; // Get the element of tree-dnd-node\r\n\r\n                            targetOffset = $TreeDnDHelper.offset(targetElm);\r\n\r\n                            if (targetScope.horizontal && !isTable) {\r\n                                targetBefore = eventObj.pageX < (targetOffset.left + $TreeDnDHelper.width(targetElm) / 2);\r\n                            } else {\r\n                                if (isTable) {\r\n                                    targetBefore = eventObj.pageY < (targetOffset.top + $TreeDnDHelper.height(targetElm) / 2);\r\n                                } else {\r\n                                    var _height = $TreeDnDHelper.height(targetElm);\r\n\r\n                                    if (targetScope.getElementChilds()) {\r\n                                        _height -= -$TreeDnDHelper.height(targetScope.getElementChilds());\r\n                                    }\r\n\r\n                                    if (eventObj.pageY > targetOffset.top + _height) {\r\n                                        return;\r\n                                    }\r\n\r\n                                    targetBefore = eventObj.pageY < (targetOffset.top + _height / 2);\r\n                                }\r\n                            }\r\n\r\n                            if (!angular.isFunction(targetScope.getData)) {\r\n                                return;\r\n                            }\r\n\r\n                            _target = targetScope.getData();\r\n                            _parent = targetScope.getNode(_target.__parent_real__);\r\n\r\n                            if (targetBefore) {\r\n                                var _prev = targetScope.getPrevSibling(_target);\r\n\r\n                                _move.parent = _parent;\r\n                                _move.pos = angular.isDefined(_prev) ? _prev.__index__ + 1 : 0;\r\n\r\n                                _drop = _prev;\r\n                            } else {\r\n                                if (_target.__expanded__ && !(_target.__children__.length === 1 && _target.__index_real__ === _drag.__parent_real__)) {\r\n                                    _move.parent = _target;\r\n                                    _move.pos = 0;\r\n\r\n                                    _drop = null;\r\n                                } else {\r\n                                    _move.parent = _parent;\r\n                                    _move.pos = _target.__index__ + 1;\r\n\r\n                                    _drop = _target;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            // move horizontal\r\n                            if ($params.pos.dirAx && $params.pos.distAxX >= treeScope.dragBorder && !treeScope.onlyDeepestDrop) {\r\n                                $params.pos.distAxX = 0;\r\n                                // increase horizontal level if previous sibling exists and is not collapsed\r\n                                if ($params.pos.distX > 0) {\r\n                                    _parent = _drop;\r\n                                    if (!_parent) {\r\n                                        if (_move.pos - 1 >= 0) {\r\n                                            _parent = _move.parent.__children__[_move.pos - 1];\r\n                                        } else {\r\n                                            return;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (_info.drag === _info.target && _parent === _drag && _$scope.enabledMove) {\r\n                                        _parent = treeScope.getPrevSibling(_parent);\r\n                                    }\r\n\r\n                                    if (_parent && _parent.__visible__) {\r\n                                        var _len = _parent.__children__.length;\r\n\r\n                                        _move.parent = _parent;\r\n                                        _move.pos = _len;\r\n\r\n                                        if (_len > 0) {\r\n                                            _drop = _parent.__children__[_len - 1];\r\n                                        } else {\r\n                                            _drop = null;\r\n                                        }\r\n                                    } else {\r\n                                        // Not changed\r\n                                        return;\r\n                                    }\r\n                                } else if ($params.pos.distX < 0) {\r\n                                    _target = _move.parent;\r\n                                    if (_target &&\r\n                                        (_target.__children__.length === 0 ||\r\n                                         _target.__children__.length - 1 < _move.pos ||\r\n                                         (_info.drag === _info.target &&\r\n                                          _target.__index_real__ === _drag.__parent_real__ &&\r\n                                          _target.__children__.length - 1 === _drag.__index__ && _$scope.enabledMove))\r\n                                       ) {\r\n                                        _parent = treeScope.getNode(_target.__parent_real__);\r\n\r\n                                        _move.parent = _parent;\r\n                                        _move.pos = _target.__index__ + 1;\r\n\r\n                                        _drop = _target;\r\n                                    } else {\r\n                                        // Not changed\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            } else if (treeScope.onlyDeepestDrop) {\r\n                                _parent = _drop;\r\n                                if (!_parent) {\r\n                                    return;\r\n                                }\r\n                                if (_parent && _parent.__visible__) {\r\n                                    var _len = _parent.__children__.length;\r\n                                    _move.parent = _parent;\r\n                                    _move.pos = _len;\r\n                                    _drop = null;\r\n                                } else {\r\n                                    // Not changed\r\n                                    return;\r\n                                }\r\n                            } else {\r\n                                // limited\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (_info.drag === _info.target &&\r\n                        _move.parent &&\r\n                        _drag.__parent_real__ === _move.parent.__index_real__ &&\r\n                        _drag.__index__ === _move.pos\r\n                       ) {\r\n                        isChanged = false;\r\n                    }\r\n\r\n                    if (treeScope.$callbacks.accept(_info, _move, isChanged)) {\r\n                        _info.move = _move;\r\n                        _info.drop = _drop;\r\n                        _info.changed = isChanged;\r\n                        _info.scope = targetScope;\r\n\r\n                        if (isTable) {\r\n                            $TreeDnDHelper.replaceIndent(\r\n                                treeScope,\r\n                                $params.placeElm,\r\n                                angular.isUndefinedOrNull(_move.parent) ? 1 : _move.parent.__level__ + 1\r\n                            );\r\n\r\n                            if (_drop) {\r\n                                _parent = (_move.parent ? _move.parent.__children__ : null ) || _info.target.treeData;\r\n\r\n                                if (_drop.__index__ < _parent.length - 1) {\r\n                                    // Find fast\r\n                                    _drop = _parent[_drop.__index__ + 1];\r\n                                    _scope = _info.target.getScope(_drop);\r\n                                    _scope.$element[0].parentNode.insertBefore(\r\n                                        $params.placeElm[0],\r\n                                        _scope.$element[0]\r\n                                    );\r\n                                } else {\r\n                                    _target = _info.target.getLastDescendant(_drop);\r\n                                    _scope = _info.target.getScope(_target);\r\n                                    _scope.$element.after($params.placeElm);\r\n                                }\r\n                            } else {\r\n                                _scope = _info.target.getScope(_move.parent);\r\n                                if (_scope) {\r\n                                    if (_move.parent) {\r\n                                        _scope.$element.after($params.placeElm);\r\n\r\n                                    } else {\r\n                                        _scope.getElementChilds().prepend($params.placeElm);\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else {\r\n                            _scope = _info.target.getScope(_drop || _move.parent);\r\n\r\n                            if (_drop) {\r\n                                _scope.$element.after($params.placeElm);\r\n                            } else {\r\n                                _scope.getElementChilds().prepend($params.placeElm);\r\n                            }\r\n                        }\r\n\r\n                        treeScope.showPlace();\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragMove(_info);\r\n                            }\r\n                        );\r\n                    }\r\n                },\r\n                _fnDragEnd = function (e, $params) {\r\n                    holderWasShown = false;\r\n\r\n                    e.preventDefault();\r\n                    if ($params.dragElm) {\r\n                        var _passed = false,\r\n                            _$scope = $params.$scope,\r\n                            _scope = _$scope.getScope($params.dragInfo.node),\r\n                            tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                            _isTable = (tagName === 'tr'),\r\n                            _element = _scope.$element;\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _passed = _$scope.$callbacks.beforeDrop($params.dragInfo);\r\n                            }\r\n                        );\r\n\r\n                        // rollback all\r\n                        if (_isTable) {\r\n                            _$scope.for_all_descendants(\r\n                                $params.dragInfo.node, function (_node) {\r\n                                    _scope = _$scope.getScope(_node);\r\n                                    _element = _scope.$element;\r\n\r\n                                    if (_scope.$class.hidden) {\r\n                                        _element.removeClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                            );\r\n                        } else {\r\n                            if (_$scope.$class.hidden) {\r\n                                _element.removeClass(_$scope.$class.hidden);\r\n                            }\r\n                        }\r\n\r\n                        $params.dragElm.remove();\r\n                        $params.dragElm = null;\r\n\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.hideStatus();\r\n                        }\r\n\r\n                        var _status = false;\r\n                        if (_$scope.$$apply) {\r\n                            _$scope.$safeApply(\r\n                                function () {\r\n                                    $params.dragInfo.__multipleNodes = nodesSelected;\r\n                                    $rootScope.resetNodesSelected();\r\n\r\n                                    _status = _$scope.$callbacks.dropped(\r\n                                        $params.dragInfo,\r\n                                        _passed,\r\n                                        _$scope.enabledMove\r\n                                    );\r\n                                }\r\n                            );\r\n                        } else {\r\n                            if ($params && $params.pos === null) {\r\n                                _fnBindDrag($params);\r\n                            }\r\n                        }\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragStop($params.dragInfo, _status);\r\n                            }\r\n                        );\r\n\r\n                        $params.dragInfo.target.hidePlace();\r\n                        $params.dragInfo.target.targeting = false;\r\n\r\n                        $params.dragInfo = null;\r\n                        _$scope.$$apply = false;\r\n                        _$scope.setDragging(null);\r\n                    }\r\n\r\n                    angular.element($params.$document).unbind('touchend', $params.dragEndEvent); // Mobile\r\n                    angular.element($params.$document).unbind('touchcancel', $params.dragEndEvent); // Mobile\r\n                    angular.element($params.$document).unbind('touchmove', $params.dragMoveEvent); // Mobile\r\n                    angular.element($params.$document).unbind('mouseup', $params.dragEndEvent);\r\n                    angular.element($params.$document).unbind('mousemove', $params.dragMoveEvent);\r\n                    angular.element($params.$window.document.body).unbind('mouseleave', $params.dragCancelEvent);\r\n                },\r\n                _fnDragStartEvent = function (e, $params) {\r\n                    if ($params.$scope.$callbacks.draggable()) {\r\n                        _fnDragStart(e, $params);\r\n                    }\r\n                },\r\n                _fnBindDrag = function ($params) {\r\n                    $params.element.bind(\r\n                        'touchstart mousedown', function (e) {\r\n                            $params.dragDelaying = true;\r\n                            $params.dragStarted = false;\r\n                            _fnDragStartEvent(e, $params);\r\n                            $params.dragTimer = $timeout(\r\n                                function () {\r\n                                    $params.dragDelaying = false;\r\n                                }, $params.$scope.dragDelay\r\n                            );\r\n                        }\r\n                    );\r\n                    $params.element.bind(\r\n                        'touchend touchcancel mouseup', function () {\r\n                            $timeout.cancel($params.dragTimer);\r\n                        }\r\n                    );\r\n                },\r\n                _fnKeydownHandler = function (e, $params) {\r\n                    var _$scope = $params.$scope;\r\n                    if (e.keyCode === 27) {\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.hideStatus();\r\n                        }\r\n\r\n                        _$scope.$$apply = false;\r\n                        _fnDragEnd(e, $params);\r\n                    } else {\r\n                        if (_$scope.enabledHotkey && e.shiftKey) {\r\n                            _$scope.enableMove(true);\r\n                            if (_$scope.enabledStatus) {\r\n                                _$scope.refreshStatus();\r\n                            }\r\n\r\n                            if (!$params.dragInfo) {\r\n                                return;\r\n                            }\r\n\r\n                            var _scope = _$scope.getScope($params.dragInfo.node),\r\n                                tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                                _element = _scope.$element;\r\n\r\n                            if (tagName === 'tr') {\r\n                                _$scope.for_all_descendants(\r\n                                    $params.dragInfo.node, function (_node) {\r\n                                        _scope = _$scope.getScope(_node);\r\n                                        _element = _scope.$element;\r\n\r\n                                        if (_$scope.$class.hidden) {\r\n                                            _element.addClass(_$scope.$class.hidden);\r\n                                        }\r\n                                    }\r\n                                );\r\n                            } else {\r\n                                if (_$scope.$class.hidden) {\r\n                                    _element.addClass(_$scope.$class.hidden);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                _fnKeyupHandler = function (e, $params) {\r\n                    var _$scope = $params.$scope;\r\n                    if (_$scope.enabledHotkey && !e.shiftKey) {\r\n                        _$scope.enableMove(false);\r\n\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.refreshStatus();\r\n                        }\r\n\r\n                        if (!$params.dragInfo) {\r\n                            return;\r\n                        }\r\n\r\n                        var _scope = _$scope.getScope($params.dragInfo.node),\r\n                            tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                            _element = _scope.$element;\r\n\r\n                        if (tagName === 'tr') {\r\n                            _$scope.for_all_descendants(\r\n                                $params.dragInfo.node, function (_node) {\r\n\r\n                                    _scope = _$scope.getScope(_node);\r\n                                    _element = _scope.$element;\r\n\r\n                                    if (_$scope.$class.hidden) {\r\n                                        _element.removeClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                            );\r\n                        } else {\r\n                            if (_$scope.$class.hidden) {\r\n                                _element.removeClass(_$scope.$class.hidden);\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n\r\n                _$init = function (scope, element, $window, $document) {\r\n                    var $params = {\r\n                        hasTouch:        ('ontouchstart' in window),\r\n                        firstMoving:     null,\r\n                        dragInfo:        null,\r\n                        pos:             null,\r\n                        placeElm:        null,\r\n                        dragElm:         null,\r\n                        dragDelaying:    true,\r\n                        dragStarted:     false,\r\n                        dragTimer:       null,\r\n                        body:            document.body,\r\n                        html:            document.documentElement,\r\n                        document_height: null,\r\n                        document_width:  null,\r\n                        offsetEdge:      null,\r\n                        $scope:          scope,\r\n                        $window:         $window,\r\n                        $document:       $document,\r\n                        element:         element,\r\n                        bindDrag:        function () {\r\n                            _fnBindDrag($params);\r\n                        },\r\n                        dragEnd:         function (e) {\r\n                            _fnDragEnd(e, $params);\r\n                        },\r\n                        dragMoveEvent:   function (e) {\r\n                            _fnDragMove(e, $params)\r\n                        },\r\n                        dragEndEvent:    function (e) {\r\n                            scope.$$apply = true;\r\n                            _fnDragEnd(e, $params);\r\n                        },\r\n                        dragCancelEvent: function (e) {\r\n                            _fnDragEnd(e, $params);\r\n                        }\r\n                    },\r\n                        keydownHandler = function (e) {\r\n                            return _fnKeydownHandler(e, $params);\r\n                        },\r\n                        keyupHandler = function (e) {\r\n                            return _fnKeyupHandler(e, $params);\r\n                        };\r\n\r\n                    scope.dragEnd = function (e) {\r\n                        $params.dragEnd(e);\r\n                    };\r\n\r\n                    $params.bindDrag();\r\n\r\n                    angular.element($window.document.body).bind(\"keydown\", keydownHandler);\r\n                    angular.element($window.document.body).bind(\"keyup\", keyupHandler);\r\n                    //unbind handler that retains scope\r\n                    scope.$on(\r\n                        '$destroy', function () {\r\n                            angular.element($window.document.body).unbind(\"keydown\", keydownHandler);\r\n                            angular.element($window.document.body).unbind(\"keyup\", keyupHandler);\r\n                            if (scope.statusElm) {\r\n                                scope.statusElm.remove();\r\n                            }\r\n\r\n                            if (scope.placeElm) {\r\n                                scope.placeElm.remove();\r\n                            }\r\n                        }\r\n                    );\r\n                };\r\n\r\n            return _$init;\r\n        }\r\n    ]\r\n).factory(\r\n    '$TreeDnDControl', function ($rootScope) {\r\n        var _target, _parent,\r\n            i, len,\r\n            fnSetCollapse = function fnSetCollapse(node) {\r\n                node.__expanded__ = false;\r\n            },\r\n            fnSetExpand = function fnSetExpand(node) {\r\n                node.__expanded__ = true;\r\n            },\r\n\r\n            _$init = function _$init(scope) {\r\n                var n, tree = {\r\n                    selected_node:                     null,\r\n                    for_all_descendants:               scope.for_all_descendants,\r\n                    select_node:                       function (node) {\r\n                        if (!node) {\r\n                            if (tree.selected_node) {\r\n                                delete(tree.selected_node.__selected__);\r\n                            }\r\n                            tree.selected_node = null;\r\n                            return null;\r\n                        }\r\n\r\n                        if (node !== tree.selected_node) {\r\n                            if (tree.selected_node) {\r\n                                delete(tree.selected_node.__selected__);\r\n                            }\r\n                            node.__selected__ = true;\r\n                            tree.selected_node = node;\r\n                            tree.expand_all_parents(node);\r\n                            if (angular.isFunction(tree.on_select)) {\r\n                                tree.on_select(node);\r\n                            }\r\n                        }\r\n                        return node;\r\n                    },\r\n                    deselect_node:                     function () {\r\n                        _target = null;\r\n                        if (tree.selected_node) {\r\n                            delete(tree.selected_node.__selected__);\r\n                            _target = tree.selected_node;\r\n                            tree.selected_node = null;\r\n                        }\r\n                        return _target;\r\n                    },\r\n                    get_parent:                        function (node) {\r\n                        if (node && node.__parent_real__ !== null) {\r\n                            return scope.tree_nodes[node.__parent_real__];\r\n                        }\r\n                        return null;\r\n                    },\r\n                    for_all_ancestors:                 function (child, fn) {\r\n                        _parent = tree.get_parent(child);\r\n                        if (_parent) {\r\n                            if (fn(_parent)) {\r\n                                return false;\r\n                            }\r\n\r\n                            return tree.for_all_ancestors(_parent, fn);\r\n                        }\r\n                        return true;\r\n                    },\r\n                    expand_all_parents:                function (child) {\r\n                        return tree.for_all_ancestors(\r\n                            child, fnSetExpand\r\n                        );\r\n                    },\r\n                    reload_data:                       function () {\r\n                        return scope.reload_data();\r\n                    },\r\n                    add_node:                          function (parent, new_node, index) {\r\n                        if (typeof index !== 'number') {\r\n                            if (parent) {\r\n                                parent.__children__.push(new_node);\r\n                                parent.__expanded__ = true;\r\n                            } else {\r\n                                scope.treeData.push(new_node);\r\n                            }\r\n                        } else {\r\n                            if (parent) {\r\n                                parent.__children__.splice(index, 0, new_node);\r\n                                parent.__expanded__ = true;\r\n                            } else {\r\n                                scope.treeData.splice(index, 0, new_node);\r\n                            }\r\n                        }\r\n                        return new_node;\r\n                    },\r\n                    add_node_root:                     function (new_node) {\r\n                        tree.add_node(null, new_node);\r\n                        return new_node;\r\n                    },\r\n                    expand_all:                        function () {\r\n                        len = scope.treeData.length;\r\n                        for (i = 0; i < len; i++) {\r\n                            tree.for_all_descendants(\r\n                                scope.treeData[i], fnSetExpand\r\n                            );\r\n                        }\r\n                    },\r\n                    collapse_all:                      function () {\r\n                        len = scope.treeData.length;\r\n                        for (i = 0; i < len; i++) {\r\n                            tree.for_all_descendants(\r\n                                scope.treeData[i], fnSetCollapse\r\n                            );\r\n                        }\r\n                    },\r\n                    remove_node:                       function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            if (node.__parent_real__ !== null) {\r\n                                _parent = tree.get_parent(node).__children__;\r\n                            } else {\r\n                                _parent = scope.treeData;\r\n                            }\r\n\r\n                            _parent.splice(node.__index__, 1);\r\n\r\n                            if (tree.selected_node === node) {\r\n                                tree.selected_node = null;\r\n                            }\r\n                        }\r\n                    },\r\n                    expand_node:                       function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            node.__expanded__ = true;\r\n                            return node;\r\n                        }\r\n                    },\r\n                    collapse_node:                     function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            node.__expanded__ = false;\r\n                            return node;\r\n                        }\r\n                    },\r\n                    get_selected_node:                 function () {\r\n                        return tree.selected_node;\r\n                    },\r\n                    get_first_node:                    function () {\r\n                        len = scope.treeData.length;\r\n                        if (len > 0) {\r\n                            return scope.treeData[0];\r\n                        }\r\n                        return null;\r\n                    },\r\n                    get_children:                      function (node) {\r\n                        return node.__children__;\r\n                    },\r\n                    get_siblings:                      function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            _parent = tree.get_parent(node);\r\n                            if (_parent) {\r\n                                _target = _parent.__children__;\r\n                            } else {\r\n                                _target = scope.treeData;\r\n                            }\r\n                            return _target;\r\n                        }\r\n                    },\r\n                    get_next_sibling:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            _target = tree.get_siblings(node);\r\n                            n = _target.length;\r\n                            if (node.__index__ < n) {\r\n                                return _target[node.__index__ + 1];\r\n                            }\r\n                        }\r\n                    },\r\n                    get_prev_sibling:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n                        _target = tree.get_siblings(node);\r\n                        if (node.__index__ > 0) {\r\n                            return _target[node.__index__ - 1];\r\n                        }\r\n                    },\r\n                    get_first_child:                   function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            _target = node.__children__;\r\n                            if (_target && _target.length > 0) {\r\n                                return node.__children__[0];\r\n                            }\r\n                        }\r\n                        return null;\r\n                    },\r\n                    get_closest_ancestor_next_sibling: function (node) {\r\n                        node = node || tree.selected_node;\r\n                        _target = tree.get_next_sibling(node);\r\n                        if (_target) {\r\n                            return _target;\r\n                        }\r\n\r\n                        _parent = tree.get_parent(node);\r\n                        return tree.get_closest_ancestor_next_sibling(_parent);\r\n                    },\r\n                    get_next_node:                     function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_first_child(node);\r\n                            if (_target) {\r\n                                return _target;\r\n                            } else {\r\n                                return tree.get_closest_ancestor_next_sibling(node);\r\n                            }\r\n                        }\r\n                    },\r\n                    get_prev_node:                     function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_prev_sibling(node);\r\n                            if (_target) {\r\n                                return tree.get_last_descendant(_target);\r\n                            }\r\n\r\n                            _parent = tree.get_parent(node);\r\n                            return _parent;\r\n                        }\r\n                    },\r\n                    get_last_descendant:               scope.getLastDescendant,\r\n                    select_parent_node:                function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _parent = tree.get_parent(node);\r\n                            if (_parent) {\r\n                                return tree.select_node(_parent);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_first_node:                 function () {\r\n                        return tree.select_node(tree.get_first_node());\r\n                    },\r\n                    select_next_sibling:               function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_next_sibling(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_prev_sibling:               function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_prev_sibling(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_next_node:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_next_node(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_prev_node:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_prev_node(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    reset_selected_nodes:                  function (node) {\r\n                        $rootScope.resetNodesSelected();\r\n                    }\r\n                };\r\n                angular.extend(scope.tree, tree);\r\n                return scope.tree;\r\n            };\r\n\r\n        return _$init;\r\n    }\r\n);\n\nangular.module('template/TreeDnD/TreeDnD.html', []).run(\r\n    [\r\n        '$templateCache', function ($templateCache) {\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnD.html',\r\n            [\"<table ng-class=\\\"$tree_class\\\">\",\r\n             \"    <thead>\",\r\n             \"  <tr>\",\r\n             \"     <th ng-class=\\\"expandingProperty.titleClass\\\" ng-style=\\\"expandingProperty.titleStyle\\\">\",\r\n             \"         {{expandingProperty.displayName || expandingProperty.field || expandingProperty}}\",\r\n             \"        <\\/th>\",\r\n             \"        <th ng-repeat=\\\"col in colDefinitions\\\" ng-class=\\\"col.titleClass\\\" ng-style=\\\"col.titleStyle\\\">\",\r\n             \"         {{col.displayName || col.field}}\",\r\n             \"     </th>\",\r\n             \"    </tr>\",\r\n             \"    </thead>\",\r\n             \" <tbody tree-dnd-nodes=\\\"tree_nodes\\\">\",\r\n             \"  <tr tree-dnd-node=\\\"node\\\" ng-repeat=\\\"node in nodes track by node.__hashKey__ \\\" ng-show=\\\"node.__visible__\\\"\",\r\n             \"       ng-click=\\\"onSelect(node)\\\" ng-class=\\\"(node.__selected__ ? ' active':'')\\\">\",\r\n             \"        <td ng-if=\\\"!expandingProperty.template\\\" tree-dnd-node-handle\",\r\n             \"         ng-style=\\\"expandingProperty.cellStyle ? expandingProperty.cellStyle : {'padding-left': $callbacks.calsIndent(node.__level__)}\\\"\",\r\n             \"          ng-class=\\\"expandingProperty.cellClass\\\"\",\r\n             \"            compile=\\\"expandingProperty.cellTemplate\\\">\",\r\n             \"              <a data-nodrag>\",\r\n             \"                  <i ng-class=\\\"$icon_class\\\" ng-click=\\\"toggleExpand(node)\\\"\",\r\n             \"                     class=\\\"tree-icon\\\"></i>\",\r\n             \"              </a>\",\r\n             \"             {{node[expandingProperty.field] || node[expandingProperty]}}\",\r\n             \"       </td>\",\r\n             \"        <td ng-if=\\\"expandingProperty.template\\\" compile=\\\"expandingProperty.template\\\"></td>\",\r\n             \"        <td ng-repeat=\\\"col in colDefinitions\\\" ng-class=\\\"col.cellClass\\\" ng-style=\\\"col.cellStyle\\\"\",\r\n             \"            compile=\\\"col.cellTemplate\\\">\",\r\n             \"            {{node[col.field]}}\",\r\n             \"       </td>\",\r\n             \"    </tr>\",\r\n             \"    </tbody>\",\r\n             \"</table>\"].join('')\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusCopy.html',\r\n            \"<label><i class=\\\"fa fa-copy\\\"></i>&nbsp;<b>Copying</b></label>\"\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusMove.html',\r\n            '<label><i class=\"fa fa-file-text\"></i>&nbsp;<b>Moving</b></label>'\r\n        );\r\n    }]\r\n);\r\n\r\n}).call(window);"]}