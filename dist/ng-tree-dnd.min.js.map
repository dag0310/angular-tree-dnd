{"version":3,"sources":["ng-tree-dnd.js"],"names":["angular","isUndefinedOrNull","val","isUndefined","isDefined","module","constant","tree","empty","hidden","node","nodes","handle","place","drag","status","icon","1","0","-1","factory","_$initConvert","line2tree","data","primaryKey","parentKey","length","parentId","parent","rootIds","item","_primary","treeObjs","len","i","__children__","push","tree2tree","access_child","_i","_copy","_child","_tree","_len","copy","isArray","$document","$window","_$helper","nodrag","targetElm","attr","eventObj","e","obj","undefined","targetTouches","originalEvent","dragInfo","scope","_node","getData","getScopeTree","_parent","getNode","__parent_real__","move","pos","__index__","target","drop","getPrevSibling","changed","height","element","prop","width","offset","boundingClientRect","getBoundingClientRect","top","pageYOffset","body","scrollTop","documentElement","left","pageXOffset","scrollLeft","positionStarted","offsetX","pageX","this","offsetY","pageY","startX","lastX","startY","lastY","nowX","nowY","distX","distY","dirAx","dirX","dirY","lastDirX","lastDirY","distAxX","distAxY","positionMoved","firstMoving","newAx","Math","abs","moving","replaceIndent","indent","children","css","$callbacks","calsIndent","$injector","_fnget","name","has","get","$templateCache","temp","templatePath","copyPath","movePath","scopes","_$init","setMove","path","$id","setCopy","getPath","getCopy","getMove","directive","$compile","restrict","link","attrs","$watch","compile","new_val","new_elem","isFunction","html","append","compileReplace","replaceWith","$element","$type","$class","addClass","replace","_enabledDragDrop","dragEnabled","dropEnabled","$modelValue","$icon_class","$node_class","treeDndNode","newValue","oldValue","setScope","__icon__","getScopeNode","getElementChilds","querySelector","$nodes_class","treeDndNodes","$timeout","$http","$TreeDnDTemplate","$TreeDnDClass","$TreeDnDHelper","$TreeDnDPlugin","controller","$scope","$attrs","indent_plus","indent_unit","$tree_class","primary_key","hasMultiSelect","colDefinitions","$globals","treeData","tree_nodes","sycning","extend","iconExpand","iconCollapse","iconLeaf","for_all_descendants","fn","_nodes","getLastDescendant","last_child","n","selected_node","onClick","on_click","setTimeout","onSelect","select_node","on_select","passedExpand","_clone","toggleExpand","fnCallback","expand","__expanded__","getHash","__parent__","__uid__","accept","moveTo","isChanged","level","skipUnit","skipEdge","unit","edge","droppable","draggable","beforeDrop","event","changeKey","_key","random","__selected__","clone","_this","remove","splice","add","enableDrag","enableDrop","placeElm","horizontal","dragDelay","enabledMove","statusMove","enabledHotkey","enabledCollapse","statusElm","dragging","beforeDrag","scopeDrag","dragStop","skiped","dropped","info","pass","isMove","_nodeAdd","_move","_parentRemove","_parentAdd","dragStart","dragMove","setDragging","enableMove","enableStatus","enabledStatus","hideStatus","refreshStatus","statusElmOld","find","removeClass","setPositionStatus","z-index","targeting","_index","index","_hash","getScope","initPlace","dragElm","tagName","isTable","toLowerCase","document","createElement","_len_down","parentNode","insertBefore","hidePlace","showPlace","$safeApply","phase","$root","$$phase","$apply","tElement","tAttrs","$_Template","_element","trim","_fnInitFilter","_fnInitOrderBy","_fnGetControl","_fnInitDrag","w","_curW","_typeW","_nameW","_defaultW","_scopeW","_NotW","_AfterW","_BeforeW","getExpandOn","_firstNode","_keys","Object","keys","_regex","RegExp","test","expandingProperty","getColDefs","_col_defs","field","do_f","root","parent_real","visible","_icon","_index_real","_dept","_hashKey","expandLevel","__index_real__","__level__","__visible__","__hashKey__","__dept__","reload_data","oData","_data","_tree_nodes","expandOn","columnDefs","orderBy","filter","filterOptions","_offset","_max","_min","_deptTotal","_defaultFilterOption","showParent","showChild","beginAnd","check_exist_attr","existAttr","isAnd","for_each_attrs","exist","passed","generateWatch","type","nameAttr","valDefault","nameScope","fnNotExist","fnAfter","fnBefore","old","indexOf","_watches","isHotkey","templateCopy","_url","templateMove","treeClass","$tree","colDefs","filters","_passed","_iF","_keysF","_lenF","enabledFilter","option","indentUnit","optCallbacks","forEach","value","key","lenW","templateUrl","cache","success","$filter","_filter","_state","options","fieldChild","parentPassed","_nodePassed","_childPassed","_fnCheck","callback","check","err","_fnProccess","condition","for_each_filter","_iO","_keysO","_lenO","_callback","conditions","_fnAfter","isNodePassed","isChildPassed","isParentPassed","__filtered__","__filtered_visible__","_fnBefore","_fnConvert","isObject","_fnMain","_options","_fnOrderBy","fnOrderBy","_fnOrder","list","isString","_fnDragEnd","holderWasShown","nodesSelected","lastSelectedNode","resetNodesSelected","__selected","_fnPlaceHolder","$params","_fnDragStart","hasTouch","button","which","uiTreeDragging","eventElm","eventScope","dragScope","eventElmTagName","_$scope","preventDefault","offsetEdge","_width","_scope","_needCollapse","_copied","_tbody","_holder","_swaper","after","bind","dragEndEvent","dragMoveEvent","dragCancelEvent","document_height","max","scrollHeight","offsetHeight","clientHeight","document_width","scrollWidth","offsetWidth","clientWidth","currentNode","$parent","ctrlKey","shiftKey","groupNodes","lastSelectedNodeIdx","includes","newSelectedNodeIdx","lowerIdx","higherIdx","idx","every","_fnDragMove","dragStarted","dragDelaying","getSelection","removeAllRanges","selection","leftElmPos","topElmPos","top_scroll","window","bottom_scroll","innerHeight","scrollBy","targetScope","targetBefore","targetOffset","isEmpty","isSwapped","_target","fnSwapTree","targetX","targetY","isVeritcal","_info","_drag","_drop","treeScope","isHolder","elementFromPoint","abortDrag","$$apply","_height","_prev","dragBorder","prepend","_isTable","_status","__multipleNodes","_fnBindDrag","unbind","_fnDragStartEvent","dragTimer","cancel","_fnKeydownHandler","keyCode","_fnKeyupHandler","bindDrag","dragEnd","keydownHandler","keyupHandler","$on","fnSetCollapse","fnSetExpand","expand_all_parents","deselect_node","get_parent","for_all_ancestors","child","add_node","new_node","add_node_root","expand_all","collapse_all","remove_node","expand_node","collapse_node","get_selected_node","get_first_node","get_children","get_siblings","get_next_sibling","get_prev_sibling","get_first_child","get_closest_ancestor_next_sibling","get_next_node","get_prev_node","get_last_descendant","select_parent_node","select_first_node","select_next_sibling","select_prev_sibling","select_next_node","select_prev_node","run","put","join","call"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+BA,WACI,YACAA,SAAQC,kBAAoB,SAAUC,GAClC,MAAOF,SAAQG,YAAYD,IAAgB,OAARA,GAGvCF,QAAQI,UAAY,SAAUF,GAC1B,QAASF,QAAQG,YAAYD,IAAgB,OAARA,IAGzCF,QAAQK,OAAO,eAAgB,kCAAkCC,SAC7D,iBACIC,KAAQ,WACRC,MAAQ,iBACRC,OAAQ,kBACRC,KAAQ,gBACRC,MAAQ,iBACRC,OAAQ,kBACRC,MAAQ,uBACRC,KAAQ,gBACRC,OAAQ,kBACRC,MACIC,EAAM,4BACNC,EAAM,2BACNC,KAAM,8BAGhBC,QACF,kBAAmB,WACf,GAAIC,IACAC,UAAW,SAAUC,EAAMC,EAAYC,GACnC,IAAKF,GAAwB,IAAhBA,EAAKG,SAAiBF,IAAeC,EAC9C,QAUJ,KARA,GAKIE,GAAUC,EALVrB,KACAsB,KACAC,EAAOP,EAAK,GACZQ,EAAWD,EAAKN,GAChBQ,KAEAC,EAAMV,EAAKG,OACXQ,EAAI,EACDA,EAAID,GACPH,EAAOP,EAAKW,KACZH,EAAWD,EAAKN,GAChBQ,EAASD,GAAYD,EACrBH,EAAWG,EAAKL,GACZE,GACAC,EAASI,EAASL,GACdC,EAAOO,aACPP,EAAOO,aAAaC,KAAKN,GAEzBF,EAAOO,cAAgBL,IAG3BD,EAAQO,KAAKL,EAIrB,KADAE,EAAMJ,EAAQH,OACTQ,EAAI,EAAGA,EAAID,EAAKC,IACjB3B,EAAK6B,KAAKJ,EAASH,EAAQK,IAE/B,OAAO3B,IAEX8B,UAAW,SAAUd,EAAME,GACvB,GAAIa,GAAe,SAAUf,GACzB,GACIgB,GAAwBC,EAAOC,EAD/BC,KACIC,EAAOpB,EAAKG,MACpB,KAAKa,EAAK,EAAGA,EAAKI,EAAMJ,IACpBC,EAAQxC,QAAQ4C,KAAKrB,EAAKgB,IACtBvC,QAAQ6C,QAAQL,EAAMf,KAAee,EAAMf,GAAWC,OAAS,IAC/De,EAASH,EAAaE,EAAMf,UACrBe,GAAMf,GACbe,EAAML,aAAeM,GAEzBC,EAAMN,KAAKI,EAEf,OAAOE,GAGX,OAAOJ,GAAaf,IAI5B,OAAOF,KAEbD,QACE,kBACI,YAAa,UAAW,SAAU0B,EAAWC,GACzC,GAAIC,IACAC,OAAiB,SAAUC,GACvB,MAAkD,mBAAnCA,GAAUC,KAAK,gBAElCC,SAAiB,SAAUC,GACvB,GAAIC,GAAMD,CAMV,OALwBE,UAApBF,EAAEG,cACFF,EAAMD,EAAEG,cAAc1B,KAAK,GACAyB,SAApBF,EAAEI,eAAiEF,SAAlCF,EAAEI,cAAcD,gBACxDF,EAAMD,EAAEI,cAAcD,cAAc1B,KAAK,IAEtCwB,GAEXI,SAAiB,SAAUC,GACvB,GAAIC,GAAQD,EAAME,UACdnB,EAAQiB,EAAMG,eACdC,EAAUJ,EAAMK,QAAQJ,EAAMK,gBAClC,QACIvD,KAASkD,EACThC,OAASmC,EACTG,MACItC,OAAQmC,EACRI,IAAQP,EAAMQ,WAElBT,MAASA,EACTU,OAAS3B,EACT5B,KAAS4B,EACT4B,KAASX,EAAMY,eAAeX,GAC9BY,SAAS,IAGjBC,OAAiB,SAAUC,GACvB,MAAOA,GAAQC,KAAK,iBAExBC,MAAiB,SAAUF,GACvB,MAAOA,GAAQC,KAAK,gBAExBE,OAAiB,SAAUH,GACvB,GAAII,GAAqBJ,EAAQ,GAAGK,uBACpC,QACIH,MAAQF,EAAQC,KAAK,eACrBF,OAAQC,EAAQC,KAAK,gBACrBK,IAAQF,EAAmBE,KAAOjC,EAAQkC,aAAenC,EAAU,GAAGoC,KAAKC,WAAarC,EAAU,GAAGsC,gBAAgBD,WACrHE,KAAQP,EAAmBO,MAAQtC,EAAQuC,aAAexC,EAAU,GAAGoC,KAAKK,YAAczC,EAAU,GAAGsC,gBAAgBG,cAG/HC,gBAAiB,SAAUnC,EAAGgB,GAC1B,GAAIF,KAOJ,OANAA,GAAIsB,QAAUpC,EAAEqC,MAAQC,KAAKd,OAAOR,GAAQgB,KAC5ClB,EAAIyB,QAAUvC,EAAEwC,MAAQF,KAAKd,OAAOR,GAAQW,IAC5Cb,EAAI2B,OAAS3B,EAAI4B,MAAQ1C,EAAEqC,MAC3BvB,EAAI6B,OAAS7B,EAAI8B,MAAQ5C,EAAEwC,MAC3B1B,EAAI+B,KAAO/B,EAAIgC,KAAOhC,EAAIiC,MAAQjC,EAAIkC,MAAQlC,EAAImC,MAAQ,EAC1DnC,EAAIoC,KAAOpC,EAAIqC,KAAOrC,EAAIsC,SAAWtC,EAAIuC,SAAWvC,EAAIwC,QAAUxC,EAAIyC,QAAU,EACzEzC,GAEX0C,cAAiB,SAAUxD,EAAGc,EAAK2C,GAE/B3C,EAAI4B,MAAQ5B,EAAI+B,KAChB/B,EAAI8B,MAAQ9B,EAAIgC,KAEhBhC,EAAI+B,KAAO7C,EAAEqC,MACbvB,EAAIgC,KAAO9C,EAAEwC,MAEb1B,EAAIiC,MAAQjC,EAAI+B,KAAO/B,EAAI4B,MAC3B5B,EAAIkC,MAAQlC,EAAIgC,KAAOhC,EAAI8B,MAE3B9B,EAAIsC,SAAWtC,EAAIoC,KACnBpC,EAAIuC,SAAWvC,EAAIqC,KAEnBrC,EAAIoC,KAAqB,IAAdpC,EAAIiC,MAAc,EAAIjC,EAAIiC,MAAQ,EAAI,KACjDjC,EAAIqC,KAAqB,IAAdrC,EAAIkC,MAAc,EAAIlC,EAAIkC,MAAQ,EAAI,IAEjD,IAAIU,GAAQC,KAAKC,IAAI9C,EAAIiC,OAASY,KAAKC,IAAI9C,EAAIkC,OAAS,EAAI,CAE5D,OAAIS,IACA3C,EAAImC,MAAQS,OACZ5C,EAAI+C,QAAS,KAIb/C,EAAImC,QAAUS,GACd5C,EAAIwC,QAAU,EACdxC,EAAIyC,QAAU,IAEdzC,EAAIwC,SAAWK,KAAKC,IAAI9C,EAAIiC,OACX,IAAbjC,EAAIoC,MAAcpC,EAAIoC,OAASpC,EAAIsC,WACnCtC,EAAIwC,QAAU,GAElBxC,EAAIyC,SAAWI,KAAKC,IAAI9C,EAAIkC,OACX,IAAblC,EAAIqC,MAAcrC,EAAIqC,OAASrC,EAAIuC,WACnCvC,EAAIyC,QAAU,SAGtBzC,EAAImC,MAAQS,KAEhBI,cAAiB,SAAUxD,EAAOe,EAAS0C,EAAQjE,GAC/CA,EAAOA,EAAOA,EAAO,OACrBnD,QAAQ0E,QAAQA,EAAQ2C,WAAW,IAAIC,IAAInE,EAAMQ,EAAM4D,WAAWC,WAAWJ,KAGrF,OAAOpE,MAEjB5B,QACE,kBAAkB,YAAa,SAAUqG,GACrC,GAAIC,GAAS,SAAUC,GACf,MAAI3H,SAAQI,UAAUqH,IAAcA,EAAUG,IAAID,GACvCF,EAAUI,IAAIF,GAElB,KAEf,OAAOD,MAEbtG,QACE,oBACI,iBAAkB,SAAU0G,GACxB,GAIIC,GAJAC,EAAe,gCACfC,EAAW,0CACXC,EAAW,0CACXC,KAEAC,GACIC,QAAS,SAAUC,EAAM3E,GAChBwE,EAAOxE,EAAM4E,OACdJ,EAAOxE,EAAM4E,SAEjBJ,EAAOxE,EAAM4E,KAAKL,SAAWI,GAEjCE,QAAS,SAAUF,EAAM3E,GAChBwE,EAAOxE,EAAM4E,OACdJ,EAAOxE,EAAM4E,SAEjBJ,EAAOxE,EAAM4E,KAAKN,SAAWK,GAEjCG,QAAS,WACL,MAAOT,IAEXU,QAAS,SAAU/E,GACf,MAAIwE,GAAOxE,EAAM4E,MAAQJ,EAAOxE,EAAM4E,KAAKN,WACvCF,EAAOD,EAAeD,IAAIM,EAAOxE,EAAM4E,KAAKN,WAEjCF,EAGRD,EAAeD,IAAII,IAE9BU,QAAS,SAAUhF,GACf,MAAIwE,GAAOxE,EAAM4E,MAAQJ,EAAOxE,EAAM4E,KAAKL,WACvCH,EAAOD,EAAeD,IAAIM,EAAOxE,EAAM4E,KAAKL,WAEjCH,EAGRD,EAAeD,IAAIK,IAItC,OAAOE,MAEjBQ,UACE,WACI,WAAY,SAAUC,GAClB,OACIC,SAAU,IACVC,KAAU,SAAUpF,EAAOe,EAASsE,GAChCrF,EAAMsF,OACFD,EAAME,QAAS,SAAUC,GACrB,GAAIA,EAAS,CAKT,GAAIJ,GAAOF,EAASM,GAKhBC,EAAWL,EAAKpF,EAEjB3D,SAAQqJ,WAAW3E,EAAQlE,OAC1BkE,EAAQlE,QAERkE,EAAQ4E,KAAK,IAGjB5E,EAAQ6E,OAAOH,WAQ1CR,UACD,kBACI,WAAY,SAAUC,GAClB,OACIC,SAAU,IACVC,KAAU,SAAUpF,EAAOe,EAASsE,GAChCrF,EAAMsF,OACFD,EAAMQ,eAAgB,SAAUL,GAC5B,GAAIA,EAAS,CAKT,GAAIJ,GAAOF,EAASM,GAKhBC,EAAWL,EAAKpF,EAEpBe,GAAQ+E,YAAYL,WAOlDR,UACE,oBAAqB,WACjB,OACIE,SAAU,IACVnF,OAAU,EACVoF,KAAU,SAAUpF,EAAOe,EAASsE,GAChCrF,EAAM+F,SAAWhF,EACjBf,EAAMgG,MAAQ,oBACVhG,EAAMiG,OAAOhJ,QACb8D,EAAQmF,SAASlG,EAAMiG,OAAOhJ,YAKhDgI,UACE,cAAe,WACX,OACIE,SAAU,IACVgB,SAAU,EACVf,KAAU,SAAUpF,EAAOe,EAASsE,GAChC,GAAIe,GAAiD,iBAAtBpG,GAAMqG,aAA0D,iBAAtBrG,GAAMsG,WAC/EtG,GAAMuG,YAAc,KACpBvG,EAAMwG,YAAc,GACpBxG,EAAMyG,YAAc,GAEhBzG,EAAMiG,OAAOlJ,OACbgE,EAAQmF,SAASlG,EAAMiG,OAAOlJ,MAC9BiD,EAAMyG,YAAczG,EAAMiG,OAAOlJ,MAGrCiD,EAAMsF,OACFD,EAAMqB,YAAa,SAAUC,EAAUC,EAAU5G,GACzCoG,GACApG,EAAM6G,SAAS7G,EAAO2G,GAE1B3G,EAAMuG,YAAcI,EACpB3G,EAAMwG,YAAcxG,EAAMiG,OAAO5I,KAAKsJ,EAASG,YAChD,GAGHV,IAEApG,EAAM+F,SAAWhF,EACjBf,EAAMgG,MAAQ,cAEdhG,EAAM+G,aAAe,WACjB,MAAO/G,IAGXA,EAAME,QAAU,WACZ,MAAOF,GAAMuG,aAGjBvG,EAAMgH,iBAAmB,WACrB,MAAO3K,SAAQ0E,QAAQA,EAAQ,GAAGkG,cAAc,2BAMtEhC,UACE,eAAgB,WACZ,OACIE,SAAU,IACVgB,SAAU,EACVf,KAAU,SAAUpF,EAAOe,EAASsE,GAChCrF,EAAMhD,SACNgD,EAAMkH,aAAe,GACrBlH,EAAMgG,MAAQ,eACdhG,EAAM+F,SAAWhF,EACjBf,EAAM+G,aAAe,KAErB/G,EAAMsF,OACFD,EAAM8B,aAAc,SAAUR,EAAUC,EAAU5G,GAC9CA,EAAMhD,MAAQ2J,IACf,GAGH3G,EAAMiG,OAAOjJ,QACb+D,EAAQmF,SAASlG,EAAMiG,OAAOjJ,OAC9BgD,EAAMkH,aAAelH,EAAMiG,OAAOjJ,WAKpDiI,UACE,WACI,YAAa,WAAY,QAAS,WAAY,UAAW,YAAa,iBACtE,mBAAoB,gBAAiB,iBAAkB,iBACvD,SAAUnB,EAAWsD,EAAUC,EAAOnC,EAAU9F,EAASD,EAAWgF,EAC1DmD,EAAkBC,EAAeC,EAAgBC,GACvD,OACItC,SAAY,IACZnF,OAAY,EACZmG,SAAY,EACZuB,YACI,SAAU,WAAY,SAAU,SAAUC,EAAQ5B,EAAU6B,GACxDD,EAAOlE,OAAS,GAChBkE,EAAOE,YAAc,GACrBF,EAAOG,YAAc,KACrBH,EAAOI,YAAc,QACrBJ,EAAOK,YAAc,UACrBL,EAAOM,eAA2C,SAA1BL,EAAOK,eAE/BN,EAAO3B,MAAQ,UAEf2B,EAAOO,kBACPP,EAAOQ,YACPR,EAAO1B,UAEP0B,EAAOS,YACPT,EAAOU,cAEPV,EAAOW,SAAU,EAEjBX,EAAO1B,OAAS5J,QAAQ4C,KAAKsI,GAC7BlL,QAAQkM,OACJZ,EAAO1B,OAAO5I,MACVC,EAAMsK,EAAOY,YAAc,4BAC3BjL,EAAMqK,EAAOa,cAAgB,2BAC7BjL,KAAMoK,EAAOc,UAAY,6BAIjCf,EAAOgB,oBAAsB,SAAU5L,EAAM6L,GACzC,GAAIvM,QAAQqJ,WAAWkD,GAAK,CACxB,GAAIhK,GAAII,EAAM6J,CAEd,IAAID,EAAG7L,GACH,OAAO,CAIX,KAFA8L,EAAS9L,EAAKyB,aACdQ,EAAO6J,EAAO9K,OACTa,EAAK,EAAGA,EAAKI,EAAMJ,IACpB,IAAK+I,EAAOgB,oBAAoBE,EAAOjK,GAAKgK,GACxC,OAAO,EAInB,OAAO,GAGXjB,EAAOmB,kBAAoB,SAAU/L,GACjC,GAAIgM,GAAYC,CAIhB,OAHKjM,KACDA,IAAO4K,EAAO/K,MAAO+K,EAAO/K,KAAKqM,eAElClM,KAAS,IAGZiM,EAAIjM,EAAKyB,aAAaT,OACZ,IAANiL,EACOjM,GAEPgM,EAAahM,EAAKyB,aAAawK,EAAI,GAC5BrB,EAAOmB,kBAAkBC,MAIxCpB,EAAOX,iBAAmB,WACtB,MAAO3K,SAAQ0E,QAAQgF,EAAS,GAAGkB,cAAc,sBAGrDU,EAAOuB,QAAU,SAAUnM,GACnBV,QAAQI,UAAUkL,EAAO/K,OAASP,QAAQqJ,WAAWiC,EAAO/K,KAAKuM,WAGjEC,WACI,WACIzB,EAAO/K,KAAKuM,SAASpM,IACtB,IAKf4K,EAAO0B,SAAW,SAAUtM,GACpBV,QAAQI,UAAUkL,EAAO/K,QACrBG,IAAS4K,EAAO/K,KAAKqM,eACrBtB,EAAO/K,KAAK0M,YAAYvM,GAGxBV,QAAQqJ,WAAWiC,EAAO/K,KAAK2M,YAC/BH,WACI,WACIzB,EAAO/K,KAAK2M,UAAUxM,IACvB,IAMnB,IAAIyM,GAAcC,CAClB9B,GAAO+B,aAAe,SAAU3M,EAAM4M,GAClCH,GAAe,EACXnN,QAAQqJ,WAAWiE,KAAgBA,EAAW5M,GAC9CyM,GAAe,EACRnN,QAAQqJ,WAAWiC,EAAO/D,WAAWgG,UAAYjC,EAAO/D,WAAWgG,OAAO7M,KACjFyM,GAAe,GAGfA,GACIzM,EAAKyB,aAAaT,OAAS,IAC3BhB,EAAK8M,cAAgB9M,EAAK8M,eAKtClC,EAAOmC,QAAU,SAAU/M,GACvB,MAA2B,YAAvB4K,EAAOK,YACA,IAAMjL,EAAKgN,WAAa,IAAMhN,EAAKiN,QAEnC,IAAMjN,EAAKgN,WAAa,IAAMhN,EAAK4K,EAAOK,cAIzDL,EAAO/D,YACH+E,oBAAqBhB,EAAOgB,oBAC5BiB,OAAqB,SAAU7M,GAC3B,OAAO,GAEXkN,OAAqB,SAAUlK,EAAUmK,EAAQC,GAC7C,MAAOxC,GAAOrB,eAAgB,GAElCzC,WAAqB,SAAUuG,EAAOC,EAAUC,GAC5C,GAAIC,GAAO,EACPC,EAAOF,EAAW,EAAI3C,EAAOE,WAKjC,OAJKwC,KACDE,EAAO5C,EAAOG,YAAcH,EAAOG,YAAc,MAGjDsC,EAAQ,EAAI,EACLI,EAAOD,EAEP5C,EAAOlE,QAAU2G,EAAQ,GAAKI,EAAOD,GAGpDE,UAAqB,WACjB,MAAO9C,GAAOrB,eAAgB,GAElCoE,UAAqB,WACjB,MAAO/C,GAAOtB,eAAgB,GAElCsE,WAAqB,SAAUC,GAC3B,OAAO,GAEXC,UAAqB,SAAU9N,GAC3B,GAAI+N,GAAO/N,EAAKiN,OAChBjN,GAAKiN,QAAU3G,KAAK0H,SAChBhO,EAAKiO,oBACEjO,GAAiB,aAGD,YAAvB4K,EAAOK,cACP8C,EAAO,GAAK/N,EAAK4K,EAAOK,aACxB8C,EAAOA,EAAK3E,QAAQ,SAAU,IAAM,KAAOpJ,EAAKiN,QAEhDjN,EAAK4K,EAAOK,aAAe8C,IAInCG,MAAqB,SAAUlO,EAAMmO,GAGjC,MAFAzB,GAASpN,QAAQ4C,KAAKlC,GACtBiF,KAAK2G,oBAAoBc,EAAQzH,KAAK6I,WAC/BpB,GAEX0B,OAAqB,SAAUpO,EAAMkB,EAAQiN,GACzC,MAAOjN,GAAOmN,OAAOrO,EAAK0D,UAAW,GAAG,IAE5C4K,IAAqB,SAAUtO,EAAMyD,EAAKvC,EAAQiN,GAC1CjN,IACIA,EAAOF,WACHyC,KACAvC,EAAOmN,OAAO5K,EAAK,EAAGzD,GAM1BkB,EAAOQ,KAAK1B,OAMxB6K,EAAO0D,YAAc1D,EAAO2D,cAC5B5D,EAAO6D,SAAW,KAElB7D,EAAOtB,YAAc,KACrBsB,EAAOrB,YAAc,KACrBqB,EAAO8D,WAAa,KAEhB7D,EAAO0D,aAEP3D,EAAO+D,UAAY,EACnB/D,EAAOgE,aAAc,EACrBhE,EAAOiE,YAAa,EACpBjE,EAAOkE,eAAgB,EACvBlE,EAAOmE,gBAAkB,KACzBnE,EAAOoE,UAAY,KACnBpE,EAAOqE,SAAW,KAElB3P,QAAQkM,OACJZ,EAAO/D,YACHqI,WAAY,SAAUC,GAClB,OAAO,GAEXC,SAAY,SAAUvB,EAAOwB,KAC7BC,QAAY,SAAUC,EAAMC,EAAMC,GAC9B,IAAKF,EACD,MAAO,KAGX,KAAKA,EAAKzL,SAAW2L,EACjB,OAAO,CAEX,IAAIvM,GAAQqM,EAAKvP,KACb0P,EAAW,KACXC,EAAQJ,EAAK/L,KACbH,EAAU,KACVuM,EAAiBL,EAAKrO,QAAUqO,EAAKnP,KAAKiL,SAC1CwE,EAAcF,EAAMzO,QAAUqO,EAAK5L,OAAO0H,QAE9C,SAAIkE,EAAK5L,OAAOkD,WAAWqG,OAAOqC,EAAMA,EAAK/L,KAAM+L,EAAKzL,WAChD2L,GACApM,EAAUuM,EACNtQ,QAAQI,UAAU2D,EAAQ5B,gBAC1B4B,EAAUA,EAAQ5B,cAGtBiO,EAAWH,EAAKnP,KAAKyG,WAAWuH,OAC5BlL,EACAG,EACAkM,EAAKnP,KAAKyG,aAGd6I,EAAWH,EAAKnP,KAAKyG,WAAWqH,MAAMhL,EAAOqM,EAAKnP,KAAKyG,YAKvD4I,GACAF,EAAKnP,OAASmP,EAAK5L,QACnBiM,IAAkBC,GAClBF,EAAMlM,KAAO8L,EAAKvP,KAAK0D,WACvBiM,EAAMlM,MAGVJ,EAAUwM,EACNxM,EAAQ5B,eACR4B,EAAUA,EAAQ5B,cAGtB8N,EAAK5L,OAAOkD,WAAWyH,IACnBoB,EACAC,EAAMlM,IACNJ,EACAkM,EAAKnP,KAAKyG,aAGP,IAKfiJ,UAAY,SAAUjC,KACtBkC,SAAY,SAAUlC,OAI9BjD,EAAOoF,YAAc,SAAUhN,GAC3B4H,EAAOqE,SAAWjM,GAGtB4H,EAAOqF,WAAa,SAAUzQ,GACP,iBAARA,GACPoL,EAAOgE,YAAcpP,EAErBoL,EAAOgE,aAAc,GAIzB/D,EAAOqF,eACPtF,EAAOuF,eAAgB,EAEvBvF,EAAOwF,WAAa,WACZxF,EAAOoE,WACPpE,EAAOoE,UAAU7F,SAASyB,EAAO1B,OAAOnJ,SAIhD6K,EAAOyF,cAAgB,WACnB,GAAKzF,EAAOqE,UAIRrE,EAAOuF,cAAe,CACtB,GAAIG,GAAe1F,EAAOoE,SACtBpE,GAAOgE,YACPhE,EAAOoE,UAAY1P,QAAQ0E,QAAQuG,EAAiBtC,QAAQ2C,IAE5DA,EAAOoE,UAAY1P,QAAQ0E,QAAQuG,EAAiBvC,QAAQ4C,IAG5D0F,IAAiB1F,EAAOoE,YACpBsB,IACA1F,EAAOoE,UAAUvM,KAAK,QAAS6N,EAAa7N,KAAK,UACjDmI,EAAOoE,UAAUvM,KAAK,QAAS6N,EAAa7N,KAAK,UACjD6N,EAAalC,UAEjBhM,EAAUmO,KAAK,QAAQ1H,OAAO+B,EAAOoE,YAIzCpE,EAAOoE,UAAUwB,YAAY5F,EAAO1B,OAAOnJ,UAInD6K,EAAO6F,kBAAoB,SAAU9N,GAC7BiI,EAAOoE,YACPpE,EAAOoE,UAAUpI,KAETjC,KAAWhC,EAAEqC,MAAQ,GAAK,KAC1BV,IAAW3B,EAAEwC,MAAQ,GAAK,KAC1BuL,UAAW,OAGnB9F,EAAOoE,UAAU7F,SAASyB,EAAO1B,OAAO7I,YAMxDuK,EAAO+F,WAAY,EAEnB/F,EAAO/G,eAAiB,SAAU7D,GAC9B,GAAIA,GAAQA,EAAK0D,UAAY,EAAG,CAC5B,GAAIL,GAASuN,EAAS5Q,EAAK0D,UAAY,CAEvC,OAAIpE,SAAQI,UAAUM,EAAKuD,kBACvBF,EAAUuH,EAAOU,WAAWtL,EAAKuD,iBAC1BF,EAAQ5B,aAAamP,IAEzBhG,EAAOS,SAASuF,GAG3B,MAAO,OAGXhG,EAAOtH,QAAU,SAAUuN,GACvB,MAAIvR,SAAQC,kBAAkBsR,GACnB,KAEJjG,EAAOU,WAAWuF,IAG7BjG,EAAOd,SAAW,SAAU7G,EAAOjD,GAC/B,GAAI8Q,GAAQlG,EAAOmC,QAAQ/M,EACvB4K,GAAOQ,SAAS0F,KAAW7N,IAC3B2H,EAAOQ,SAAS0F,GAAS7N,IAIjC2H,EAAOmG,SAAW,SAAU/Q,GACxB,MAAIA,GACO4K,EAAOQ,SAASR,EAAOmC,QAAQ/M,IAEnC4K,GAIXA,EAAOoG,UAAY,SAAUhN,EAASiN,GAElC,GAAIC,GAAU,KACVC,GAAU,CAUd,IARInN,GACAkN,EAAUlN,EAAQC,KAAK,WAAWmN,cAClCD,EAAuB,OAAZD,GAAgC,OAAZA,IAE/BA,EAAUtG,EAAOX,mBAAmBhG,KAAK,WAAWmN,cACpDD,EAAuB,UAAZD,GAAmC,UAAZA,IAGjCtG,EAAO6D,SAER,GAAI0C,EAAS,CACTvG,EAAO6D,SAAWnP,QAAQ0E,QAAQ3B,EAAQgP,SAASC,cAAc,MACjE,IAAIC,GAAY3G,EAAOO,eAAenK,MAOtC,KANA4J,EAAO6D,SAAS5F,OACZvJ,QAAQ0E,QAAQ3B,EAAQgP,SAASC,cAAc,OAC1CnI,SAASyB,EAAO1B,OAAOpJ,OACvBqJ,SAAS,YACTA,SAASyB,EAAO1B,OAAO/I,QAEzBoR,KAAc,GACjB3G,EAAO6D,SAAS5F,OACZvJ,QAAQ0E,QAAQ3B,EAAQgP,SAASC,cAAc,OAC1CnI,SAASyB,EAAO1B,OAAOpJ,OACvBqJ,SAASyB,EAAO1B,OAAO/I,YAIpCyK,GAAO6D,SAAWnP,QAAQ0E,QAAQ3B,EAAQgP,SAASC,cAAc,OAC5DnI,SAASyB,EAAO1B,OAAOpJ,OACvBqJ,SAASyB,EAAO1B,OAAO/I,MAepC,OAVI8Q,IACArG,EAAO6D,SAAS7H,IAAI,SAAU6D,EAAe1G,OAAOkN,GAAW,MAG/DjN,EACAA,EAAQ,GAAGwN,WAAWC,aAAa7G,EAAO6D,SAAS,GAAIzK,EAAQ,IAE/D4G,EAAOX,mBAAmBpB,OAAO+B,EAAO6D,UAGrC7D,EAAO6D,UAGlB7D,EAAO8G,UAAY,WACX9G,EAAO6D,UACP7D,EAAO6D,SAAStF,SAASyB,EAAO1B,OAAOnJ,SAI/C6K,EAAO+G,UAAY,WACX/G,EAAO6D,UACP7D,EAAO6D,SAAS+B,YAAY5F,EAAO1B,OAAOnJ,SAIlD6K,EAAOxH,aAAe,WAClB,MAAOwH,KAKfA,EAAOgH,WAAa,SAAU/F,GAC1B,GAAIgG,GAAQ5M,KAAK6M,MAAMC,OACT,YAAVF,GAAgC,YAAVA,EAClBhG,GAAsB,kBAAT,IACbA,IAGJ5G,KAAK+M,OAAOnG,MAK5BrD,QAAY,SAAiByJ,EAAUC,GAEnC,GAAIC,GAAa,GACbC,EAAWH,EAASrJ,OAAOyJ,MAM/B,OALID,GAASpR,OAAS,IAClBmR,EAAaC,EACbH,EAASrJ,KAAK,KAGX,SAAgB3F,EAAOe,EAASsE,GACnC,GAyCIgK,GACAC,EACAC,EACAC,EAmJA5S,EA6NA6S,EACAlR,EAAGD,EACHoR,EACAC,EAAQC,EAAQC,EAAWC,EAASC,EAAOC,EAASC,EA/ZpDC,EAAc,WACV,GAAIlQ,EAAMoI,UAAYpI,EAAMoI,SAASrK,OAAQ,CACzC,GAEIiB,GACAT,EAHA4R,EAAanQ,EAAMoI,SAAS,GAAIgI,EAAQC,OAAOC,KAAKH,GACpDI,EAAS,GAAIC,QAAO,yBAIxB,KAAKjS,EAAI,EAAGS,EAAOoR,EAAMrS,OAAQQ,EAAIS,EAAMT,IACvC,GAAsC,gBAA1B4R,GAAWC,EAAM7R,MAAsBgS,EAAOE,KAAKL,EAAM7R,IAEjE,YADAyB,EAAM0Q,kBAAoBN,EAAM7R,GAMpClC,SAAQC,kBAAkB0D,EAAM0Q,qBAChC1Q,EAAM0Q,kBAAoBN,EAAM,MAK5CO,EAAa,WAET,GAAI3Q,EAAMoI,SAASrK,OAAQ,CACvB,GAGIQ,GAAGS,EAHH4R,KAAgBT,EAAanQ,EAAMoI,SAAS,GAC5CmI,EAAS,GAAIC,QAAO,4BAA+BxQ,EAAM0Q,kBAAoB,MAC7EN,EAAQC,OAAOC,KAAKH,EAGxB,KAAK5R,EAAI,EAAGS,EAAOoR,EAAMrS,OAAQQ,EAAIS,EAAMT,IACD,gBAA1B4R,GAAWC,EAAM7R,KAAsBgS,EAAOE,KAAKL,EAAM7R,KACjEqS,EAAUnS,MAEFoS,MAAOT,EAAM7R,IAK7ByB,GAAMkI,eAAiB0I,IAO/BE,EAAO,SAAUC,EAAMhU,EAAMkB,EAAQ+S,EAAa5G,EAAO6G,EAASrD,GAC9D,GAAIhP,GAAII,EAAMkS,EAAOC,EAAaC,EAAOC,CAsCzC,IArCKhV,QAAQ6C,QAAQnC,EAAKyB,gBACtBzB,EAAKyB,iBAGTzB,EAAKuD,gBAAkB0Q,EACvBjU,EAAKgN,WAAa9L,EAClBe,EAAOjC,EAAKyB,aAAaT,OAErB1B,QAAQC,kBAAkBS,EAAK8M,eAAiB7K,EAAO,IACvDjC,EAAK8M,aAAeO,EAAQpK,EAAMsR,aAIlCJ,EADS,IAATlS,KAGIjC,EAAK8M,aACG,EAEA,EAIhBsH,EAAcJ,EAAKhT,OACnBhB,EAAK0D,UAAYmN,EACjB7Q,EAAKwU,eAAiBJ,EACtBpU,EAAKyU,UAAYpH,EACjBrN,EAAK+J,SAAWoK,EAChBnU,EAAK0U,cAAgBR,EAEjB5U,QAAQC,kBAAkBS,EAAKiN,WAC/BjN,EAAKiN,QAAU,GAAK3G,KAAK0H,UAG7BgG,EAAKtS,KAAK1B,GAGVqU,EAAQ,EACJpS,EAAO,EACP,IAAKJ,EAAK,EAAGA,EAAKI,EAAMJ,IACpBwS,GAASN,EACLC,EACAhU,EAAKyB,aAAaI,GACK,YAAtBoB,EAAMgI,YAA6BjL,EAAKiN,QAAUjN,EAAKiD,EAAMgI,aAC9DmJ,EACA/G,EAAQ,EACR6G,GAAWlU,EAAK8M,aAChBjL,EAcZ,OATAyS,GAAWrR,EAAM8J,QAAQ/M,IAErBV,QAAQC,kBAAkBS,EAAK2U,cAAgB3U,EAAK2U,cAAgBL,KACpEtU,EAAK2U,YAAcL,GAIvBtU,EAAK4U,SAAWP,EAETA,GAEXQ,EAAc,SAAUC,GACpB,GAAIC,GACA9S,EACA+S,IAEJ,IAAI1V,QAAQI,UAAUoV,GAAQ,CAC1B,IAAKxV,QAAQ6C,QAAQ2S,IAA2B,IAAjBA,EAAM9T,OACjC,QAEA+T,GAAQD,MAET,CAAA,IAAKxV,QAAQ6C,QAAQc,EAAMoI,WAAuC,IAA1BpI,EAAMoI,SAASrK,OAC1D,QAEA+T,GAAQ9R,EAAMoI,SAgClB,GA7BK/C,EAAM2M,UACP9B,IAGC7K,EAAM4M,YACPtB,IAGAtU,QAAQI,UAAUuD,EAAMkS,WACnB7V,QAAQqJ,WAAW4J,KACpBA,EAAiB7H,EAAe,oBAGhCpL,QAAQqJ,WAAW4J,KACnBwC,EAAQxC,EAAewC,EAAO9R,EAAMkS,WAIxC7V,QAAQI,UAAUuD,EAAMmS,UACnB9V,QAAQqJ,WAAW2J,KACpBA,EAAgB5H,EAAe,mBAG/BpL,QAAQqJ,WAAW2J,KACnByC,EAAQzC,EAAcyC,EAAO9R,EAAMmS,OAAQnS,EAAMoS,iBAIzDpT,EAAO8S,EAAM/T,OACTiB,EAAO,EAAG,CACV,GAAIJ,GACAyT,EAASC,EAAMC,EAAMnC,EACrBoC,EAAa,CAEjB,KAAK5T,EAAK,EAAGA,EAAKI,EAAMJ,IACpB4T,GAAc1B,EAAKiB,EAAaD,EAAMlT,GAAK,KAAM,KAAM,GAAG,EAAMA,EAQpE,IAJAwR,EAAQC,OAAOC,KAAKtQ,EAAMmI,UAC1BnJ,EAAOgB,EAAMmI,SAASpK,OACtBsU,EAAUrT,EAAOwT,EAED,IAAZH,EAGA,IAFAC,EAAOtT,EAAOqT,EACdE,EAAOD,EAAOjP,KAAKC,IAAI+O,GAClBzT,EAAK2T,EAAM3T,EAAK0T,EAAM1T,UAChBoB,GAAMmI,SAASiI,EAAMxR,IAWxC,MALIvC,SAAQI,UAAUuD,EAAMqI,mBACjBrI,GAAgB,WAG3BA,EAAMqI,WAAa0J,EACZA,GAEXU,GACIC,YAAY,EACZC,WAAY,EACZC,UAAY,GAGhBC,EAAmB,SAAUxN,EAAOyN,EAAWC,GAC3C,OAAI1W,QAAQC,kBAAkBwW,KAIZ,MAAdA,IAAsBzW,QAAQG,YAAY6I,EAAMyN,MAIhDzW,QAAQ6C,QAAQ4T,GACTE,EAAe3N,EAAOyN,EAAWC,GAD5C,UAIJC,EAAiB,SAAU3N,EAAO4N,EAAOF,GACrC,GAAIxU,GAAGD,EAAM2U,EAAMlV,OAAQmV,GAAS,CAEpC,IAAY,IAAR5U,EACA,MAAO,KAEX,KAAKC,EAAI,EAAGA,EAAID,EAAKC,IACjB,GAAIsU,EAAiBxN,EAAO4N,EAAM1U,IAAKwU,IAEnC,GADAG,GAAS,GACJH,EACD,OAAO,MAGX,IAAIA,EACA,OAAO,CAKnB,OAAOG,IAEXC,EAAgB,SAAUC,EAAMC,EAAUC,EAAYC,EAAWC,EAAYC,EAASC,GAElF,GADAH,EAAYA,GAAaF,EACL,gBAATD,IAAqB/W,QAAQ6C,QAAQkU,GAAO,CACnD,GAAI/W,QAAQqJ,WAAWgO,IAAaA,IAChC,MAE4B,iBAArBzE,GAAOoE,GACdrT,EAAMsF,OACF2J,EAAOoE,GAAW,SAAU9W,EAAKoX,EAAK3T,GACb,gBAAToT,UAA4B7W,KAAQ6W,GAC3C/W,QAAQ6C,QAAQkU,IAASA,EAAKQ,cAAerX,OAE9CyD,EAAMuT,GAAahX,EAEfF,QAAQqJ,WAAW4N,GACnBtT,EAAMuT,GAAaD,EAAW/W,GAE9ByD,EAAMuT,GAAaD,EAIvBjX,QAAQqJ,WAAW+N,IACnBA,EAAQzT,EAAMuT,GAAYvT,KAE/B,GAIH3D,QAAQqJ,WAAW8N,GACnBxT,EAAMuT,GAAaC,IACXnX,QAAQG,YAAYgX,KAC5BxT,EAAMuT,GAAaC,KAKnCK,IAEQ,eACC,UAAW,eAAgB,KAAM,kBACjC,UAAW,aAAc,KAAM,gBAC/B,SAAU,YAAa,EAAG,KAAM,IAChC,UAAW,iBAAkB,KAAM,oBAEhC,UAAW,eAAgB,KAAM,gBAAiB,KAAM,SAAUC,GAC9DA,EACA9T,EAAM2L,aAAc,EAEpB3L,EAAM2L,YAAc3L,EAAM4L,iBAKjC,aAAc,kBAEX,SAAU,eAAgBvG,EAAM0O,aAAc,eAAgB,KAC9D,SAAUC,GACFA,GAAQ7P,EAAeD,IAAI8P,IAC3B1M,EAAiBzC,QAAQmP,EAAMhU,MAIvC,SAAU,eAAgBqF,EAAM4O,aAAc,eAAgB,KAC9D,SAAUD,GACFA,GAAQ7P,EAAeD,IAAI8P,IAC3B1M,EAAiB5C,QAAQsP,EAAMhU,UAKzC,aAAc,iBACf,SAAU,aAAc,GAAI,aAAc,OAG3C,MACC,UAAW,eAER,WAAY,YAAa,SAAUzD,GACnC,aAAeA,IACX,IAAK,SACDyD,EAAM+H,YAAcxL,CACpB,MACJ,KAAK,SACDF,QAAQkM,OAAOvI,EAAMiG,OAAQ1J,GAC7ByD,EAAM+H,YAAc/H,EAAMiG,OAAOrJ,IACjC,MACJ,SACIoD,EAAM+H,YAAc1C,EAAM6O,YAGnC,YAAa,WACZlU,EAAM+H,YAAc/H,EAAMiG,OAAOrJ,KAAO,UACzC,KAAM,WACL,GAAI,sBAAsB6T,KAAK,IAAMpL,EAAM6O,WAEvC,MADAlU,GAAM+H,YAAc1C,EAAM6O,UAAU9E,QAC7B,MAIV,SAAU,UAAW,WAAYc,EAAa,oBAAqBA,EACpE,SAAU8B,GACF3V,QAAQC,kBAAkB0V,KAC1BhS,EAAM0Q,kBAAoBrL,EAAM2M,aAIxC,SAAU,cAAe3V,QAAQI,UAAUuD,EAAMpD,MAAQoD,EAAMpD,QAC/D,OAAQ,KAAM,SAAUuX,GAEnB9X,QAAQqJ,WAAW6J,KACpBA,EAAgB9H,EAAe,oBAG/BpL,QAAQqJ,WAAW6J,KACnB3S,EAAOP,QAAQkM,OACX4L,EACA5E,EAAcvP,SAKrB,QAAS,UAAW,aAAc2Q,EAAY,iBAAkBA,EACjE,SAAUyD,IACF/X,QAAQC,kBAAkB8X,IAAa/X,QAAQ6C,QAAQkV,KACvDpU,EAAMkI,eAAiByI,SAGjC,SAAU,SAAU,QAAS,YAAa,UAAWtL,EAAM6M,WAExD,SAAU,SAAU,SAAU,KAAM,SAAU,KAAM,SAAUmC,GAC/D,GAAIC,IAAU,CACd,IAAIjY,QAAQI,UAAU4X,KAAahY,QAAQ6C,QAAQmV,GAAU,CACzD,GAC2BE,GADvBC,EAASnE,OAAOC,KAAK+D,GACrBI,EAAQD,EAAOzW,MAEnB,IAAI0W,EAAQ,EACR,IAAKF,EAAM,EAAGA,EAAME,EAAOF,IAEvB,GAAsC,gBAA1BF,GAAQG,EAAOD,KACS,IAAhCF,EAAQG,EAAOD,IAAMxW,OADzB,CAIAuW,GAAU,CACV,QAKZtU,EAAM0U,cAAgBJ,EACtB1C,OAGA,SAAU,gBAAiBa,EAAsB,gBACjDA,EAAsB,SAAUkC,GACV,gBAAXA,KACP3U,EAAMoS,cAAgB/V,QAAQkM,OAAOkK,EAAsBkC,OAGlE,SAAU,aAActP,EAAMxH,WAAY,cAAe,YACzD,SAAU,aAAcwH,EAAMuP,WAAY,gBAC1C,SAAU,SAAU,GAAI,KAAM,KAC9B,SAAU,aAAc,GAAI,KAAM,KAE/B,OAAQ,YACR,SAAUC,GAUN,MATAxY,SAAQyY,QACJD,EAAc,SAAUE,EAAOC,GACN,kBAAVD,IACH/U,EAAM4D,WAAWoR,KACjBhV,EAAM4D,WAAWoR,GAAOD,KAKjC/U,EAAM4D,YAEjB,eAGA,SAAU,cAAe,EAAG,cAAe,EAAG,WAC9CgO,OAEH,UAAW,aAAc,KAAM,gBAC/B,UAAW,aAAc,KAAM,kBAGrCqD,EAAOpB,EAAS9V,MAIvB,KAAK0R,EAAI,EAAGA,EAAIwF,EAAMxF,IAElB,GAAKoD,EAAiBxN,EAAOwO,EAASpE,GAAG,IAAI,GAI7C,IADAC,EAAQmE,EAASpE,GAAG,GACflR,EAAI,EAAGD,EAAMoR,EAAM3R,OAAQQ,EAAID,EAAKC,IACrCoR,EAASD,EAAMnR,GAAG,GAClBqR,EAASF,EAAMnR,GAAG,GAClBsR,EAAYH,EAAMnR,GAAG,GACrBuR,EAAUJ,EAAMnR,GAAG,GACnBwR,EAAQL,EAAMnR,GAAG,GACjByR,EAAUN,EAAMnR,GAAG,GACnB0R,EAAWP,EAAMnR,GAAG,GACpB4U,EAAcxD,EAAQC,EAAQC,EAAWC,EAASC,EAAOC,EAASC,EAItE5K,GAAM+C,UACNpI,EAAMsF,OACFD,EAAM+C,SAAU,SAAU7L,GACtByD,EAAMoI,SAAW7L,IAClB,GAIXyD,EAAMsF,OACF,WAAY,SAAU/I,GAClBqV,EAAYrV,KACb,GAGPyD,EAAM4R,YAAcA,EAEhBvM,EAAMiG,aACNkE,EAAc/H,EAAe,gBACzBpL,QAAQqJ,WAAW8J,IACnBA,EAAYxP,EAAOe,EAAS3B,EAASD,IAK7Ca,EAAM2O,WACF,WACQO,EAAWnR,OAAS,EACpBgD,EAAQ6E,OAAOV,EAASgK,GAAYlP,IAEpCqH,EAAMnD,IACFmB,EAAM6P,aAAe5N,EAAiBxC,WACrCqQ,MAAOhR,IACViR,QACE,SAAUxX,GACNmD,EAAQ6E,OAAOV,EAAStH,EAAKwR,QAAQpP,cAU/EvC,QACE,kBACI,UAAW,SAAU4X,GACjB,GAAId,GAAKE,EAAOD,EACZc,EACAC,EACA5M,EAAsB,QAASA,GAAoB6M,EAASzY,EAAM0Y,EAAY/B,EAAUD,EAASiC,GAC7F,IAAKrZ,QAAQqJ,WAAWgO,GACpB,MAAO,KAGX,IAAI9U,GAAII,EAAM6J,EACV8M,EAAcjC,EAAS8B,EAASzY,GAChC6Y,GAAe,CAEnB,IAAIvZ,QAAQI,UAAUM,EAAK0Y,IAGvB,IAFA5M,EAAS9L,EAAK0Y,GACdzW,EAAO6J,EAAO9K,OACTa,EAAK,EAAGA,EAAKI,EAAMJ,IACpBgX,EAAejN,EACX6M,EACA3M,EAAOjK,GACP6W,EACA/B,EACAD,EACAkC,GAAeD,IACdE,CAQb,OAJIvZ,SAAQqJ,WAAW+N,IACnBA,EAAQ+B,EAASzY,EAAM4Y,KAAgB,EAAMC,KAAiB,EAAMF,KAAiB,GAGlFC,GAAeC,GAG1BC,EAAW,SAAkBC,EAAUC,GACnC,GAAI1Z,QAAQC,kBAAkByZ,IAAU1Z,QAAQ6C,QAAQ6W,GACpD,MAAO,KAGX,IAAI1Z,QAAQqJ,WAAWoQ,GACnB,MAAOA,GAASC,EAAOV,EAEvB,IAAwB,iBAAbS,GAEP,MADAC,KAAUA,EACHA,IAAUD,CACd,KAAIzZ,QAAQI,UAAUqZ,GAazB,MAAO,KAZP,KACI,GAAIvF,GAAS,GAAIC,QAAOsF,EACxB,OAAOvF,GAAOE,KAAKsF,GAEvB,MAAOC,GACH,MAAqB,gBAAVD,GACAA,EAAMnC,QAAQkC,MAEd,OAQ3BG,EAAc,SAAqBlZ,EAAMmZ,EAAWnD,GAChD,GAAI1W,QAAQ6C,QAAQgX,GAChB,MAAOC,GAAgBpZ,EAAMmZ,EAAWnD,EAExC,IAEIqD,GAAKC,EAAQC,EAFbxL,EAAOoL,EAAUrF,MACjB0F,EAAYL,EAAUJ,QAG1B,IAAa,OAAThL,GAGA,IAFAuL,EAAShG,OAAOC,KAAKvT,GACrBuZ,EAAQD,EAAOtY,OACVqY,EAAM,EAAGA,EAAME,EAAOF,IACvB,GAAIP,EAASU,EAAWxZ,EAAKsZ,EAAOD,KAChC,OAAO,MAGZ,IAAI/Z,QAAQI,UAAUM,EAAK+N,IAC9B,MAAO+K,GAASU,EAAWxZ,EAAK+N,KAI5CqL,EAAkB,SAAyBpZ,EAAMyZ,EAAYzD,GACzD,GAAIxU,GAAGD,EAAMkY,EAAWzY,OAAQmV,GAAS,CACzC,IAAY,IAAR5U,EACA,MAAO,KAGX,KAAKC,EAAI,EAAGA,EAAID,EAAKC,IACjB,GAAI0X,EAAYlZ,EAAMyZ,EAAWjY,IAAKwU,IAGlC,GAFAG,GAAS,GAEJH,EACD,OAAO,MAKX,IAAIA,EACA,OAAO,CAKnB,OAAOG,IAIXuD,EAAW,SAAkBjB,EAASzY,EAAM2Z,EAAcC,EAAeC,GACrE,MAAIF,MAAiB,GACjB3Z,EAAK8Z,cAAe,OACpB9Z,EAAK+Z,sBAAuB,IAEpBH,KAAkB,GAAQnB,EAAQ9C,cAAe,GAC9CkE,KAAmB,GAAQpB,EAAQ7C,aAAc,GAC5D5V,EAAK8Z,cAAe,OACpB9Z,EAAK+Z,sBAAuB,WAKzB/Z,GAAiB,wBACjBA,GAAyB,uBAEpCga,EAAY,SAAmBvB,EAASzY,GACpC,MAA8B,KAA1ByY,EAAQrD,OAAOpU,QAGRkY,EAAYlZ,EAAMyY,EAAQrD,OAAQqD,EAAQ5C,WAAY,IAGrEoE,EAAa,QAASA,GAAW3C,GAE7B,GAAIhY,QAAQ4a,SAAS5C,KAAahY,QAAQ6C,QAAQmV,GAAU,CAKxD,GAJAG,EAASnE,OAAOC,KAAK+D,GACrBI,EAAQD,EAAOzW,OACfuX,KAEIb,EAAQ,EACR,IAAKF,EAAM,EAAGA,EAAME,EAAOF,IAEe,gBAA1BF,GAAQG,EAAOD,KAAuD,IAAhCF,EAAQG,EAAOD,IAAMxW,SAGnEwX,EADOlZ,QAAQ6C,QAAQmV,EAAQG,EAAOD,KAC7BF,EAAQG,EAAOD,IACjBlY,QAAQ4a,SAAS5C,EAAQG,EAAOD,KAC9ByC,EAAW3C,EAAQG,EAAOD,MAG/B1D,MAAU2D,EAAOD,GACjBuB,SAAUzB,EAAQG,EAAOD,KAGjCe,EAAQ7W,KAAK8W,GAIrB,OADAA,GAAS,KACFD,EAGP,MAAOjB,IAGf6C,EAAU,SAAiB9O,EAAUiM,EAAS8C,GAC1C,IAAK9a,QAAQ6C,QAAQkJ,IACM,IAApBA,EAASrK,SACP1B,QAAQ6C,QAAQmV,KAAYhY,QAAQ4a,SAAS5C,IAC5B,IAAnBA,EAAQtW,OACX,MAAOqK,EAGX,IAAIxJ,GAAII,EACJsW,CAGJ,IADAA,EAAU0B,EAAW3C,IACfhY,QAAQ6C,QAAQoW,KAAYjZ,QAAQ4a,SAAS3B,IACzB,IAAnBA,EAAQvX,OACX,MAAOqK,EAGX,KADA+O,EAAShF,OAASmD,EACb1W,EAAK,EAAGI,EAAOoJ,EAASrK,OAAQa,EAAKI,EAAMJ,IAC5C+J,EACIwO,EACA/O,EAASxJ,GACT,eACAmY,EAAWN,EAInB,OAAOrO,GAGf,OAAO8O,MAEjBzZ,QACE,mBACI,UAAW,SAAU4X,GACjB,GAAI+B,GAAa/B,EAAQ,WACrB1M,EAAsB,QAASA,GAAoB6M,EAASzY,EAAMiH,EAAMqT,GACpE,GAAIzY,GAAII,EAAM6J,CAEd,IAAIxM,QAAQI,UAAUM,EAAKiH,IAAQ,CAI/B,IAHA6E,EAAS9L,EAAKiH,GACdhF,EAAO6J,EAAO9K,OAETa,EAAK,EAAGA,EAAKI,EAAMJ,IACpBiK,EAAOjK,GAAM+J,EAAoB6M,EAAS3M,EAAOjK,GAAKoF,EAAMqT,EAGhEta,GAAKiH,GAAQqT,EAAUta,EAAKiH,GAAOwR,GAEvC,MAAOzY,IAEXua,EAAW,SAAkBC,EAAMrF,GAC/B,MAAOkF,GAAWG,EAAMrF,IAE5BgF,EAAU,SAAiB9O,EAAU8J,GACjC,IAAK7V,QAAQ6C,QAAQkJ,IACM,IAApBA,EAASrK,UACP1B,QAAQ6C,QAAQgT,IAAY7V,QAAQ4a,SAAS/E,IAAY7V,QAAQmb,SAAStF,IAAY7V,QAAQqJ,WAAWwM,KACvF,IAAnBA,EAAQnU,SAAiB1B,QAAQqJ,WAAWwM,GAChD,MAAO9J,EAGX,IAAIxJ,GAAII,CAGR,KAAKJ,EAAK,EAAGI,EAAOoJ,EAASrK,OAAQa,EAAKI,EAAMJ,IAC5CwJ,EAASxJ,GAAM+J,EACXuJ,EACA9J,EAASxJ,GACT,eACA0Y,EAKR,OADAlP,GAAWkP,EAASlP,EAAU8J,GAItC,OAAOgF,MAEjBzZ,QACE,gBACI,WAAY,iBACZ,SAAU2J,EAAUI,GAChB,GAAIiQ,GAWApF,EAVAqF,GAAiB,EACjBC,KACAC,EAAmB,KAEnBC,EAAqB,WACrBF,EAAc7C,QAAQ,SAAU/X,GAAQA,EAAK+a,YAAa,IAC1DH,KACAC,EAAmB,MAInBG,EAAiB,SAAUrY,EAAGsY,GAC1B,SAAIA,EAAQxM,WACR6G,EAAU7K,EAAetG,OAAO8W,EAAQxM,UACpC6G,EAAQhR,KAAO3B,EAAEwC,OAASxC,EAAEwC,OAASmQ,EAAQhR,IAAMgR,EAAQvR,QAC3DuR,EAAQ3Q,MAAQhC,EAAEqC,OAASrC,EAAEqC,OAASsQ,EAAQ3Q,KAAO2Q,EAAQpR,SAOzEgX,EAAe,SAAUvY,EAAGsY,GAGxB,GAFAN,GAAiB,GAEZM,EAAQE,UAA0B,IAAbxY,EAAEyY,QAA4B,IAAZzY,EAAE0Y,UAI1C1Y,EAAE2Y,gBAAmB3Y,EAAEI,eAAiBJ,EAAEI,cAAcuY,gBAA5D,CAIA,GAAIC,GAAWjc,QAAQ0E,QAAQrB,EAAEgB,QAC7B6X,EAAaD,EAAStY,OAC1B,IAAKuY,GAAeA,EAAWvS,MAO/B,GAAyB,sBAArBuS,EAAWvS,MAAf,CAkCA,GACIwS,GADAC,EAAkBH,EAAStX,KAAK,WAAWmN,cAE3CuK,EAAUV,EAAQrQ,MACtB,IAAwB,UAApB8Q,GACuB,aAApBA,GACoB,WAApBA,GACoB,WAApBA,EAHP,CAOA,KAAOH,GAAYA,EAAS,IAAMA,EAAS,KAAON,EAAQjX,SAAS,CAC/D,GAAIyG,EAAelI,OAAOgZ,GACtB,MAEJA,GAAWA,EAASra,SAaxB,GAVAyB,EAAE2Y,gBAAiB,EACf3Y,EAAEI,gBACFJ,EAAEI,cAAcuY,gBAAiB,GAErC3Y,EAAEiZ,iBAEFH,EAAYD,EAAWxR,eAEvBiR,EAAQ7U,aAAc,EAEjBuV,EAAQ9U,WAAWqI,WAAWuM,GAAnC,CAIA,GAAI/Y,GAAW+H,EAAe/H,SAASC,GACnCuO,EAAUuK,EAAUzS,SAAS/E,KAAK,WAAWmN,cAC7CD,EAAuB,OAAZD,CAEf+J,GAAQjY,SAAWyH,EAAezH,SAASyY,GAE3CE,EAAQ3L,YAAYiL,EAAQjY,UAE5BiY,EAAQxX,IAAMgH,EAAe3F,gBAAgBpC,EAAU+Y,EAAUzS,UAE7DmI,EACA8J,EAAQhK,QAAU3R,QAAQ0E,QAAQiX,EAAQ5Y,QAAQgP,SAASC,cAAc,UACpEnI,SAASwS,EAAQzS,OAAOrJ,MACxBsJ,SAASwS,EAAQzS,OAAO9I,MACxB+I,SAASwS,EAAQ3Q,aAEtBiQ,EAAQhK,QAAU3R,QAAQ0E,QAAQiX,EAAQ5Y,QAAQgP,SAASC,cAAc,OACpEnI,SAASwS,EAAQzS,OAAO9I,MACxB+I,SAAS,kBACTA,SAASwS,EAAQ3Q,aAG1BiQ,EAAQhK,QAAQrK,KAER1C,MAAWuG,EAAevG,MAAMuX,EAAUzS,UAAY,KACtD0H,UAAW,OAInBuK,EAAQY,WAAa,CACrB,IAAIC,GAASrR,EAAevG,MAAMuX,EAAUzS,UACxC+S,EAASN,EACTrJ,EAAW2J,EAAO/S,SAClB0D,EAAS,KACTsP,IAAkBL,EAAQ5M,gBAC1BkN,GAAU,EACVC,EAAS,IAEb,IAAI/K,EACA8J,EAAQY,WAAaZ,EAAQjY,SAAShD,KAAKyU,UAAY,EACvDyH,EAAS5c,QAAQ0E,QAAQiX,EAAQ5Y,QAAQgP,SAASC,cAAc,UAEhEqK,EAAQ/P,oBACJqP,EAAQjY,SAAShD,KAAM,SAAUkD,GAC7B6Y,EAASJ,EAAQ5K,SAAS7N,GAC1BkP,EAAW2J,EAAO/S,SAEbiT,IACDvP,EAAS0F,EAASlE,QAElBzD,EAAehE,cACXsV,EACArP,EACAxJ,EAAMuR,UAAYwG,EAAQY,WAC1B,gBAGJK,EAAOrT,OAAO6D,GAGVsP,IACAC,GAAU,IAIdN,EAAQ/M,aAAe+M,EAAQzS,OAAOnJ,QACtCqS,EAASjJ,SAASwS,EAAQzS,OAAOnJ,UAK7Ckb,EAAQhK,QAAQpI,OAAOqT,OACpB,CAEH,GAAKF,EAEE,CACH,GAAIG,GAAUJ,EAAO9R,mBACjBmS,EAAU9c,QAAQ0E,QAAQ,aAG9BmY,GAAQE,MAAM/c,QAAQ0E,QAAQ,eAC9BoY,EAAQvT,OAAOsT,GAGfzP,EAAS0F,EAASlE,QAClBxB,EAAO6D,KAAK,UAAUnC,SAGtBgE,EAAS7B,KAAK,UAAUxH,YAAYoT,GAGpCC,EAAQhO,SACR+N,EAAU,SAlBVzP,GAAS0F,EAASlE,OAqBtB+M,GAAQhK,QAAQpI,OAAO6D,GACnBiP,EAAQ/M,aAAe+M,EAAQzS,OAAOnJ,QACtCqS,EAASjJ,SAASwS,EAAQzS,OAAOnJ,QAIzCkb,EAAQhK,QAAQrK,KAERjC,KAAQjC,EAASsC,MAAQiW,EAAQxX,IAAIsB,QAAU4W,EAAQ9U,WAAWC,WAC9DmU,EAAQY,WAAa,GACrB,GACA,GACM,KACVvX,IAAQ5B,EAASyC,MAAQ8V,EAAQxX,IAAIyB,QAAU,OAInD0V,EAAc5Z,OAAS,GACvBia,EAAQhK,QAAQpI,OAAOvJ,QAAQ0E,QAAQ,yBAA2B4W,EAAc5Z,OAAS,WAI7Fia,EAAQ7Y,UAAUmO,KAAK,QAAQ1H,OAAOoS,EAAQhK,SAC1C0K,EAAQ9U,WAAW6G,cACnBuN,EAAQxM,SAAWkN,EAAQ3K,UAAUyK,EAAUzS,SAAUiS,EAAQhK,SAE7DE,GACA1G,EAAehE,cAAckV,EAASV,EAAQxM,SAAUwM,EAAQjY,SAAShD,KAAKyU,WAGlFwG,EAAQxM,SAAS7H,IAAI,QAASkV,IAGlCH,EAAQhK,YACRgK,EAAQhL,WAAY,EAEhBgL,EAAQxL,gBACRwL,EAAQtL,gBACRsL,EAAQlL,kBAAkB9N,IAG9BrD,QAAQ0E,QAAQiX,EAAQ7Y,WAAWka,KAAK,WAAYrB,EAAQsB,cAC5Djd,QAAQ0E,QAAQiX,EAAQ7Y,WAAWka,KAAK,cAAerB,EAAQsB,cAC/Djd,QAAQ0E,QAAQiX,EAAQ7Y,WAAWka,KAAK,YAAarB,EAAQuB,eAC7Dld,QAAQ0E,QAAQiX,EAAQ7Y,WAAWka,KAAK,UAAWrB,EAAQsB,cAC3Djd,QAAQ0E,QAAQiX,EAAQ7Y,WAAWka,KAAK,YAAarB,EAAQuB,eAC7Dld,QAAQ0E,QAAQiX,EAAQ7Y,WAAWka,KAAK,aAAcrB,EAAQwB,iBAE9DxB,EAAQyB,gBAAkBpW,KAAKqW,IAC3B1B,EAAQzW,KAAKoY,aACb3B,EAAQzW,KAAKqY,aACb5B,EAAQrS,KAAKkU,aACb7B,EAAQrS,KAAKgU,aACb3B,EAAQrS,KAAKiU,cAGjB5B,EAAQ8B,eAAiBzW,KAAKqW,IAC1B1B,EAAQzW,KAAKwY,YACb/B,EAAQzW,KAAKyY,YACbhC,EAAQrS,KAAKsU,YACbjC,EAAQrS,KAAKoU,YACb/B,EAAQrS,KAAKqU,mBA9NjB,CACI,GAAIE,GAAc3B,EAAW4B,QAAQ5T,WACrC,IAAIgS,EAAWtQ,gBAAkBiS,GAAwC,OAAzBA,EAAYlc,SAAmB,CAC3E,GAAI0B,EAAE0a,QACFxC,EAAmBsC,EACnBA,EAAYpC,YAAcoC,EAAYpC,eACnC,IAAIpY,EAAE2a,SAAU,CACnB,GAAIC,GAAa/B,EAAW4B,QAAQA,QAAQA,QAAQ5T,YAAY/H,aAC5D+b,EAAuB3C,GAAoB0C,EAAWE,SAAS5C,GAAqB0C,EAAW1G,QAAQgE,GAAoB,EAC3H6C,EAAqBH,EAAW1G,QAAQsG,GACxCQ,EAAWH,EAAsBE,EAAqBF,EAAsBE,EAC5EE,EAAYJ,EAAsBE,EAAqBF,EAAsBE,CAEjF5C,IAEA,KAAK,GAAI+C,GAAMF,EAAUE,GAAOD,EAAWC,IACvCN,EAAWM,GAAK9C,YAAa,EAC7BH,EAAclZ,KAAK6b,EAAWM,QAGlChD,GAAmBsC,EACnBrC,IACAqC,EAAYpC,YAAa,CAGzBH,GAAckD,MAAM,SAAU9d,GAAQ,MAAOA,KAASmd,KAAmBA,EAAYpC,WACrFH,EAAclZ,KAAKyb,GACZvC,EAAc6C,SAASN,KAAiBA,EAAYpC,YAC3DH,EAAcvM,OAAOuM,EAAc/D,QAAQsG,GAAc,OAqMzEY,EAAc,SAAUpb,EAAGsY,GACvB,GAAIU,GAAUV,EAAQrQ,MACtB,KAAKqQ,EAAQ+C,YAST,YARK/C,EAAQgD,eACThD,EAAQ+C,aAAc,EACtBrC,EAAQ/J,WACJ,WACI+J,EAAQ9U,WAAWiJ,UAAUmL,EAAQjY,aAOrD,IAAKiY,EAAQhK,QAAb,CAIAtO,EAAEiZ,iBACEX,EAAQ5Y,QAAQ6b,aAChBjD,EAAQ5Y,QAAQ6b,eAAeC,kBACxBlD,EAAQ5Y,QAAQgP,SAAS+M,WAChCnD,EAAQ5Y,QAAQgP,SAAS+M,UAAUte,OAGvC,IAAI4C,GAAW+H,EAAe/H,SAASC,GACnC0b,EAAa3b,EAASsC,MAAQiW,EAAQxX,IAAIsB,QAC1CuZ,EAAY5b,EAASyC,MAAQ8V,EAAQxX,IAAIyB,OAGzCmZ,GAAa,IACbA,EAAa,GAIbC,EAAY,IACZA,EAAY,GAIXA,EAAY,GAAMrD,EAAQyB,kBAC3B4B,EAAYrD,EAAQyB,gBAAkB,IAIrC2B,EAAa,GAAMpD,EAAQ8B,iBAC5BsB,EAAapD,EAAQ8B,eAAiB,IAG1C9B,EAAQhK,QAAQrK,KAERjC,KAAQ0Z,EAAa1C,EAAQ9U,WAAWC,WACpCmU,EAAQY,WAAa,GACrB,GACA,GACM,KACVvX,IAAQga,EAAY,OAIxB3C,EAAQxL,eACRwL,EAAQlL,kBAAkB9N,EAG9B,IAAI4b,GAAaC,OAAOja,aAAe0W,EAAQ5Y,QAAQgP,SAAS3M,gBAAgBD,UAC5Ega,EAAgBF,GAAcC,OAAOE,aAAezD,EAAQ5Y,QAAQgP,SAASyL,cAAgB7B,EAAQ5Y,QAAQgP,SAASyL,aAY1H,IAVI2B,EAAgB/b,EAASyC,OAASsZ,GAAiBxD,EAAQyB,iBAC3D8B,OAAOG,SAAS,EAAG,IAGnBJ,EAAa7b,EAASyC,OACtBqZ,OAAOG,SAAS,OAGpBlU,EAAetE,cAAcxD,EAAGsY,EAAQxX,IAAKwX,EAAQ7U,aAEjD6U,EAAQ7U,YAER,YADA6U,EAAQ7U,aAAc,EAK1B,IAGI5D,GACAoc,EACAC,EACAC,EACA5N,EACAC,EAGA4N,EACAC,EACAjD,EACAkD,EACA5b,EAMA6b,EArBAC,EAAUzc,EAASsC,MAAQiW,EAAQ5Y,QAAQgP,SAAS7M,KAAKK,WACzDua,EAAU1c,EAASyC,OAASqZ,OAAOja,aAAe0W,EAAQ5Y,QAAQgP,SAAS3M,gBAAgBD,WAQ3F2I,GAAY,EACZiS,GAAa,EAMbC,EAAQrE,EAAQjY,SAChB2M,EAAQ2P,EAAM9b,KACd+b,EAAQD,EAAMtf,KACdwf,EAAQF,EAAM1b,KACd6b,EAAYH,EAAM3b,OAElB+b,EAAW1E,EAAerY,EAAGsY,EAEjC,IAAKyE,EAmFD/E,GAAiB,MAnFN,CAaX,GARAnY,EAAYlD,QAAQ0E,QAChBiX,EAAQ5Y,QAAQgP,SAASsO,iBACrBR,EACAC,IAIRR,EAAcpc,EAAUS,SACnB2b,EACD,MAGJM,GAAa,WAGT,GAFAO,EAAYb,EAAYxb,eACxB6b,EAAUK,EAAM3b,OACZ2b,EAAM3b,SAAW8b,EAAW,CAC5B,IAAIA,EAAU5Y,WAAW6G,YAarB,OAAO,CAXPuR,GAAQvN,YACRuN,EAAQtO,WAAY,EACpB8O,EAAU9O,WAAY,EAEtB2O,EAAM3b,OAAS8b,EACfxE,EAAQxM,SAAWgR,EAAUzO,UAAU4N,EAAY5V,SAAUiS,EAAQhK,SAErEgO,EAAU,KACVD,GAAY,EAMpB,OAAO,EAGX,IAAIY,GAAY,WACZjF,GAAiB,EACbgB,EAAQxL,eACRwL,EAAQvL,aAEZuL,EAAQkE,SAAU,EAClBnF,EAAW/X,EAAGsY,GAGlB,IAAI3b,QAAQqJ,WAAWiW,EAAY5U,eAG/B,GAFA4U,EAAcA,EAAY5U,gBAErBkV,IACD,WAED,CACH,GAAIvE,EAOA,WANAtO,YAAW,WAGPoT,EAAUhR,SAASL,SACnBwR,KACD,EAIP,IAA0B,iBAAtBhB,EAAY3V,OAAkD,YAAtB2V,EAAY3V,MAapD,MAZA,KAAI2V,EAAYtT,WASZ,MARA,IAAsC,IAAlCsT,EAAYtT,WAAWtK,OAAc,CACrC,IAAKke,IACD,MAGJH,IAAU,IAkB9B,IALI9D,EAAQxX,IAAImC,QAAUoZ,GAAaU,KACnCL,GAAa,EACbT,EAAcU,EAAMrc,OAGnB2b,EAAY5V,UAAa4V,EAA9B,CAMA,GAFA1N,EAAU0N,EAAY5V,SAAS/E,KAAK,WAAWmN,cAC/CD,EAAuB,UAAZD,GAAmC,UAAZA,GAAmC,OAAZA,GAAgC,OAAZA,EACzE6N,EACApP,EAAMzO,OAAS,KACfyO,EAAMlM,IAAM,EAEZ+b,EAAQ,SAGR,IAAIH,EAAY,CAKZ,GAJA7c,EAAYoc,EAAY5V,SAExB8V,EAAerU,EAAetG,OAAO3B,GAEjCoc,EAAYlQ,aAAeyC,EAC3B0N,EAAenc,EAASsC,MAAS8Z,EAAana,KAAO8F,EAAevG,MAAM1B,GAAa,MAEvF,IAAI2O,EACA0N,EAAenc,EAASyC,MAAS2Z,EAAaxa,IAAMmG,EAAe1G,OAAOvB,GAAa,MACpF,CACH,GAAIsd,GAAUrV,EAAe1G,OAAOvB,EAMpC,IAJIoc,EAAY3U,qBACZ6V,IAAYrV,EAAe1G,OAAO6a,EAAY3U,qBAG9CvH,EAASyC,MAAQ2Z,EAAaxa,IAAMwb,EACpC,MAGJjB,GAAenc,EAASyC,MAAS2Z,EAAaxa,IAAMwb,EAAU,EAItE,IAAKxgB,QAAQqJ,WAAWiW,EAAYzb,SAChC,MAMJ,IAHA8b,EAAUL,EAAYzb,UACtBE,EAAUub,EAAYtb,QAAQ2b,EAAQ1b,iBAElCsb,EAAc,CACd,GAAIkB,GAAQnB,EAAY/a,eAAeob,EAEvCtP,GAAMzO,OAASmC,EACfsM,EAAMlM,IAAMnE,QAAQI,UAAUqgB,GAASA,EAAMrc,UAAY,EAAI,EAE7D8b,EAAQO,OAEJd,EAAQnS,cAAkD,IAAhCmS,EAAQxd,aAAaT,QAAgBie,EAAQzK,iBAAmB+K,EAAMhc,iBAMhGoM,EAAMzO,OAASmC,EACfsM,EAAMlM,IAAMwb,EAAQvb,UAAY,EAEhC8b,EAAQP,IARRtP,EAAMzO,OAAS+d,EACftP,EAAMlM,IAAM,EAEZ+b,EAAQ,UAQb,CAEH,KAAIvE,EAAQxX,IAAImC,OAASqV,EAAQxX,IAAIwC,SAAWwZ,EAAUO,YAwDtD,MArDA,IAFA/E,EAAQxX,IAAIwC,QAAU,EAElBgV,EAAQxX,IAAIiC,MAAQ,EAAG,CAEvB,GADArC,EAAUmc,GACLnc,EAAS,CACV,KAAIsM,EAAMlM,IAAM,GAAK,GAGjB,MAFAJ,GAAUsM,EAAMzO,OAAOO,aAAakO,EAAMlM,IAAM,GAUxD,GAJI6b,EAAMlf,OAASkf,EAAM3b,QAAUN,IAAYkc,GAAS5D,EAAQ/M,cAC5DvL,EAAUoc,EAAU5b,eAAeR,KAGnCA,IAAWA,EAAQqR,YAanB,MAZA,IAAIzS,GAAOoB,EAAQ5B,aAAaT,MAEhC2O,GAAMzO,OAASmC,EACfsM,EAAMlM,IAAMxB,EAGRud,EADAvd,EAAO,EACCoB,EAAQ5B,aAAaQ,EAAO,GAE5B,SAMb,CAAA,KAAIgZ,EAAQxX,IAAIiC,MAAQ,GAoB3B,MAlBA,IADAuZ,EAAUtP,EAAMzO,QACZ+d,KACiC,IAAhCA,EAAQxd,aAAaT,QACrBie,EAAQxd,aAAaT,OAAS,EAAI2O,EAAMlM,KACvC6b,EAAMlf,OAASkf,EAAM3b,QACrBsb,EAAQzK,iBAAmB+K,EAAMhc,iBACjC0b,EAAQxd,aAAaT,OAAS,IAAMue,EAAM7b,WAAaiY,EAAQ/M,aAUjE,MARAvL,GAAUoc,EAAUnc,QAAQ2b,EAAQ1b,iBAEpCoM,EAAMzO,OAASmC,EACfsM,EAAMlM,IAAMwb,EAAQvb,UAAY,EAEhC8b,EAAQP,GAexBK,EAAMlf,OAASkf,EAAM3b,QACrBgM,EAAMzO,QACNqe,EAAMhc,kBAAoBoM,EAAMzO,OAAOsT,gBACvC+K,EAAM7b,YAAciM,EAAMlM,MAE1B2J,GAAY,GAGZqS,EAAU5Y,WAAWqG,OAAOoS,EAAO3P,EAAOvC,KAC1CkS,EAAM9b,KAAOmM,EACb2P,EAAM1b,KAAO4b,EACbF,EAAMxb,QAAUsJ,EAChBkS,EAAMrc,MAAQ2b,EAEVzN,GACA1G,EAAehE,cACXgZ,EACAxE,EAAQxM,SACRnP,QAAQC,kBAAkBoQ,EAAMzO,QAAU,EAAIyO,EAAMzO,OAAOuT,UAAY,GAGvE+K,GACAnc,GAAWsM,EAAMzO,OAASyO,EAAMzO,OAAOO,aAAe,OAAU6d,EAAM3b,OAAO0H,SAEzEmU,EAAM9b,UAAYL,EAAQrC,OAAS,GAEnCwe,EAAQnc,EAAQmc,EAAM9b,UAAY,GAClCqY,EAASuD,EAAM3b,OAAOoN,SAASyO,GAC/BzD,EAAO/S,SAAS,GAAGwI,WAAWC,aAC1BwJ,EAAQxM,SAAS,GACjBsN,EAAO/S,SAAS,MAGpBiW,EAAUK,EAAM3b,OAAOoI,kBAAkByT,GACzCzD,EAASuD,EAAM3b,OAAOoN,SAASkO,GAC/BlD,EAAO/S,SAASqT,MAAMpB,EAAQxM,aAGlCsN,EAASuD,EAAM3b,OAAOoN,SAASpB,EAAMzO,QACjC6a,IACIpM,EAAMzO,OACN6a,EAAO/S,SAASqT,MAAMpB,EAAQxM,UAG9BsN,EAAO9R,mBAAmBgW,QAAQhF,EAAQxM,cAKtDsN,EAASuD,EAAM3b,OAAOoN,SAASyO,GAAS7P,EAAMzO,QAE1Cse,EACAzD,EAAO/S,SAASqT,MAAMpB,EAAQxM,UAE9BsN,EAAO9R,mBAAmBgW,QAAQhF,EAAQxM,WAIlDgR,EAAU9N,YAEVgK,EAAQ/J,WACJ,WACI+J,EAAQ9U,WAAWkJ,SAASuP,SAK5C5E,EAAa,SAAU/X,EAAGsY,GAItB,GAHAN,GAAiB,EAEjBhY,EAAEiZ,iBACEX,EAAQhK,QAAS,CACjB,GAAIsG,IAAU,EACVoE,EAAUV,EAAQrQ,OAClBmR,EAASJ,EAAQ5K,SAASkK,EAAQjY,SAAShD,MAC3CkR,EAAU6K,EAAO/S,SAAS/E,KAAK,WAAWmN,cAC1C8O,EAAwB,OAAZhP,EACZkB,EAAW2J,EAAO/S,QAEtB2S,GAAQ/J,WACJ,WACI2F,EAAUoE,EAAQ9U,WAAW+G,WAAWqN,EAAQjY,YAKpDkd,EACAvE,EAAQ/P,oBACJqP,EAAQjY,SAAShD,KAAM,SAAUkD,GAC7B6Y,EAASJ,EAAQ5K,SAAS7N,GAC1BkP,EAAW2J,EAAO/S,SAEd+S,EAAO7S,OAAOnJ,QACdqS,EAAS5B,YAAYmL,EAAQzS,OAAOnJ,UAK5C4b,EAAQzS,OAAOnJ,QACfqS,EAAS5B,YAAYmL,EAAQzS,OAAOnJ,QAI5Ckb,EAAQhK,QAAQ7C,SAChB6M,EAAQhK,QAAU,KAEd0K,EAAQxL,eACRwL,EAAQvL,YAGZ,IAAI+P,IAAU,CACVxE,GAAQkE,QACRlE,EAAQ/J,WACJ,WACIqJ,EAAQjY,SAASod,gBAAkBxF,EACnCE,IAEAqF,EAAUxE,EAAQ9U,WAAWyI,QACzB2L,EAAQjY,SACRuU,EACAoE,EAAQ/M,eAKhBqM,GAA2B,OAAhBA,EAAQxX,KACnB4c,EAAYpF,GAIpBU,EAAQ/J,WACJ,WACI+J,EAAQ9U,WAAWuI,SAAS6L,EAAQjY,SAAUmd,KAItDlF,EAAQjY,SAASW,OAAO+N,YACxBuJ,EAAQjY,SAASW,OAAOgN,WAAY,EAEpCsK,EAAQjY,SAAW,KACnB2Y,EAAQkE,SAAU,EAClBlE,EAAQ3L,YAAY,MAGxB1Q,QAAQ0E,QAAQiX,EAAQ7Y,WAAWke,OAAO,WAAYrF,EAAQsB,cAC9Djd,QAAQ0E,QAAQiX,EAAQ7Y,WAAWke,OAAO,cAAerF,EAAQsB,cACjEjd,QAAQ0E,QAAQiX,EAAQ7Y,WAAWke,OAAO,YAAarF,EAAQuB,eAC/Dld,QAAQ0E,QAAQiX,EAAQ7Y,WAAWke,OAAO,UAAWrF,EAAQsB,cAC7Djd,QAAQ0E,QAAQiX,EAAQ7Y,WAAWke,OAAO,YAAarF,EAAQuB,eAC/Dld,QAAQ0E,QAAQiX,EAAQ5Y,QAAQgP,SAAS7M,MAAM8b,OAAO,aAAcrF,EAAQwB,kBAEhF8D,EAAoB,SAAU5d,EAAGsY,GACzBA,EAAQrQ,OAAO/D,WAAW8G,aAC1BuN,EAAavY,EAAGsY,IAGxBoF,EAAc,SAAUpF,GACpBA,EAAQjX,QAAQsY,KACZ,uBAAwB,SAAU3Z,GAC9BsY,EAAQgD,cAAe,EACvBhD,EAAQ+C,aAAc,EACtBuC,EAAkB5d,EAAGsY,GACrBA,EAAQuF,UAAYnW,EAChB,WACI4Q,EAAQgD,cAAe,GACxBhD,EAAQrQ,OAAO+D,aAI9BsM,EAAQjX,QAAQsY,KACZ,+BAAgC,WAC5BjS,EAASoW,OAAOxF,EAAQuF,cAIpCE,EAAoB,SAAU/d,EAAGsY,GAC7B,GAAIU,GAAUV,EAAQrQ,MACtB,IAAkB,KAAdjI,EAAEge,QACEhF,EAAQxL,eACRwL,EAAQvL,aAGZuL,EAAQkE,SAAU,EAClBnF,EAAW/X,EAAGsY,OAEd,IAAIU,EAAQ7M,eAAiBnM,EAAE2a,SAAU,CAMrC,GALA3B,EAAQ1L,YAAW,GACf0L,EAAQxL,eACRwL,EAAQtL,iBAGP4K,EAAQjY,SACT,MAGJ,IAAI+Y,GAASJ,EAAQ5K,SAASkK,EAAQjY,SAAShD,MAC3CkR,EAAU6K,EAAO/S,SAAS/E,KAAK,WAAWmN,cAC1CgB,EAAW2J,EAAO/S,QAEN,QAAZkI,EACAyK,EAAQ/P,oBACJqP,EAAQjY,SAAShD,KAAM,SAAUkD,GAC7B6Y,EAASJ,EAAQ5K,SAAS7N,GAC1BkP,EAAW2J,EAAO/S,SAEd2S,EAAQzS,OAAOnJ,QACfqS,EAASjJ,SAASwS,EAAQzS,OAAOnJ,UAKzC4b,EAAQzS,OAAOnJ,QACfqS,EAASjJ,SAASwS,EAAQzS,OAAOnJ,UAMrD6gB,EAAkB,SAAUje,EAAGsY,GAC3B,GAAIU,GAAUV,EAAQrQ,MACtB,IAAI+Q,EAAQ7M,gBAAkBnM,EAAE2a,SAAU,CAOtC,GANA3B,EAAQ1L,YAAW,GAEf0L,EAAQxL,eACRwL,EAAQtL,iBAGP4K,EAAQjY,SACT,MAGJ,IAAI+Y,GAASJ,EAAQ5K,SAASkK,EAAQjY,SAAShD,MAC3CkR,EAAU6K,EAAO/S,SAAS/E,KAAK,WAAWmN,cAC1CgB,EAAW2J,EAAO/S,QAEN,QAAZkI,EACAyK,EAAQ/P,oBACJqP,EAAQjY,SAAShD,KAAM,SAAUkD,GAE7B6Y,EAASJ,EAAQ5K,SAAS7N,GAC1BkP,EAAW2J,EAAO/S,SAEd2S,EAAQzS,OAAOnJ,QACfqS,EAAS5B,YAAYmL,EAAQzS,OAAOnJ,UAK5C4b,EAAQzS,OAAOnJ,QACfqS,EAAS5B,YAAYmL,EAAQzS,OAAOnJ,UAMpD2H,EAAS,SAAUzE,EAAOe,EAAS3B,EAASD,GACxC,GAAI6Y,IACAE,SAAkB,gBAAkBqD,QACpCpY,YAAiB,KACjBpD,SAAiB,KACjBS,IAAiB,KACjBgL,SAAiB,KACjBwC,QAAiB,KACjBgN,cAAiB,EACjBD,aAAiB,EACjBwC,UAAiB,KACjBhc,KAAiB6M,SAAS7M,KAC1BoE,KAAiByI,SAAS3M,gBAC1BgY,gBAAiB,KACjBK,eAAiB,KACjBlB,WAAiB,KACjBjR,OAAiB3H,EACjBZ,QAAiBA,EACjBD,UAAiBA,EACjB4B,QAAiBA,EACjB6c,SAAiB,WACbR,EAAYpF,IAEhB6F,QAAiB,SAAUne,GACvB+X,EAAW/X,EAAGsY,IAElBuB,cAAiB,SAAU7Z,GACvBob,EAAYpb,EAAGsY,IAEnBsB,aAAiB,SAAU5Z,GACvBM,EAAM4c,SAAU,EAChBnF,EAAW/X,EAAGsY,IAElBwB,gBAAiB,SAAU9Z,GACvB+X,EAAW/X,EAAGsY,KAGlB8F,EAAiB,SAAUpe,GACvB,MAAO+d,GAAkB/d,EAAGsY,IAEhC+F,EAAe,SAAUre,GACrB,MAAOie,GAAgBje,EAAGsY,GAGlChY,GAAM6d,QAAU,SAAUne,GACtBsY,EAAQ6F,QAAQne,IAGpBsY,EAAQ4F,WAERvhB,QAAQ0E,QAAQ3B,EAAQgP,SAAS7M,MAAM8X,KAAK,UAAWyE,GACvDzhB,QAAQ0E,QAAQ3B,EAAQgP,SAAS7M,MAAM8X,KAAK,QAAS0E,GAErD/d,EAAMge,IACF,WAAY,WACR3hB,QAAQ0E,QAAQ3B,EAAQgP,SAAS7M,MAAM8b,OAAO,UAAWS,GACzDzhB,QAAQ0E,QAAQ3B,EAAQgP,SAAS7M,MAAM8b,OAAO,QAASU,GACnD/d,EAAM+L,WACN/L,EAAM+L,UAAUZ,SAGhBnL,EAAMwL,UACNxL,EAAMwL,SAASL,WAMnC,OAAO1G,MAGjBhH,QACE,kBAAmB,WACf,GAAIue,GAAS5b,EACT7B,EAAGD,EACH2f,EAAgB,SAAuBlhB,GACnCA,EAAK8M,cAAe,GAExBqU,EAAc,SAAqBnhB,GAC/BA,EAAK8M,cAAe,GAGxBpF,EAAS,SAAgBzE,GACrB,GAAIgJ,GAAGpM,GACHqM,cAAmC,KACnCN,oBAAmC3I,EAAM2I,oBACzCW,YAAmC,SAAUvM,GACzC,MAAKA,IAQDA,IAASH,EAAKqM,gBACVrM,EAAKqM,qBACErM,GAAKqM,cAA0B,aAE1ClM,EAAKiO,cAAe,EACpBpO,EAAKqM,cAAgBlM,EACrBH,EAAKuhB,mBAAmBphB,GACpBV,QAAQqJ,WAAW9I,EAAK2M,YACxB3M,EAAK2M,UAAUxM,IAGhBA,IAlBCH,EAAKqM,qBACErM,GAAKqM,cAA0B,aAE1CrM,EAAKqM,cAAgB,KACd,OAgBfmV,cAAmC,WAO/B,MANApC,GAAU,KACNpf,EAAKqM,sBACErM,GAAKqM,cAA0B,aACtC+S,EAAUpf,EAAKqM,cACfrM,EAAKqM,cAAgB,MAElB+S,GAEXqC,WAAmC,SAAUthB,GACzC,MAAIA,IAAiC,OAAzBA,EAAKuD,gBACNN,EAAMqI,WAAWtL,EAAKuD,iBAE1B,MAEXge,kBAAmC,SAAUC,EAAO3V,GAEhD,MADAxI,GAAUxD,EAAKyhB,WAAWE,IACtBne,IACIwI,EAAGxI,IAIAxD,EAAK0hB,kBAAkBle,EAASwI,IAI/CuV,mBAAmC,SAAUI,GACzC,MAAO3hB,GAAK0hB,kBACRC,EAAOL,IAGftM,YAAmC,WAC/B,MAAO5R,GAAM4R,eAEjB4M,SAAmC,SAAUvgB,EAAQwgB,EAAU7Q,GAgB3D,MAfqB,gBAAVA,GACH3P,GACAA,EAAOO,aAAaC,KAAKggB,GACzBxgB,EAAO4L,cAAe,GAEtB7J,EAAMoI,SAAS3J,KAAKggB,GAGpBxgB,GACAA,EAAOO,aAAa4M,OAAOwC,EAAO,EAAG6Q,GACrCxgB,EAAO4L,cAAe,GAEtB7J,EAAMoI,SAASgD,OAAOwC,EAAO,EAAG6Q,GAGjCA,GAEXC,cAAmC,SAAUD,GAEzC,MADA7hB,GAAK4hB,SAAS,KAAMC,GACbA,GAEXE,WAAmC,WAE/B,IADArgB,EAAM0B,EAAMoI,SAASrK,OAChBQ,EAAI,EAAGA,EAAID,EAAKC,IACjB3B,EAAK+L,oBACD3I,EAAMoI,SAAS7J,GAAI2f,IAI/BU,aAAmC,WAE/B,IADAtgB,EAAM0B,EAAMoI,SAASrK,OAChBQ,EAAI,EAAGA,EAAID,EAAKC,IACjB3B,EAAK+L,oBACD3I,EAAMoI,SAAS7J,GAAI0f,IAI/BY,YAAmC,SAAU9hB,GACzCA,EAAOA,GAAQH,EAAKqM,cAChBlM,IAEIqD,EADyB,OAAzBrD,EAAKuD,gBACK1D,EAAKyhB,WAAWthB,GAAMyB,aAEtBwB,EAAMoI,SAGpBhI,EAAQgL,OAAOrO,EAAK0D,UAAW,GAE3B7D,EAAKqM,gBAAkBlM,IACvBH,EAAKqM,cAAgB;EAIjC6V,YAAmC,SAAU/hB,GAEzC,GADAA,EAAOA,GAAQH,EAAKqM,cAGhB,MADAlM,GAAK8M,cAAe,EACb9M,GAGfgiB,cAAmC,SAAUhiB,GAEzC,GADAA,EAAOA,GAAQH,EAAKqM,cAGhB,MADAlM,GAAK8M,cAAe,EACb9M,GAGfiiB,kBAAmC,WAC/B,MAAOpiB,GAAKqM,eAEhBgW,eAAmC,WAE/B,MADA3gB,GAAM0B,EAAMoI,SAASrK,OACjBO,EAAM,EACC0B,EAAMoI,SAAS,GAEnB,MAEX8W,aAAmC,SAAUniB,GACzC,MAAOA,GAAKyB,cAEhB2gB,aAAmC,SAAUpiB,GAEzC,GADAA,EAAOA,GAAQH,EAAKqM,cAQhB,MANA7I,GAAUxD,EAAKyhB,WAAWthB,GAEtBif,EADA5b,EACUA,EAAQ5B,aAERwB,EAAMoI,UAK5BgX,iBAAmC,SAAUriB,GAEzC,GADAA,EAAOA,GAAQH,EAAKqM,cAChBlM,IACAif,EAAUpf,EAAKuiB,aAAapiB,GAC5BiM,EAAIgT,EAAQje,OACRhB,EAAK0D,UAAYuI,GACjB,MAAOgT,GAAQjf,EAAK0D,UAAY,IAI5C4e,iBAAmC,SAAUtiB,GAGzC,GAFAA,EAAOA,GAAQH,EAAKqM,cACpB+S,EAAUpf,EAAKuiB,aAAapiB,GACxBA,EAAK0D,UAAY,EACjB,MAAOub,GAAQjf,EAAK0D,UAAY,IAGxC6e,gBAAmC,SAAUviB,GAEzC,MADAA,GAAOA,GAAQH,EAAKqM,cAChBlM,IACAif,EAAUjf,EAAKyB,aACXwd,GAAWA,EAAQje,OAAS,GACrBhB,EAAKyB,aAAa,GAG1B,MAEX+gB,kCAAmC,SAAUxiB,GAGzC,MAFAA,GAAOA,GAAQH,EAAKqM,eACpB+S,EAAUpf,EAAKwiB,iBAAiBriB,IAErBif,GAGX5b,EAAUxD,EAAKyhB,WAAWthB,GACnBH,EAAK2iB,kCAAkCnf,KAElDof,cAAmC,SAAUziB,GAGzC,GAFAA,EAAOA,GAAQH,EAAKqM,cAIhB,MADA+S,GAAUpf,EAAK0iB,gBAAgBviB,GAC3Bif,EACOA,EAEApf,EAAK2iB,kCAAkCxiB,IAI1D0iB,cAAmC,SAAU1iB,GAGzC,GAFAA,EAAOA,GAAQH,EAAKqM,cAIhB,OADA+S,EAAUpf,EAAKyiB,iBAAiBtiB,IAErBH,EAAK8iB,oBAAoB1D,GAGpC5b,EAAUxD,EAAKyhB,WAAWthB,IAIlC2iB,oBAAmC1f,EAAM8I,kBACzC6W,mBAAmC,SAAU5iB,GAGzC,GAFAA,EAAOA,GAAQH,EAAKqM,cAEhBlM,IACAqD,EAAUxD,EAAKyhB,WAAWthB,IAEtB,MAAOH,GAAK0M,YAAYlJ,IAIpCwf,kBAAmC,WAC/B,MAAOhjB,GAAK0M,YAAY1M,EAAKqiB,mBAEjCY,oBAAmC,SAAU9iB,GAGzC,GAFAA,EAAOA,GAAQH,EAAKqM,cAEhBlM,IACAif,EAAUpf,EAAKwiB,iBAAiBriB,IAE5B,MAAOH,GAAK0M,YAAY0S,IAIpC8D,oBAAmC,SAAU/iB,GAGzC,GAFAA,EAAOA,GAAQH,EAAKqM,cAEhBlM,IACAif,EAAUpf,EAAKyiB,iBAAiBtiB,IAE5B,MAAOH,GAAK0M,YAAY0S,IAIpC+D,iBAAmC,SAAUhjB,GAGzC,GAFAA,EAAOA,GAAQH,EAAKqM,cAEhBlM,IACAif,EAAUpf,EAAK4iB,cAAcziB,IAEzB,MAAOH,GAAK0M,YAAY0S,IAIpCgE,iBAAmC,SAAUjjB,GAGzC,GAFAA,EAAOA,GAAQH,EAAKqM,cAEhBlM,IACAif,EAAUpf,EAAK6iB,cAAc1iB,IAEzB,MAAOH,GAAK0M,YAAY0S,IAMxC,OADA3f,SAAQkM,OAAOvI,EAAMpD,KAAMA,GACpBoD,EAAMpD,KAGrB,OAAO6H,KAIfpI,QAAQK,OAAO,oCAAqCujB,KAE5C,iBAAkB,SAAU9b,GAC5BA,EAAe+b,IACX,iCACC,iCACA,cACA,SACA,4FACA,6FACA,gBACA,qGACA,4CACA,aACA,YACA,eACA,uCACA,6GACA,sFACA,uEACA,4IACA,mDACA,wDACA,gCACA,4EACA,8CACA,qBACA,4EACA,eACA,4FACA,kGACA,0CACA,kCACA,eACA,YACA,eACA,YAAYC,KAAK,KAGtBhc,EAAe+b,IACX,0CACA,iEAGJ/b,EAAe+b,IACX,0CACA,0EAKTE,KAAK7E","file":"ng-tree-dnd.min.js","sourcesContent":["/**\r\n * The MIT License (MIT)\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to\r\n * deal in the Software without restriction, including without limitation the\r\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\n * sell copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\n * IN THE SOFTWARE.\r\n * @preserve\r\n */\r\n\r\n/**\r\n * Implementing TreeDnD & Event DrapnDrop (allow drag multi tree-table include all type: table, ol, ul)\r\n * Demo: http://thienhung1989.github.io/angular-tree-dnd\r\n * Github: https://github.com/thienhung1989/angular-tree-dnd\r\n * @version 3.2.0\r\n * @preserve\r\n * (c) 2015 Nguyuễn Thiện Hùng - <nguyenthienhung1989@gmail.com>\r\n */\r\n(function () {\r\n    'use strict';\r\n    angular.isUndefinedOrNull = function (val) {\r\n        return angular.isUndefined(val) || val === null;\r\n    }\r\n\r\n    angular.isDefined = function (val) {\r\n        return !(angular.isUndefined(val) || val === null);\r\n    }\r\n\r\n    angular.module('ntt.TreeDnD', ['template/TreeDnD/TreeDnD.html']).constant(\r\n        '$TreeDnDClass', {\r\n            tree:   'tree-dnd',\r\n            empty:  'tree-dnd-empty',\r\n            hidden: 'tree-dnd-hidden',\r\n            node:   'tree-dnd-node',\r\n            nodes:  'tree-dnd-nodes',\r\n            handle: 'tree-dnd-handle',\r\n            place:  'tree-dnd-placeholder',\r\n            drag:   'tree-dnd-drag',\r\n            status: 'tree-dnd-status',\r\n            icon:   {\r\n                '1':  'glyphicon glyphicon-minus',\r\n                '0':  'glyphicon glyphicon-plus',\r\n                '-1': 'glyphicon glyphicon-file'\r\n            }\r\n        }\r\n    ).factory(\r\n    '$TreeDnDConvert', function () {\r\n        var _$initConvert = {\r\n            line2tree: function (data, primaryKey, parentKey) {\r\n                if (!data || data.length === 0 || !primaryKey || !parentKey) {\r\n                    return [];\r\n                }\r\n                var tree = [],\r\n                    rootIds = [],\r\n                    item = data[0],\r\n                    _primary = item[primaryKey],\r\n                    treeObjs = {},\r\n                    parentId, parent,\r\n                    len = data.length,\r\n                    i = 0;\r\n                while (i < len) {\r\n                    item = data[i++];\r\n                    _primary = item[primaryKey];\r\n                    treeObjs[_primary] = item;\r\n                    parentId = item[parentKey];\r\n                    if (parentId) {\r\n                        parent = treeObjs[parentId];\r\n                        if (parent.__children__) {\r\n                            parent.__children__.push(item);\r\n                        } else {\r\n                            parent.__children__ = [item];\r\n                        }\r\n                    } else {\r\n                        rootIds.push(_primary);\r\n                    }\r\n                }\r\n                len = rootIds.length;\r\n                for (i = 0; i < len; i++) {\r\n                    tree.push(treeObjs[rootIds[i]]);\r\n                }\r\n                return tree;\r\n            },\r\n            tree2tree: function (data, parentKey) {\r\n                var access_child = function (data) {\r\n                    var _tree = [];\r\n                    var _i, _len = data.length, _copy, _child;\r\n                    for (_i = 0; _i < _len; _i++) {\r\n                        _copy = angular.copy(data[_i]);\r\n                        if (angular.isArray(_copy[parentKey]) && _copy[parentKey].length > 0) {\r\n                            _child = access_child(_copy[parentKey]);\r\n                            delete(_copy[parentKey]);\r\n                            _copy.__children__ = _child;\r\n                        }\r\n                        _tree.push(_copy);\r\n                    }\r\n                    return _tree;\r\n                };\r\n\r\n                return access_child(data);\r\n            }\r\n        }\r\n\r\n        return _$initConvert;\r\n    }\r\n).factory(\r\n    '$TreeDnDHelper', [\r\n        '$document', '$window', function ($document, $window) {\r\n            var _$helper = {\r\n                nodrag:          function (targetElm) {\r\n                    return (typeof targetElm.attr('data-nodrag')) !== \"undefined\";\r\n                },\r\n                eventObj:        function (e) {\r\n                    var obj = e;\r\n                    if (e.targetTouches !== undefined) {\r\n                        obj = e.targetTouches.item(0);\r\n                    } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\r\n                        obj = e.originalEvent.targetTouches.item(0);\r\n                    }\r\n                    return obj;\r\n                },\r\n                dragInfo:        function (scope) {\r\n                    var _node = scope.getData(),\r\n                        _tree = scope.getScopeTree(),\r\n                        _parent = scope.getNode(_node.__parent_real__);\r\n                    return {\r\n                        node:    _node,\r\n                        parent:  _parent,\r\n                        move:    {\r\n                            parent: _parent,\r\n                            pos:    _node.__index__\r\n                        },\r\n                        scope:   scope,\r\n                        target:  _tree,\r\n                        drag:    _tree,\r\n                        drop:    scope.getPrevSibling(_node),\r\n                        changed: false\r\n                    };\r\n                },\r\n                height:          function (element) {\r\n                    return element.prop('scrollHeight');\r\n                },\r\n                width:           function (element) {\r\n                    return element.prop('scrollWidth');\r\n                },\r\n                offset:          function (element) {\r\n                    var boundingClientRect = element[0].getBoundingClientRect();\r\n                    return {\r\n                        width:  element.prop('offsetWidth'),\r\n                        height: element.prop('offsetHeight'),\r\n                        top:    boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\r\n                        left:   boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\r\n                    };\r\n                },\r\n                positionStarted: function (e, target) {\r\n                    var pos = {};\r\n                    pos.offsetX = e.pageX - this.offset(target).left;\r\n                    pos.offsetY = e.pageY - this.offset(target).top;\r\n                    pos.startX = pos.lastX = e.pageX;\r\n                    pos.startY = pos.lastY = e.pageY;\r\n                    pos.nowX = pos.nowY = pos.distX = pos.distY = pos.dirAx = 0;\r\n                    pos.dirX = pos.dirY = pos.lastDirX = pos.lastDirY = pos.distAxX = pos.distAxY = 0;\r\n                    return pos;\r\n                },\r\n                positionMoved:   function (e, pos, firstMoving) {\r\n                    // mouse position last events\r\n                    pos.lastX = pos.nowX;\r\n                    pos.lastY = pos.nowY;\r\n                    // mouse position this events\r\n                    pos.nowX = e.pageX;\r\n                    pos.nowY = e.pageY;\r\n                    // distance mouse moved between events\r\n                    pos.distX = pos.nowX - pos.lastX;\r\n                    pos.distY = pos.nowY - pos.lastY;\r\n                    // direction mouse was moving\r\n                    pos.lastDirX = pos.dirX;\r\n                    pos.lastDirY = pos.dirY;\r\n                    // direction mouse is now moving (on both axis)\r\n                    pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\r\n                    pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\r\n                    // axis mouse is now moving on\r\n                    var newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\r\n                    // do nothing on first move\r\n                    if (firstMoving) {\r\n                        pos.dirAx = newAx;\r\n                        pos.moving = true;\r\n                        return;\r\n                    }\r\n                    // calc distance moved on this axis (and direction)\r\n                    if (pos.dirAx !== newAx) {\r\n                        pos.distAxX = 0;\r\n                        pos.distAxY = 0;\r\n                    } else {\r\n                        pos.distAxX += Math.abs(pos.distX);\r\n                        if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\r\n                            pos.distAxX = 0;\r\n                        }\r\n                        pos.distAxY += Math.abs(pos.distY);\r\n                        if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\r\n                            pos.distAxY = 0;\r\n                        }\r\n                    }\r\n                    pos.dirAx = newAx;\r\n                },\r\n                replaceIndent:   function (scope, element, indent, attr) {\r\n                    attr = attr ? attr : 'left';\r\n                    angular.element(element.children()[0]).css(attr, scope.$callbacks.calsIndent(indent));\r\n                }\r\n            };\r\n            return _$helper;\r\n        }]\r\n).factory(\r\n    '$TreeDnDPlugin',['$injector', function ($injector) {\r\n        var _fnget = function (name) {\r\n                if (angular.isDefined($injector) && $injector.has(name)) {\r\n                    return $injector.get(name);\r\n                }\r\n                return null;\r\n            };\r\n        return _fnget;\r\n    }]\r\n).factory(\r\n    '$TreeDnDTemplate', [\r\n        '$templateCache', function ($templateCache) {\r\n            var templatePath = 'template/TreeDnD/TreeDnD.html',\r\n                copyPath = 'template/TreeDnD/TreeDnDStatusCopy.html',\r\n                movePath = 'template/TreeDnD/TreeDnDStatusMove.html',\r\n                scopes = {},\r\n                temp,\r\n                _$init = {\r\n                    setMove: function (path, scope) {\r\n                        if (!scopes[scope.$id]) {\r\n                            scopes[scope.$id] = {};\r\n                        }\r\n                        scopes[scope.$id].movePath = path;\r\n                    },\r\n                    setCopy: function (path, scope) {\r\n                        if (!scopes[scope.$id]) {\r\n                            scopes[scope.$id] = {};\r\n                        }\r\n                        scopes[scope.$id].copyPath = path;\r\n                    },\r\n                    getPath: function () {\r\n                        return templatePath;\r\n                    },\r\n                    getCopy: function (scope) {\r\n                        if (scopes[scope.$id] && scopes[scope.$id].copyPath) {\r\n                            temp = $templateCache.get(scopes[scope.$id].copyPath);\r\n                            if (temp) {\r\n                                return temp;\r\n                            }\r\n                        }\r\n                        return $templateCache.get(copyPath);\r\n                    },\r\n                    getMove: function (scope) {\r\n                        if (scopes[scope.$id] && scopes[scope.$id].movePath) {\r\n                            temp = $templateCache.get(scopes[scope.$id].movePath);\r\n                            if (temp) {\r\n                                return temp;\r\n                            }\r\n                        }\r\n                        return $templateCache.get(movePath);\r\n                    }\r\n                };\r\n\r\n            return _$init;\r\n        }]\r\n).directive(\r\n    'compile', [\r\n        '$compile', function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compile, function (new_val) {\r\n                            if (new_val) {\r\n                                /*\r\n                                 * Compile creates a linking function\r\n                                 * that can be used with any scope.\r\n                                 */\r\n                                var link = $compile(new_val);\r\n                                /*\r\n                                 * Executing the linking function\r\n                                 * creates a new element.\r\n                                 */\r\n                                var new_elem = link(scope);\r\n                                // Which we can then append to our DOM element.\r\n                                if(angular.isFunction(element.empty)){\r\n                                    element.empty()\r\n                                }else{\r\n                                    element.html('');\r\n                                }\r\n\r\n                                element.append(new_elem)\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n)\r\n    .directive(\r\n    'compileReplace', [\r\n        '$compile', function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compileReplace, function (new_val) {\r\n                            if (new_val) {\r\n                                /*\r\n                                 * Compile creates a linking function\r\n                                 * that can be used with any scope.\r\n                                 */\r\n                                var link = $compile(new_val);\r\n                                /*\r\n                                 * Executing the linking function\r\n                                 * creates a new element.\r\n                                 */\r\n                                var new_elem = link(scope);\r\n\r\n                                element.replaceWith(new_elem)\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n).directive(\r\n    'treeDndNodeHandle', function () {\r\n        return {\r\n            restrict: 'A',\r\n            scope:    true,\r\n            link:     function (scope, element, attrs) {\r\n                scope.$element = element;\r\n                scope.$type = 'TreeDnDNodeHandle';\r\n                if (scope.$class.handle) {\r\n                    element.addClass(scope.$class.handle);\r\n                }\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDndNode', function () {\r\n        return {\r\n            restrict: 'A',\r\n            replace:  true,\r\n            link:     function (scope, element, attrs) {\r\n                var _enabledDragDrop = (typeof scope.dragEnabled === 'boolean' || typeof scope.dropEnabled === 'boolean');\r\n                scope.$modelValue = null;\r\n                scope.$icon_class = '';\r\n                scope.$node_class = '';\r\n\r\n                if (scope.$class.node) {\r\n                    element.addClass(scope.$class.node);\r\n                    scope.$node_class = scope.$class.node;\r\n                }\r\n\r\n                scope.$watch(\r\n                    attrs.treeDndNode, function (newValue, oldValue, scope) {\r\n                        if (_enabledDragDrop) {\r\n                            scope.setScope(scope, newValue);\r\n                        }\r\n                        scope.$modelValue = newValue;\r\n                        scope.$icon_class = scope.$class.icon[newValue.__icon__];\r\n                    }, true\r\n                );\r\n\r\n                if (_enabledDragDrop) {\r\n\r\n                    scope.$element = element;\r\n                    scope.$type = 'TreeDnDNode';\r\n\r\n                    scope.getScopeNode = function () {\r\n                        return scope;\r\n                    };\r\n\r\n                    scope.getData = function () {\r\n                        return scope.$modelValue;\r\n                    };\r\n\r\n                    scope.getElementChilds = function () {\r\n                        return angular.element(element[0].querySelector('[tree-dnd-nodes]'));\r\n                    };\r\n                }\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDndNodes', function () {\r\n        return {\r\n            restrict: 'A',\r\n            replace:  true,\r\n            link:     function (scope, element, attrs) {\r\n                scope.nodes = [];\r\n                scope.$nodes_class = '';\r\n                scope.$type = 'TreeDnDNodes';\r\n                scope.$element = element;\r\n                scope.getScopeNode = null;\r\n\r\n                scope.$watch(\r\n                    attrs.treeDndNodes, function (newValue, oldValue, scope) {\r\n                        scope.nodes = newValue;\r\n                    }, true\r\n                );\r\n\r\n                if (scope.$class.nodes) {\r\n                    element.addClass(scope.$class.nodes);\r\n                    scope.$nodes_class = scope.$class.nodes;\r\n                }\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDnd', [\r\n        '$injector', '$timeout', '$http', '$compile', '$window', '$document', '$templateCache',\r\n        '$TreeDnDTemplate', '$TreeDnDClass', '$TreeDnDHelper', '$TreeDnDPlugin',\r\n        function ($injector, $timeout, $http, $compile, $window, $document, $templateCache,\r\n                  $TreeDnDTemplate, $TreeDnDClass, $TreeDnDHelper, $TreeDnDPlugin) {\r\n            return {\r\n                restrict:   'E',\r\n                scope:      true,\r\n                replace:    true,\r\n                controller: [\r\n                    '$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\r\n                        $scope.indent = 20;\r\n                        $scope.indent_plus = 15;\r\n                        $scope.indent_unit = 'px';\r\n                        $scope.$tree_class = 'table';\r\n                        $scope.primary_key = '__uid__';\r\n                        $scope.hasMultiSelect = $attrs.hasMultiSelect === 'true';\r\n\r\n                        $scope.$type = 'TreeDnD';\r\n                        // $scope.enabledFilter = null;\r\n                        $scope.colDefinitions = [];\r\n                        $scope.$globals = {};\r\n                        $scope.$class = {};\r\n\r\n                        $scope.treeData = [];\r\n                        $scope.tree_nodes = [];\r\n\r\n                        $scope.sycning = false;\r\n\r\n                        $scope.$class = angular.copy($TreeDnDClass);\r\n                        angular.extend(\r\n                            $scope.$class.icon, {\r\n                                '1':  $attrs.iconExpand || 'glyphicon glyphicon-minus',\r\n                                '0':  $attrs.iconCollapse || 'glyphicon glyphicon-plus',\r\n                                '-1': $attrs.iconLeaf || 'glyphicon glyphicon-file'\r\n                            }\r\n                        );\r\n\r\n                        $scope.for_all_descendants = function (node, fn) {\r\n                            if (angular.isFunction(fn)) {\r\n                                var _i, _len, _nodes;\r\n\r\n                                if (fn(node)) {\r\n                                    return false;\r\n                                }\r\n                                _nodes = node.__children__;\r\n                                _len = _nodes.length;\r\n                                for (_i = 0; _i < _len; _i++) {\r\n                                    if (!$scope.for_all_descendants(_nodes[_i], fn)) {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                            }\r\n                            return true;\r\n                        };\r\n\r\n                        $scope.getLastDescendant = function (node) {\r\n                            var last_child, n;\r\n                            if (!node) {\r\n                                node = $scope.tree ? $scope.tree.selected_node : false;\r\n                            }\r\n                            if(node === false){\r\n                                return false;\r\n                            }\r\n                            n = node.__children__.length;\r\n                            if (n === 0) {\r\n                                return node;\r\n                            } else {\r\n                                last_child = node.__children__[n - 1];\r\n                                return $scope.getLastDescendant(last_child);\r\n                            }\r\n                        };\r\n\r\n                        $scope.getElementChilds = function () {\r\n                            return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\r\n                        };\r\n\r\n                        $scope.onClick = function (node) {\r\n                            if (angular.isDefined($scope.tree) && angular.isFunction($scope.tree.on_click)) {\r\n                                // We want to detach from Angular's digest cycle so we can\r\n                                // independently measure the time for one cycle.\r\n                                setTimeout(\r\n                                    function () {\r\n                                        $scope.tree.on_click(node);\r\n                                    }, 0\r\n                                );\r\n                            }\r\n                        };\r\n\r\n                        $scope.onSelect = function (node) {\r\n                            if (angular.isDefined($scope.tree)) {\r\n                                if (node !== $scope.tree.selected_node) {\r\n                                    $scope.tree.select_node(node);\r\n                                }\r\n\r\n                                if (angular.isFunction($scope.tree.on_select)) {\r\n                                    setTimeout(\r\n                                        function () {\r\n                                            $scope.tree.on_select(node);\r\n                                        }, 0\r\n                                    );\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        var passedExpand, _clone;\r\n                        $scope.toggleExpand = function (node, fnCallback) {\r\n                            passedExpand = true;\r\n                            if (angular.isFunction(fnCallback) && !fnCallback(node)) {\r\n                                passedExpand = false;\r\n                            } else if (angular.isFunction($scope.$callbacks.expand) && !$scope.$callbacks.expand(node)) {\r\n                                passedExpand = false;\r\n                            }\r\n\r\n                            if (passedExpand) {\r\n                                if (node.__children__.length > 0) {\r\n                                    node.__expanded__ = !node.__expanded__;\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        $scope.getHash = function (node) {\r\n                            if ($scope.primary_key === '__uid__') {\r\n                                return '#' + node.__parent__ + '#' + node.__uid__;\r\n                            } else {\r\n                                return '#' + node.__parent__ + '#' + node[$scope.primary_key];\r\n                            }\r\n                        };\r\n\r\n                        $scope.$callbacks = {\r\n                            for_all_descendants: $scope.for_all_descendants,\r\n                            expand:              function (node) {\r\n                                return true;\r\n                            },\r\n                            accept:              function (dragInfo, moveTo, isChanged) {\r\n                                return $scope.dropEnabled === true;\r\n                            },\r\n                            calsIndent:          function (level, skipUnit, skipEdge) {\r\n                                var unit = 0,\r\n                                    edge = skipEdge ? 0 : $scope.indent_plus;\r\n                                if (!skipUnit) {\r\n                                    unit = $scope.indent_unit ? $scope.indent_unit : 'px';\r\n                                }\r\n\r\n                                if (level - 1 < 1) {\r\n                                    return edge + unit;\r\n                                } else {\r\n                                    return $scope.indent * (level - 1) + edge + unit;\r\n                                }\r\n                            },\r\n                            droppable:           function () {\r\n                                return $scope.dropEnabled === true;\r\n                            },\r\n                            draggable:           function () {\r\n                                return $scope.dragEnabled === true;\r\n                            },\r\n                            beforeDrop:          function (event) {\r\n                                return true;\r\n                            },\r\n                            changeKey:           function (node) {\r\n                                var _key = node.__uid__;\r\n                                node.__uid__ = Math.random();\r\n                                if (node.__selected__) {\r\n                                    delete(node.__selected__);\r\n                                }\r\n\r\n                                if ($scope.primary_key !== '__uid__') {\r\n                                    _key = '' + node[$scope.primary_key];\r\n                                    _key = _key.replace(/_#.+$/g, '') + '_#' + node.__uid__;\r\n\r\n                                    node[$scope.primary_key] = _key;\r\n                                }\r\n                                // delete(node.__hashKey__);\r\n                            },\r\n                            clone:               function (node, _this) {\r\n                                _clone = angular.copy(node);\r\n                                this.for_all_descendants(_clone, this.changeKey);\r\n                                return _clone;\r\n                            },\r\n                            remove:              function (node, parent, _this) {\r\n                                return parent.splice(node.__index__, 1)[0];\r\n                            },\r\n                            add:                 function (node, pos, parent, _this) {\r\n                                if (parent) {\r\n                                    if (parent.length > -1) {\r\n                                        if (pos > -1) {\r\n                                            parent.splice(pos, 0, node);\r\n                                        } else {\r\n                                            // todo If children need load crazy\r\n                                            parent.push(node);\r\n                                        }\r\n                                    } else {\r\n                                        parent.push(node);\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        if ($attrs.enableDrag || $attrs.enableDrop) {\r\n                            $scope.placeElm = null;\r\n                            //                            $scope.dragBorder = 30;\r\n                            $scope.dragEnabled = null;\r\n                            $scope.dropEnabled = null;\r\n                            $scope.horizontal = null;\r\n\r\n                            if ($attrs.enableDrag) {\r\n\r\n                                $scope.dragDelay = 0;\r\n                                $scope.enabledMove = true;\r\n                                $scope.statusMove = true;\r\n                                $scope.enabledHotkey = false;\r\n                                $scope.enabledCollapse = null;\r\n                                $scope.statusElm = null;\r\n                                $scope.dragging = null;\r\n\r\n                                angular.extend(\r\n                                    $scope.$callbacks, {\r\n                                        beforeDrag: function (scopeDrag) {\r\n                                            return true;\r\n                                        },\r\n                                        dragStop:   function (event, skiped) {},\r\n                                        dropped:    function (info, pass, isMove) {\r\n                                            if (!info) {\r\n                                                return null;\r\n                                            }\r\n\r\n                                            if (!info.changed && isMove) {\r\n                                                return false;\r\n                                            }\r\n                                            var _node = info.node,\r\n                                                _nodeAdd = null,\r\n                                                _move = info.move,\r\n                                                _parent = null,\r\n                                                _parentRemove = (info.parent || info.drag.treeData),\r\n                                                _parentAdd = (_move.parent || info.target.treeData);\r\n\r\n                                            if (info.target.$callbacks.accept(info, info.move, info.changed)) {\r\n                                                if (isMove) {\r\n                                                    _parent = _parentRemove;\r\n                                                    if (angular.isDefined(_parent.__children__)) {\r\n                                                        _parent = _parent.__children__;\r\n                                                    }\r\n\r\n                                                    _nodeAdd = info.drag.$callbacks.remove(\r\n                                                        _node,\r\n                                                        _parent,\r\n                                                        info.drag.$callbacks\r\n                                                    );\r\n                                                } else {\r\n                                                    _nodeAdd = info.drag.$callbacks.clone(_node, info.drag.$callbacks);\r\n                                                }\r\n\r\n                                                // if node dragging change index in sample node parent\r\n                                                // and index node decrement\r\n                                                if (isMove &&\r\n                                                    info.drag === info.target &&\r\n                                                    _parentRemove === _parentAdd &&\r\n                                                    _move.pos >= info.node.__index__) {\r\n                                                    _move.pos--;\r\n                                                }\r\n\r\n                                                _parent = _parentAdd;\r\n                                                if (_parent.__children__) {\r\n                                                    _parent = _parent.__children__;\r\n                                                }\r\n\r\n                                                info.target.$callbacks.add(\r\n                                                    _nodeAdd,\r\n                                                    _move.pos,\r\n                                                    _parent,\r\n                                                    info.drag.$callbacks\r\n                                                );\r\n\r\n                                                return true;\r\n                                            }\r\n\r\n                                            return false;\r\n                                        },\r\n                                        dragStart:  function (event) {},\r\n                                        dragMove:   function (event) {}\r\n                                    }\r\n                                );\r\n\r\n                                $scope.setDragging = function (dragInfo) {\r\n                                    $scope.dragging = dragInfo;\r\n                                };\r\n\r\n                                $scope.enableMove = function (val) {\r\n                                    if (typeof val === \"boolean\") {\r\n                                        $scope.enabledMove = val;\r\n                                    } else {\r\n                                        $scope.enabledMove = true;\r\n                                    }\r\n                                };\r\n\r\n                                if ($attrs.enableStatus) {\r\n                                    $scope.enabledStatus = false;\r\n\r\n                                    $scope.hideStatus = function () {\r\n                                        if ($scope.statusElm) {\r\n                                            $scope.statusElm.addClass($scope.$class.hidden);\r\n                                        }\r\n                                    };\r\n\r\n                                    $scope.refreshStatus = function () {\r\n                                        if (!$scope.dragging) {\r\n                                            return;\r\n                                        }\r\n\r\n                                        if ($scope.enabledStatus) {\r\n                                            var statusElmOld = $scope.statusElm;\r\n                                            if ($scope.enabledMove) {\r\n                                                $scope.statusElm = angular.element($TreeDnDTemplate.getMove($scope));\r\n                                            } else {\r\n                                                $scope.statusElm = angular.element($TreeDnDTemplate.getCopy($scope));\r\n                                            }\r\n\r\n                                            if (statusElmOld !== $scope.statusElm) {\r\n                                                if (statusElmOld) {\r\n                                                    $scope.statusElm.attr('class', statusElmOld.attr('class'));\r\n                                                    $scope.statusElm.attr('style', statusElmOld.attr('style'));\r\n                                                    statusElmOld.remove();\r\n                                                }\r\n                                                $document.find('body').append($scope.statusElm);\r\n\r\n                                            }\r\n\r\n                                            $scope.statusElm.removeClass($scope.$class.hidden);\r\n                                        }\r\n                                    };\r\n\r\n                                    $scope.setPositionStatus = function (e) {\r\n                                        if ($scope.statusElm) {\r\n                                            $scope.statusElm.css(\r\n                                                {\r\n                                                    'left':    e.pageX + 10 + 'px',\r\n                                                    'top':     e.pageY + 15 + 'px',\r\n                                                    'z-index': 9999\r\n                                                }\r\n                                            );\r\n                                            $scope.statusElm.addClass($scope.$class.status);\r\n                                        }\r\n                                    };\r\n                                }\r\n                            }\r\n\r\n                            $scope.targeting = false;\r\n\r\n                            $scope.getPrevSibling = function (node) {\r\n                                if (node && node.__index__ > 0) {\r\n                                    var _parent, _index = node.__index__ - 1;\r\n\r\n                                    if (angular.isDefined(node.__parent_real__)) {\r\n                                        _parent = $scope.tree_nodes[node.__parent_real__];\r\n                                        return _parent.__children__[_index];\r\n                                    }\r\n                                    return $scope.treeData[_index];\r\n\r\n                                }\r\n                                return null;\r\n                            };\r\n\r\n                            $scope.getNode = function (index) {\r\n                                if (angular.isUndefinedOrNull(index)) {\r\n                                    return null;\r\n                                }\r\n                                return $scope.tree_nodes[index];\r\n                            };\r\n\r\n                            $scope.setScope = function (scope, node) {\r\n                                var _hash = $scope.getHash(node);\r\n                                if ($scope.$globals[_hash] !== scope) {\r\n                                    $scope.$globals[_hash] = scope;\r\n                                }\r\n                            };\r\n\r\n                            $scope.getScope = function (node) {\r\n                                if (node) {\r\n                                    return $scope.$globals[$scope.getHash(node)];\r\n                                }\r\n                                return $scope;\r\n\r\n                            };\r\n\r\n                            $scope.initPlace = function (element, dragElm) {\r\n\r\n                                var tagName = null,\r\n                                    isTable = false;\r\n\r\n                                if (element) {\r\n                                    tagName = element.prop('tagName').toLowerCase();\r\n                                    isTable = (tagName === 'tr' || tagName === 'td');\r\n                                } else {\r\n                                    tagName = $scope.getElementChilds().prop('tagName').toLowerCase();\r\n                                    isTable = (tagName === 'tbody' || tagName === 'table');\r\n                                }\r\n\r\n                                if (!$scope.placeElm) {\r\n\r\n                                    if (isTable) {\r\n                                        $scope.placeElm = angular.element($window.document.createElement('tr'));\r\n                                        var _len_down = $scope.colDefinitions.length;\r\n                                        $scope.placeElm.append(\r\n                                            angular.element($window.document.createElement('td'))\r\n                                                .addClass($scope.$class.empty)\r\n                                                .addClass('indented')\r\n                                                .addClass($scope.$class.place)\r\n                                        );\r\n                                        while (_len_down-- > 0) {\r\n                                            $scope.placeElm.append(\r\n                                                angular.element($window.document.createElement('td'))\r\n                                                    .addClass($scope.$class.empty)\r\n                                                    .addClass($scope.$class.place)\r\n                                            );\r\n                                        }\r\n                                    } else {\r\n                                        $scope.placeElm = angular.element($window.document.createElement('li'))\r\n                                            .addClass($scope.$class.empty)\r\n                                            .addClass($scope.$class.place);\r\n                                    }\r\n\r\n                                }\r\n\r\n                                if (dragElm) {\r\n                                    $scope.placeElm.css('height', $TreeDnDHelper.height(dragElm) + 'px');\r\n                                }\r\n\r\n                                if (element) {\r\n                                    element[0].parentNode.insertBefore($scope.placeElm[0], element[0]);\r\n                                } else {\r\n                                    $scope.getElementChilds().append($scope.placeElm);\r\n                                }\r\n\r\n                                return $scope.placeElm;\r\n                            };\r\n\r\n                            $scope.hidePlace = function () {\r\n                                if ($scope.placeElm) {\r\n                                    $scope.placeElm.addClass($scope.$class.hidden);\r\n                                }\r\n                            };\r\n\r\n                            $scope.showPlace = function () {\r\n                                if ($scope.placeElm) {\r\n                                    $scope.placeElm.removeClass($scope.$class.hidden);\r\n                                }\r\n                            };\r\n\r\n                            $scope.getScopeTree = function () {\r\n                                return $scope;\r\n                            };\r\n\r\n                        }\r\n\r\n                        $scope.$safeApply = function (fn) {\r\n                            var phase = this.$root.$$phase;\r\n                            if (phase === '$apply' || phase === '$digest') {\r\n                                if (fn && (typeof(fn) === 'function')) {\r\n                                    fn();\r\n                                }\r\n                            } else {\r\n                                this.$apply(fn);\r\n                            }\r\n                        };\r\n\r\n                    }],\r\n                compile:    function compile(tElement, tAttrs) {\r\n\r\n                    var $_Template = '',\r\n                        _element = tElement.html().trim();\r\n                    if (_element.length > 0) {\r\n                        $_Template = _element;\r\n                        tElement.html('');\r\n                    }\r\n\r\n                    return function fnPost(scope, element, attrs) {\r\n                        var getExpandOn = function () {\r\n                                if (scope.treeData && scope.treeData.length) {\r\n                                    var _firstNode = scope.treeData[0], _keys = Object.keys(_firstNode),\r\n                                        _regex = new RegExp(\"^__([a-zA-Z0-9_\\-]*)__$\"),\r\n                                        _len,\r\n                                        i;\r\n                                    // Auto get first field with type is string;\r\n                                    for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                                        if (typeof (_firstNode[_keys[i]]) === 'string' && !_regex.test(_keys[i])) {\r\n                                            scope.expandingProperty = _keys[i];\r\n                                            return;\r\n                                        }\r\n                                    }\r\n\r\n                                    // Auto get first\r\n                                    if (angular.isUndefinedOrNull(scope.expandingProperty)) {\r\n                                        scope.expandingProperty = _keys[0];\r\n                                    }\r\n\r\n                                }\r\n                            },\r\n                            getColDefs = function () {\r\n                                // Auto get Defs except attribute __level__ ....\r\n                                if (scope.treeData.length) {\r\n                                    var _col_defs = [], _firstNode = scope.treeData[0],\r\n                                        _regex = new RegExp(\"(^__([a-zA-Z0-9_\\-]*)__$|^\" + scope.expandingProperty + \"$)\"),\r\n                                        _keys = Object.keys(_firstNode),\r\n                                        i, _len;\r\n                                    // Auto get first field with type is string;\r\n                                    for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                                        if (typeof (_firstNode[_keys[i]]) === 'string' && !_regex.test(_keys[i])) {\r\n                                            _col_defs.push(\r\n                                                {\r\n                                                    field: _keys[i]\r\n                                                }\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                    scope.colDefinitions = _col_defs;\r\n                                }\r\n                            },\r\n                            _fnInitFilter,\r\n                            _fnInitOrderBy,\r\n                            _fnGetControl,\r\n                            _fnInitDrag,\r\n                            do_f = function (root, node, parent, parent_real, level, visible, index) {\r\n                                var _i, _len, _icon, _index_real, _dept, _hashKey;\r\n                                if (!angular.isArray(node.__children__)) {\r\n                                    node.__children__ = [];\r\n                                }\r\n\r\n                                node.__parent_real__ = parent_real;\r\n                                node.__parent__ = parent;\r\n                                _len = node.__children__.length;\r\n\r\n                                if (angular.isUndefinedOrNull(node.__expanded__) && _len > 0) {\r\n                                    node.__expanded__ = level < scope.expandLevel;\r\n                                }\r\n\r\n                                if (_len === 0) {\r\n                                    _icon = -1;\r\n                                } else {\r\n                                    if (node.__expanded__) {\r\n                                        _icon = 1;\r\n                                    } else {\r\n                                        _icon = 0;\r\n                                    }\r\n                                }\r\n                                // Insert item vertically\r\n                                _index_real = root.length;\r\n                                node.__index__ = index;\r\n                                node.__index_real__ = _index_real;\r\n                                node.__level__ = level;\r\n                                node.__icon__ = _icon;\r\n                                node.__visible__ = !!visible;\r\n\r\n                                if (angular.isUndefinedOrNull(node.__uid__)) {\r\n                                    node.__uid__ = \"\" + Math.random();\r\n                                }\r\n\r\n                                root.push(node);\r\n\r\n                                // Check node children\r\n                                _dept = 1;\r\n                                if (_len > 0) {\r\n                                    for (_i = 0; _i < _len; _i++) {\r\n                                        _dept += do_f(\r\n                                            root,\r\n                                            node.__children__[_i],\r\n                                            (scope.primary_key === '__uid__') ? node.__uid__ : node[scope.primary_key],\r\n                                            _index_real,\r\n                                            level + 1,\r\n                                            visible && node.__expanded__,\r\n                                            _i\r\n                                        );\r\n                                    }\r\n                                }\r\n\r\n                                _hashKey = scope.getHash(node);\r\n\r\n                                if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\r\n                                    node.__hashKey__ = _hashKey;\r\n                                    // delete(scope.$globals[_hashKey]);\r\n                                }\r\n\r\n                                node.__dept__ = _dept;\r\n\r\n                                return _dept;\r\n                            },\r\n                            reload_data = function (oData) {\r\n                                var _data,\r\n                                    _len,\r\n                                    _tree_nodes = [];\r\n//                                console.log('---------');\r\n                                if (angular.isDefined(oData)) {\r\n                                    if (!angular.isArray(oData) || oData.length === 0) {\r\n                                        return [];\r\n                                    } else {\r\n                                        _data = oData;\r\n                                    }\r\n                                } else if (!angular.isArray(scope.treeData) || scope.treeData.length === 0) {\r\n                                    return [];\r\n                                } else {\r\n                                    _data = scope.treeData;\r\n                                }\r\n\r\n                                if (!attrs.expandOn) {\r\n                                    getExpandOn();\r\n                                }\r\n\r\n                                if (!attrs.columnDefs) {\r\n                                    getColDefs();\r\n                                }\r\n\r\n                                if (angular.isDefined(scope.orderBy)) {\r\n                                    if (!angular.isFunction(_fnInitOrderBy)) {\r\n                                        _fnInitOrderBy = $TreeDnDPlugin('$TreeDnDOrderBy');\r\n                                    }\r\n\r\n                                    if (angular.isFunction(_fnInitOrderBy)) {\r\n                                        _data = _fnInitOrderBy(_data, scope.orderBy);\r\n                                    }\r\n                                }\r\n\r\n                                if (angular.isDefined(scope.filter)) {\r\n                                    if (!angular.isFunction(_fnInitFilter)) {\r\n                                        _fnInitFilter = $TreeDnDPlugin('$TreeDnDFilter');\r\n                                    }\r\n\r\n                                    if (angular.isFunction(_fnInitFilter)) {\r\n                                        _data = _fnInitFilter(_data, scope.filter, scope.filterOptions);\r\n                                    }\r\n                                }\r\n\r\n                                _len = _data.length;\r\n                                if (_len > 0) {\r\n                                    var _i,\r\n                                        _offset, _max, _min, _keys,\r\n                                        _deptTotal = 0;\r\n\r\n                                    for (_i = 0; _i < _len; _i++) {\r\n                                        _deptTotal += do_f(_tree_nodes, _data[_i], null, null, 1, true, _i);\r\n                                    }\r\n\r\n                                    // clear Element Empty\r\n                                    _keys = Object.keys(scope.$globals);\r\n                                    _len = scope.$globals.length;\r\n                                    _offset = _len - _deptTotal;\r\n\r\n                                    if (_offset !== 0) {\r\n                                        _max = _len - _offset;\r\n                                        _min = _max - Math.abs(_offset);\r\n                                        for (_i = _min; _i < _max; _i++) {\r\n                                            delete(scope.$globals[_keys[_i]]);\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                // clear memory\r\n                                if (angular.isDefined(scope.tree_nodes)) {\r\n                                    delete(scope.tree_nodes);\r\n                                }\r\n\r\n                                scope.tree_nodes = _tree_nodes;\r\n                                return _tree_nodes;\r\n                            },\r\n                            _defaultFilterOption = {\r\n                                showParent: true,\r\n                                showChild:  false,\r\n                                beginAnd:   true\r\n                            },\r\n                            tree,\r\n                            check_exist_attr = function (attrs, existAttr, isAnd) {\r\n                                if (angular.isUndefinedOrNull(existAttr)) {\r\n                                    return false;\r\n                                }\r\n\r\n                                if (existAttr === '*' || !angular.isUndefined(attrs[existAttr])) {\r\n                                    return true;\r\n                                }\r\n\r\n                                if (angular.isArray(existAttr)) {\r\n                                    return for_each_attrs(attrs, existAttr, isAnd);\r\n                                }\r\n                            },\r\n                            for_each_attrs = function (attrs, exist, isAnd) {\r\n                                var i, len = exist.length, passed = false;\r\n\r\n                                if (len === 0) {\r\n                                    return null;\r\n                                }\r\n                                for (i = 0; i < len; i++) {\r\n                                    if (check_exist_attr(attrs, exist[i], !isAnd)) {\r\n                                        passed = true;\r\n                                        if (!isAnd) {\r\n                                            return true;\r\n                                        }\r\n                                    } else {\r\n                                        if (isAnd) {\r\n                                            return false;\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                return passed;\r\n                            },\r\n                            generateWatch = function (type, nameAttr, valDefault, nameScope, fnNotExist, fnAfter, fnBefore) {\r\n                                nameScope = nameScope || nameAttr;\r\n                                if (typeof type === 'string' || angular.isArray(type)) {\r\n                                    if (angular.isFunction(fnBefore) && fnBefore()) {\r\n                                        return;//jmp\r\n                                    }\r\n                                    if (typeof tAttrs[nameAttr] === 'string') {\r\n                                        scope.$watch(\r\n                                            tAttrs[nameAttr], function (val, old, scope) {\r\n                                                if ((typeof type === 'string' && typeof val === type) ||\r\n                                                    (angular.isArray(type) && type.indexOf(typeof val) > -1)\r\n                                                ) {\r\n                                                    scope[nameScope] = val;\r\n                                                } else {\r\n                                                    if (angular.isFunction(valDefault)) {\r\n                                                        scope[nameScope] = valDefault(val);\r\n                                                    } else {\r\n                                                        scope[nameScope] = valDefault;\r\n                                                    }\r\n                                                }\r\n\r\n                                                if (angular.isFunction(fnAfter)) {\r\n                                                    fnAfter(scope[nameScope], scope);\r\n                                                }\r\n                                            }, true\r\n                                        );\r\n                                    } else {\r\n\r\n                                        if (angular.isFunction(fnNotExist)) {\r\n                                            scope[nameScope] = fnNotExist();\r\n                                        } else if (!angular.isUndefined(fnNotExist)) {\r\n                                            scope[nameScope] = fnNotExist;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            _watches = [\r\n                                [\r\n                                    'enableDrag', [\r\n                                    ['boolean', 'enableStatus', null, 'enabledStatus'],\r\n                                    ['boolean', 'enableMove', null, 'enabledMove'],\r\n                                    ['number', 'dragDelay', 0, null, 0],\r\n                                    ['boolean', 'enableCollapse', null, 'enabledCollapse'],\r\n                                    [\r\n                                        'boolean', 'enableHotkey', null, 'enabledHotkey', null, function (isHotkey) {\r\n                                        if (isHotkey) {\r\n                                            scope.enabledMove = false;\r\n                                        } else {\r\n                                            scope.enabledMove = scope.statusMove;\r\n                                        }\r\n                                    }]\r\n                                ]],\r\n                                [\r\n                                    ['enableDrag', 'enableStatus'], [\r\n                                    [\r\n                                        'string', 'templateCopy', attrs.templateCopy, 'templateCopy', null,\r\n                                        function (_url) {\r\n                                            if (_url && $templateCache.get(_url)) {\r\n                                                $TreeDnDTemplate.setCopy(_url, scope);\r\n                                            }\r\n                                        }],\r\n                                    [\r\n                                        'string', 'templateMove', attrs.templateMove, 'templateMove', null,\r\n                                        function (_url) {\r\n                                            if (_url && $templateCache.get(_url)) {\r\n                                                $TreeDnDTemplate.setMove(_url, scope);\r\n                                            }\r\n                                        }]\r\n                                ]],\r\n                                [\r\n                                    [['enableDrag', 'enableDrop']], [\r\n                                    ['number', 'dragBorder', 30, 'dragBorder', 30]]\r\n                                ],\r\n                                [\r\n                                    '*', [\r\n                                    ['boolean', 'horizontal'],\r\n                                    [\r\n                                        'callback', 'treeClass', function (val) {\r\n                                        switch (typeof val) {\r\n                                            case 'string':\r\n                                                scope.$tree_class = val;\r\n                                                break;\r\n                                            case 'object':\r\n                                                angular.extend(scope.$class, val);\r\n                                                scope.$tree_class = scope.$class.tree;\r\n                                                break;\r\n                                            default:\r\n                                                scope.$tree_class = attrs.treeClass;\r\n                                                break;\r\n                                        }\r\n                                    }, 'treeClass', function () {\r\n                                        scope.$tree_class = scope.$class.tree + ' table';\r\n                                    }, null, function () {\r\n                                        if (/^(\\s+[\\w\\-]+){2,}$/g.test(\" \" + attrs.treeClass)) {\r\n                                            scope.$tree_class = attrs.treeClass.trim();\r\n                                            return true;\r\n                                        }\r\n                                    }],\r\n                                    [\r\n                                        ['object', 'string'], 'expandOn', getExpandOn, 'expandingProperty', getExpandOn,\r\n                                        function (expandOn) {\r\n                                            if (angular.isUndefinedOrNull(expandOn)) {\r\n                                                scope.expandingProperty = attrs.expandOn;\r\n                                            }\r\n                                        }],\r\n                                    [\r\n                                        'object', 'treeControl', angular.isDefined(scope.tree) ? scope.tree : {},\r\n                                        'tree', null, function ($tree) {\r\n\r\n                                        if (!angular.isFunction(_fnGetControl)) {\r\n                                            _fnGetControl = $TreeDnDPlugin('$TreeDnDControl');\r\n                                        }\r\n\r\n                                        if (angular.isFunction(_fnGetControl)) {\r\n                                            tree = angular.extend(\r\n                                                $tree,\r\n                                                _fnGetControl(scope)\r\n                                            );\r\n                                        }\r\n                                    }],\r\n                                    [\r\n                                        ['array', 'object'], 'columnDefs', getColDefs, 'colDefinitions', getColDefs,\r\n                                        function (colDefs) {\r\n                                            if (angular.isUndefinedOrNull(colDefs) || !angular.isArray(colDefs)) {\r\n                                                scope.colDefinitions = getColDefs();\r\n                                            }\r\n                                        }],\r\n                                    [['object', 'string', 'array', 'function'], 'orderBy', attrs.orderBy],\r\n                                    [\r\n                                        ['object', 'array'], 'filter', null, 'filter', null, function (filters) {\r\n                                        var _passed = false;\r\n                                        if (angular.isDefined(filters) && !angular.isArray(filters)) {\r\n                                            var _keysF = Object.keys(filters),\r\n                                                _lenF = _keysF.length, _iF;\r\n\r\n                                            if (_lenF > 0) {\r\n                                                for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                                                    if ((typeof filters[_keysF[_iF]]) === 'string' &&\r\n                                                        filters[_keysF[_iF]].length === 0) {\r\n                                                        continue;\r\n                                                    }\r\n                                                    _passed = true;\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                        scope.enabledFilter = _passed;\r\n                                        reload_data();\r\n                                    }],\r\n                                    [\r\n                                        'object', 'filterOptions', _defaultFilterOption, 'filterOptions',\r\n                                        _defaultFilterOption, function (option) {\r\n                                        if (typeof option === \"object\") {\r\n                                            scope.filterOptions = angular.extend(_defaultFilterOption, option);\r\n                                        }\r\n                                    }],\r\n                                    ['string', 'primaryKey', attrs.primaryKey, 'primary_key', '__uid__'],\r\n                                    ['string', 'indentUnit', attrs.indentUnit, 'indent_unit'],\r\n                                    ['number', 'indent', 30, null, 30],\r\n                                    ['number', 'indentPlus', 20, null, 20],\r\n                                    [\r\n                                        'null', 'callbacks',\r\n                                        function (optCallbacks) {\r\n                                            angular.forEach(\r\n                                                optCallbacks, function (value, key) {\r\n                                                    if (typeof value === \"function\") {\r\n                                                        if (scope.$callbacks[key]) {\r\n                                                            scope.$callbacks[key] = value;\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            );\r\n                                            return scope.$callbacks;\r\n                                        },\r\n                                        '$callbacks'\r\n                                    ],\r\n                                    [\r\n                                        'number', 'expandLevel', 3, 'expandLevel', 3, function () {\r\n                                        reload_data();\r\n                                    }],\r\n                                    ['boolean', 'enableDrag', null, 'dragEnabled'],\r\n                                    ['boolean', 'enableDrop', null, 'dropEnabled']\r\n                                ]]\r\n                            ],\r\n                            w, lenW = _watches.length,\r\n                            i, len,\r\n                            _curW,\r\n                            _typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW;\r\n                        for (w = 0; w < lenW; w++) {\r\n                            // skip if not exist\r\n                            if (!check_exist_attr(attrs, _watches[w][0], true)) {\r\n                                continue;\r\n                            }\r\n                            _curW = _watches[w][1];\r\n                            for (i = 0, len = _curW.length; i < len; i++) {\r\n                                _typeW = _curW[i][0];\r\n                                _nameW = _curW[i][1];\r\n                                _defaultW = _curW[i][2];\r\n                                _scopeW = _curW[i][3];\r\n                                _NotW = _curW[i][4];\r\n                                _AfterW = _curW[i][5];\r\n                                _BeforeW = _curW[i][6];\r\n                                generateWatch(_typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW);\r\n                            }\r\n                        }\r\n\r\n                        if (attrs.treeData) {\r\n                            scope.$watch(\r\n                                attrs.treeData, function (val) {\r\n                                    scope.treeData = val;\r\n                                }, true\r\n                            );\r\n                        }\r\n\r\n                        scope.$watch(\r\n                            'treeData', function (val) {\r\n                                reload_data(val);\r\n                            }, true\r\n                        );\r\n\r\n                        scope.reload_data = reload_data;\r\n\r\n                        if (attrs.enableDrag) {\r\n                            _fnInitDrag = $TreeDnDPlugin('$TreeDnDDrag');\r\n                            if (angular.isFunction(_fnInitDrag)) {\r\n                                _fnInitDrag(scope, element, $window, $document);\r\n                            }\r\n                        }\r\n\r\n                        // apply Template\r\n                        scope.$safeApply(\r\n                            function () {\r\n                                if ($_Template.length > 0) {\r\n                                    element.append($compile($_Template)(scope));\r\n                                } else {\r\n                                    $http.get(\r\n                                        attrs.templateUrl || $TreeDnDTemplate.getPath(),\r\n                                        {cache: $templateCache}\r\n                                    ).success(\r\n                                        function (data) {\r\n                                            element.append($compile(data.trim())(scope));\r\n                                        }\r\n                                    );\r\n                                }\r\n                            }\r\n                        );\r\n                    };\r\n                }\r\n            };\r\n        }]\r\n).factory(\r\n    '$TreeDnDFilter', [\r\n        '$filter', function ($filter) {\r\n            var _iF, _lenF, _keysF,\r\n                _filter,\r\n                _state,\r\n                for_all_descendants = function for_all_descendants(options, node, fieldChild, fnBefore, fnAfter, parentPassed) {\r\n                    if (!angular.isFunction(fnBefore)) {\r\n                        return null;\r\n                    }\r\n\r\n                    var _i, _len, _nodes,\r\n                        _nodePassed = fnBefore(options, node),\r\n                        _childPassed = false;\r\n\r\n                    if (angular.isDefined(node[fieldChild])) {\r\n                        _nodes = node[fieldChild];\r\n                        _len = _nodes.length;\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            _childPassed = for_all_descendants(\r\n                                options,\r\n                                _nodes[_i],\r\n                                fieldChild,\r\n                                fnBefore,\r\n                                fnAfter,\r\n                                _nodePassed || parentPassed\r\n                            ) || _childPassed;\r\n                        }\r\n                    }\r\n\r\n                    if (angular.isFunction(fnAfter)) {\r\n                        fnAfter(options, node, _nodePassed === true, _childPassed === true, parentPassed === true);\r\n                    }\r\n\r\n                    return _nodePassed || _childPassed;\r\n                },\r\n                // Check data by filter\r\n                _fnCheck = function _fnCheck(callback, check) {\r\n                    if (angular.isUndefinedOrNull(check) || angular.isArray(check)) {\r\n                        return null;\r\n                    }\r\n\r\n                    if (angular.isFunction(callback)) {\r\n                        return callback(check, $filter);\r\n                    } else {\r\n                        if (typeof callback === 'boolean') {\r\n                            check = !!check;\r\n                            return check === callback;\r\n                        } else if (angular.isDefined(callback)) {\r\n                            try {\r\n                                var _regex = new RegExp(callback);\r\n                                return _regex.test(check);\r\n                            }\r\n                            catch (err) {\r\n                                if (typeof check === 'string') {\r\n                                    return check.indexOf(callback) > -1;\r\n                                } else {\r\n                                    return null;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            return null;\r\n                        }\r\n                    }\r\n                },\r\n                _fnProccess = function _fnProccess(node, condition, isAnd) {\r\n                    if (angular.isArray(condition)) {\r\n                        return for_each_filter(node, condition, isAnd);\r\n                    } else {\r\n                        var _key = condition.field,\r\n                            _callback = condition.callback,\r\n                            _iO, _keysO, _lenO;\r\n\r\n                        if (_key === '_$') {\r\n                            _keysO = Object.keys(node);\r\n                            _lenO = _keysO.length;\r\n                            for (_iO = 0; _iO < _lenO; _iO++) {\r\n                                if (_fnCheck(_callback, node[_keysO[_iO]])) {\r\n                                    return true;\r\n                                }\r\n                            }\r\n                        } else if (angular.isDefined(node[_key])) {\r\n                            return _fnCheck(_callback, node[_key]);\r\n                        }\r\n                    }\r\n                },\r\n                for_each_filter = function for_each_filter(node, conditions, isAnd) {\r\n                    var i, len = conditions.length, passed = false;\r\n                    if (len === 0) {\r\n                        return null;\r\n                    }\r\n\r\n                    for (i = 0; i < len; i++) {\r\n                        if (_fnProccess(node, conditions[i], !isAnd)) {\r\n                            passed = true;\r\n                            // if condition `or` then return;\r\n                            if (!isAnd) {\r\n                                return true;\r\n                            }\r\n                        } else {\r\n\r\n                            // if condition `and` and result in fnProccess = false then return;\r\n                            if (isAnd) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return passed;\r\n                },\r\n\r\n                // Will call _fnAfter to clear data no need\r\n                _fnAfter = function _fnAfter(options, node, isNodePassed, isChildPassed, isParentPassed) {\r\n                    if (isNodePassed === true) {\r\n                        node.__filtered__ = true;\r\n                        node.__filtered_visible__ = true;\r\n                        return; //jmp\r\n                    } else if ((isChildPassed === true && options.showParent === true)\r\n                               || (isParentPassed === true && options.showChild === true)) {\r\n                        node.__filtered__ = false;\r\n                        node.__filtered_visible__ = true;\r\n                        return; //jmp\r\n                    }\r\n\r\n                    // remove attr __filtered__\r\n                    delete(node.__filtered__);\r\n                    delete(node.__filtered_visible__);\r\n                },\r\n                _fnBefore = function _fnBefore(options, node) {\r\n                    if (options.filter.length === 0) {\r\n                        return true;\r\n                    } else {\r\n                        return _fnProccess(node, options.filter, options.beginAnd || false);\r\n                    }\r\n                },\r\n                _fnConvert = function _fnConvert(filters) {\r\n                    // convert filter object to array filter\r\n                    if (angular.isObject(filters) && !angular.isArray(filters)) {\r\n                        _keysF = Object.keys(filters);\r\n                        _lenF = _keysF.length;\r\n                        _filter = [];\r\n\r\n                        if (_lenF > 0) {\r\n                            for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                                if ((typeof filters[_keysF[_iF]]) === 'string' && filters[_keysF[_iF]].length === 0) {\r\n                                    continue;\r\n                                } else if (angular.isArray(filters[_keysF[_iF]])) {\r\n                                    _state = filters[_keysF[_iF]];\r\n                                } else if (angular.isObject(filters[_keysF[_iF]])) {\r\n                                    _state = _fnConvert(filters[_keysF[_iF]]);\r\n                                } else {\r\n                                    _state = {\r\n                                        field:    _keysF[_iF],\r\n                                        callback: filters[_keysF[_iF]]\r\n                                    };\r\n                                }\r\n                                _filter.push(_state);\r\n                            }\r\n                        }\r\n                        _state = null;\r\n                        return _filter;\r\n                    }\r\n                    else {\r\n                        return filters;\r\n                    }\r\n                },\r\n                _fnMain = function _fnMain(treeData, filters, _options) {\r\n                    if (!angular.isArray(treeData)\r\n                        || treeData.length === 0\r\n                        || !(angular.isArray(filters) || angular.isObject(filters))\r\n                        || filters.length === 0) {\r\n                        return treeData;\r\n                    }\r\n\r\n                    var _i, _len,\r\n                        _filter;\r\n\r\n                    _filter = _fnConvert(filters);\r\n                    if (!(angular.isArray(_filter) || angular.isObject(_filter))\r\n                        || _filter.length === 0) {\r\n                        return treeData;\r\n                    }\r\n                    _options.filter = _filter;\r\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                        for_all_descendants(\r\n                            _options,\r\n                            treeData[_i],\r\n                            '__children__',\r\n                            _fnBefore, _fnAfter\r\n                        );\r\n                    }\r\n\r\n                    return treeData;\r\n                };\r\n\r\n            return _fnMain;\r\n        }]\r\n).factory(\r\n    '$TreeDnDOrderBy', [\r\n        '$filter', function ($filter) {\r\n            var _fnOrderBy = $filter('orderBy'),\r\n                for_all_descendants = function for_all_descendants(options, node, name, fnOrderBy) {\r\n                    var _i, _len, _nodes;\r\n\r\n                    if (angular.isDefined(node[name])) {\r\n                        _nodes = node[name];\r\n                        _len = _nodes.length;\r\n                        // OrderBy children\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            _nodes[_i] = for_all_descendants(options, _nodes[_i], name, fnOrderBy);\r\n                        }\r\n\r\n                        node[name] = fnOrderBy(node[name], options);\r\n                    }\r\n                    return node;\r\n                },\r\n                _fnOrder = function _fnOrder(list, orderBy) {\r\n                    return _fnOrderBy(list, orderBy);\r\n                },\r\n                _fnMain = function _fnMain(treeData, orderBy) {\r\n                    if (!angular.isArray(treeData)\r\n                        || treeData.length === 0\r\n                        || !(angular.isArray(orderBy) || angular.isObject(orderBy) || angular.isString(orderBy) || angular.isFunction(orderBy))\r\n                        || (orderBy.length === 0 && !angular.isFunction(orderBy))) {\r\n                        return treeData;\r\n                    }\r\n\r\n                    var _i, _len,\r\n                        _iF, _lenF, _keysF;\r\n\r\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                        treeData[_i] = for_all_descendants(\r\n                            orderBy,\r\n                            treeData[_i],\r\n                            '__children__',\r\n                            _fnOrder\r\n                        );\r\n                    }\r\n\r\n                    treeData = _fnOrder(treeData, orderBy);\r\n                    return treeData;\r\n                };\r\n\r\n            return _fnMain;\r\n        }]\r\n).factory(\r\n    '$TreeDnDDrag', [\r\n        '$timeout', '$TreeDnDHelper',\r\n        function ($timeout, $TreeDnDHelper) {\r\n            var _fnDragEnd;\r\n            var holderWasShown = false;\r\n            var nodesSelected = [];\r\n            var lastSelectedNode = null;\r\n\r\n            var resetNodesSelected = function () {\r\n                nodesSelected.forEach(function (node) { node.__selected = false; });\r\n                nodesSelected = [];\r\n                lastSelectedNode = null;\r\n            };\r\n\r\n            var _offset,\r\n                _fnPlaceHolder = function (e, $params) {\r\n                    if ($params.placeElm) {\r\n                        _offset = $TreeDnDHelper.offset($params.placeElm);\r\n                        if (_offset.top <= e.pageY && e.pageY <= _offset.top + _offset.height &&\r\n                            _offset.left <= e.pageX && e.pageX <= _offset.left + _offset.width\r\n                           ) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                },\r\n                _fnDragStart = function (e, $params) {\r\n                    holderWasShown = false;\r\n\r\n                    if (!$params.hasTouch && (e.button === 2 || e.which === 3)) {\r\n                        // disable right click\r\n                        return;\r\n                    }\r\n                    if (e.uiTreeDragging || (e.originalEvent && e.originalEvent.uiTreeDragging)) { // event has already fired in other scope.\r\n                        return;\r\n                    }\r\n                    // the element which is clicked.\r\n                    var eventElm = angular.element(e.target),\r\n                        eventScope = eventElm.scope();\r\n                    if (!eventScope || !eventScope.$type) {\r\n                        return;\r\n                    }\r\n                    // if (eventScope.$type !== 'TreeDnDNode') { // Check if it is a node or a handle\r\n                    //     return;\r\n                    // }\r\n\r\n                    if (eventScope.$type !== 'TreeDnDNodeHandle') { // If the node has a handle, then it should be clicked by the handle\r\n                        var currentNode = eventScope.$parent.$modelValue;\r\n                        if (eventScope.hasMultiSelect && currentNode && currentNode.parentId !== null) {\r\n                            if (e.ctrlKey) {\r\n                                lastSelectedNode = currentNode;\r\n                                currentNode.__selected = !currentNode.__selected;\r\n                            } else if (e.shiftKey) {\r\n                                var groupNodes = eventScope.$parent.$parent.$parent.$modelValue.__children__;\r\n                                var lastSelectedNodeIdx = (lastSelectedNode && groupNodes.includes(lastSelectedNode)) ? groupNodes.indexOf(lastSelectedNode) : 0;\r\n                                var newSelectedNodeIdx = groupNodes.indexOf(currentNode);\r\n                                var lowerIdx = lastSelectedNodeIdx < newSelectedNodeIdx ? lastSelectedNodeIdx : newSelectedNodeIdx;\r\n                                var higherIdx = lastSelectedNodeIdx > newSelectedNodeIdx ? lastSelectedNodeIdx : newSelectedNodeIdx;\r\n\r\n                                resetNodesSelected();\r\n\r\n                                for (var idx = lowerIdx; idx <= higherIdx; idx++) {\r\n                                    groupNodes[idx].__selected = true;\r\n                                    nodesSelected.push(groupNodes[idx]);\r\n                                }\r\n                            } else {\r\n                                lastSelectedNode = currentNode;\r\n                                resetNodesSelected();\r\n                                currentNode.__selected = true;\r\n                            }\r\n\r\n                            if (nodesSelected.every(function (node) { return node !== currentNode; }) && currentNode.__selected) {\r\n                                nodesSelected.push(currentNode);\r\n                            } else if (nodesSelected.includes(currentNode) && !currentNode.__selected) {\r\n                                nodesSelected.splice(nodesSelected.indexOf(currentNode), 1);\r\n                            }\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    var eventElmTagName = eventElm.prop('tagName').toLowerCase(),\r\n                        dragScope,\r\n                        _$scope = $params.$scope;\r\n                    if (eventElmTagName === 'input'\r\n                        || eventElmTagName === 'textarea'\r\n                        || eventElmTagName === 'button'\r\n                        || eventElmTagName === 'select') { // if it's a input or button, ignore it\r\n                        return;\r\n                    }\r\n                    // check if it or it's parents has a 'data-nodrag' attribute\r\n                    while (eventElm && eventElm[0] && eventElm[0] !== $params.element) {\r\n                        if ($TreeDnDHelper.nodrag(eventElm)) { // if the node mark as `nodrag`, DONOT drag it.\r\n                            return;\r\n                        }\r\n                        eventElm = eventElm.parent();\r\n                    }\r\n\r\n                    e.uiTreeDragging = true; // stop event bubbling\r\n                    if (e.originalEvent) {\r\n                        e.originalEvent.uiTreeDragging = true;\r\n                    }\r\n                    e.preventDefault();\r\n\r\n                    dragScope = eventScope.getScopeNode();\r\n\r\n                    $params.firstMoving = true;\r\n\r\n                    if (!_$scope.$callbacks.beforeDrag(dragScope)) {\r\n                        return;\r\n                    }\r\n\r\n                    var eventObj = $TreeDnDHelper.eventObj(e),\r\n                        tagName = dragScope.$element.prop('tagName').toLowerCase(),\r\n                        isTable = (tagName === 'tr');\r\n\r\n                    $params.dragInfo = $TreeDnDHelper.dragInfo(dragScope);\r\n\r\n                    _$scope.setDragging($params.dragInfo);\r\n\r\n                    $params.pos = $TreeDnDHelper.positionStarted(eventObj, dragScope.$element);\r\n\r\n                    if (isTable) {\r\n                        $params.dragElm = angular.element($params.$window.document.createElement('table'))\r\n                            .addClass(_$scope.$class.tree)\r\n                            .addClass(_$scope.$class.drag)\r\n                            .addClass(_$scope.$tree_class);\r\n                    } else {\r\n                        $params.dragElm = angular.element($params.$window.document.createElement('ul'))\r\n                            .addClass(_$scope.$class.drag)\r\n                            .addClass('tree-dnd-nodes')\r\n                            .addClass(_$scope.$tree_class);\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'width':   $TreeDnDHelper.width(dragScope.$element) + 'px',\r\n                            'z-index': 9995\r\n                        }\r\n                    );\r\n\r\n                    $params.offsetEdge = 0;\r\n                    var _width = $TreeDnDHelper.width(dragScope.$element),\r\n                        _scope = dragScope,\r\n                        _element = _scope.$element,\r\n                        _clone = null,\r\n                        _needCollapse = !!_$scope.enabledCollapse,\r\n                        _copied = false,\r\n                        _tbody = null;\r\n\r\n                    if (isTable) {\r\n                        $params.offsetEdge = $params.dragInfo.node.__level__ - 1;\r\n                        _tbody = angular.element($params.$window.document.createElement('tbody'));\r\n\r\n                        _$scope.for_all_descendants(\r\n                            $params.dragInfo.node, function (_node) {\r\n                                _scope = _$scope.getScope(_node);\r\n                                _element = _scope.$element;\r\n\r\n                                if (!_copied) {\r\n                                    _clone = _element.clone();\r\n\r\n                                    $TreeDnDHelper.replaceIndent(\r\n                                        _scope,\r\n                                        _clone,\r\n                                        _node.__level__ - $params.offsetEdge,\r\n                                        'padding-left'\r\n                                    );\r\n\r\n                                    _tbody.append(_clone);\r\n\r\n                                    // skip all, just clone parent\r\n                                    if (_needCollapse) {\r\n                                        _copied = true;\r\n                                    }\r\n                                }\r\n\r\n                                if (_$scope.enabledMove && _$scope.$class.hidden) {\r\n                                    _element.addClass(_$scope.$class.hidden);\r\n                                }\r\n                            }\r\n                        );\r\n\r\n                        $params.dragElm.append(_tbody);\r\n                    } else {\r\n\r\n                        if (!_needCollapse) {\r\n                            _clone = _element.clone();\r\n                        } else {\r\n                            var _holder = _scope.getElementChilds(),\r\n                                _swaper = angular.element(\"<swaped />\");\r\n\r\n                            // Insert tag `<holder>` & move _holder into tag `<swaper>`;\r\n                            _holder.after(angular.element(\"<holder />\"));\r\n                            _swaper.append(_holder);\r\n\r\n                            // Clone without Children & remove tag `<holder>`\r\n                            _clone = _element.clone();\r\n                            _clone.find(\"holder\").remove();\r\n\r\n                            // bring childs back frome `swaper` & remove tag `<swaper>`\r\n                            _element.find(\"holder\").replaceWith(_holder);\r\n\r\n                            // Reset & clear all;\r\n                            _swaper.remove();\r\n                            _holder = null;\r\n                        }\r\n\r\n                        $params.dragElm.append(_clone);\r\n                        if (_$scope.enabledMove && _$scope.$class.hidden) {\r\n                            _element.addClass(_$scope.$class.hidden);\r\n                        }\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'left': eventObj.pageX - $params.pos.offsetX + _$scope.$callbacks.calsIndent(\r\n                                $params.offsetEdge + 1,\r\n                                true,\r\n                                true\r\n                            )       + 'px',\r\n                            'top':  eventObj.pageY - $params.pos.offsetY + 'px'\r\n                        }\r\n                    );\r\n\r\n                    if (nodesSelected.length > 1) {\r\n                        $params.dragElm.append(angular.element('<div class=\"numBadge\">' + nodesSelected.length + '</div>'));\r\n                    }\r\n\r\n                    // moving item with descendant\r\n                    $params.$document.find('body').append($params.dragElm);\r\n                    if (_$scope.$callbacks.droppable()) {\r\n                        $params.placeElm = _$scope.initPlace(dragScope.$element, $params.dragElm);\r\n\r\n                        if (isTable) {\r\n                            $TreeDnDHelper.replaceIndent(_$scope, $params.placeElm, $params.dragInfo.node.__level__);\r\n                        }\r\n\r\n                        $params.placeElm.css('width', _width);\r\n                    }\r\n\r\n                    _$scope.showPlace();\r\n                    _$scope.targeting = true;\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.refreshStatus();\r\n                        _$scope.setPositionStatus(e);\r\n                    }\r\n\r\n                    angular.element($params.$document).bind('touchend', $params.dragEndEvent);\r\n                    angular.element($params.$document).bind('touchcancel', $params.dragEndEvent);\r\n                    angular.element($params.$document).bind('touchmove', $params.dragMoveEvent);\r\n                    angular.element($params.$document).bind('mouseup', $params.dragEndEvent);\r\n                    angular.element($params.$document).bind('mousemove', $params.dragMoveEvent);\r\n                    angular.element($params.$document).bind('mouseleave', $params.dragCancelEvent);\r\n\r\n                    $params.document_height = Math.max(\r\n                        $params.body.scrollHeight,\r\n                        $params.body.offsetHeight,\r\n                        $params.html.clientHeight,\r\n                        $params.html.scrollHeight,\r\n                        $params.html.offsetHeight\r\n                    );\r\n\r\n                    $params.document_width = Math.max(\r\n                        $params.body.scrollWidth,\r\n                        $params.body.offsetWidth,\r\n                        $params.html.clientWidth,\r\n                        $params.html.scrollWidth,\r\n                        $params.html.offsetWidth\r\n                    );\r\n                },\r\n                _fnDragMove = function (e, $params) {\r\n                    var _$scope = $params.$scope;\r\n                    if (!$params.dragStarted) {\r\n                        if (!$params.dragDelaying) {\r\n                            $params.dragStarted = true;\r\n                            _$scope.$safeApply(\r\n                                function () {\r\n                                    _$scope.$callbacks.dragStart($params.dragInfo);\r\n                                }\r\n                            );\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    if (!$params.dragElm) {\r\n                        return;\r\n                    }\r\n\r\n                    e.preventDefault();\r\n                    if ($params.$window.getSelection) {\r\n                        $params.$window.getSelection().removeAllRanges();\r\n                    } else if ($params.$window.document.selection) {\r\n                        $params.$window.document.selection.empty();\r\n                    }\r\n\r\n                    var eventObj = $TreeDnDHelper.eventObj(e),\r\n                        leftElmPos = eventObj.pageX - $params.pos.offsetX,\r\n                        topElmPos = eventObj.pageY - $params.pos.offsetY;\r\n\r\n                    //dragElm can't leave the screen on the left\r\n                    if (leftElmPos < 0) {\r\n                        leftElmPos = 0;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the top\r\n                    if (topElmPos < 0) {\r\n                        topElmPos = 0;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the bottom\r\n                    if ((topElmPos + 10) > $params.document_height) {\r\n                        topElmPos = $params.document_height - 10;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the right\r\n                    if ((leftElmPos + 10) > $params.document_width) {\r\n                        leftElmPos = $params.document_width - 10;\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'left': leftElmPos + _$scope.$callbacks.calsIndent(\r\n                                $params.offsetEdge + 1,\r\n                                true,\r\n                                true\r\n                            )       + 'px',\r\n                            'top':  topElmPos + 'px'\r\n                        }\r\n                    );\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.setPositionStatus(e);\r\n                    }\r\n\r\n                    var top_scroll = window.pageYOffset || $params.$window.document.documentElement.scrollTop,\r\n                        bottom_scroll = top_scroll + (window.innerHeight || $params.$window.document.clientHeight || $params.$window.document.clientHeight);\r\n                    // to scroll down if cursor y-position is greater than the bottom position the vertical scroll\r\n                    if (bottom_scroll < eventObj.pageY && bottom_scroll <= $params.document_height) {\r\n                        window.scrollBy(0, 10);\r\n                    }\r\n                    // to scroll top if cursor y-position is less than the top position the vertical scroll\r\n                    if (top_scroll > eventObj.pageY) {\r\n                        window.scrollBy(0, -10);\r\n                    }\r\n\r\n                    $TreeDnDHelper.positionMoved(e, $params.pos, $params.firstMoving);\r\n\r\n                    if ($params.firstMoving) {\r\n                        $params.firstMoving = false;\r\n                        return;\r\n                    }\r\n                    // check if add it as a child node first\r\n\r\n                    var targetX = eventObj.pageX - $params.$window.document.body.scrollLeft,\r\n                        targetY = eventObj.pageY - (window.pageYOffset || $params.$window.document.documentElement.scrollTop),\r\n\r\n                        targetElm,\r\n                        targetScope,\r\n                        targetBefore,\r\n                        targetOffset,\r\n                        tagName,\r\n                        isTable,\r\n                        isChanged = true,\r\n                        isVeritcal = true,\r\n                        isEmpty,\r\n                        isSwapped,\r\n                        _scope,\r\n                        _target,\r\n                        _parent,\r\n                        _info = $params.dragInfo,\r\n                        _move = _info.move,\r\n                        _drag = _info.node,\r\n                        _drop = _info.drop,\r\n                        treeScope = _info.target,\r\n                        fnSwapTree,\r\n                        isHolder = _fnPlaceHolder(e, $params);\r\n\r\n                    if (!isHolder) {\r\n                        /* when using elementFromPoint() inside an iframe, you have to call\r\n                             elementFromPoint() twice to make sure IE8 returns the correct value\r\n                             $params.$window.document.elementFromPoint(targetX, targetY);*/\r\n\r\n                        targetElm = angular.element(\r\n                            $params.$window.document.elementFromPoint(\r\n                                targetX,\r\n                                targetY\r\n                            )\r\n                        );\r\n\r\n                        targetScope = targetElm.scope();\r\n                        if (!targetScope) {\r\n                            return;\r\n                        }\r\n\r\n                        fnSwapTree = function () {\r\n                            treeScope = targetScope.getScopeTree();\r\n                            _target = _info.target;\r\n                            if (_info.target !== treeScope) {\r\n                                if (treeScope.$callbacks.droppable()) {\r\n                                    // Replace by place-holder new\r\n                                    _target.hidePlace();\r\n                                    _target.targeting = false;\r\n                                    treeScope.targeting = true;\r\n\r\n                                    _info.target = treeScope;\r\n                                    $params.placeElm = treeScope.initPlace(targetScope.$element, $params.dragElm);\r\n\r\n                                    _target = null;\r\n                                    isSwapped = true;\r\n                                } else {\r\n                                    // Not allowed Drop Item\r\n                                    return false;\r\n                                }\r\n                            }\r\n                            return true;\r\n                        };\r\n\r\n                        var abortDrag = function () {\r\n                            holderWasShown = false;\r\n                            if (_$scope.enabledStatus) {\r\n                                _$scope.hideStatus();\r\n                            }\r\n                            _$scope.$$apply = false;\r\n                            _fnDragEnd(e, $params);\r\n                        };\r\n\r\n                        if (angular.isFunction(targetScope.getScopeNode)) {\r\n                            targetScope = targetScope.getScopeNode();\r\n\r\n                            if (!fnSwapTree()) {\r\n                                return;\r\n                            }\r\n                        } else {\r\n                            if (holderWasShown) {\r\n                                setTimeout(function () {\r\n                                    // setTimeout is necessary because otherwise the placeholder will not be deleted in some cases\r\n                                    // see: https://stackoverflow.com/questions/779379/why-is-settimeoutfn-0-sometimes-useful\r\n                                    treeScope.placeElm.remove();\r\n                                    abortDrag();\r\n                                }, 0);\r\n                                return;\r\n                            }\r\n\r\n                            if (targetScope.$type === 'TreeDnDNodes' || targetScope.$type === 'TreeDnD') {\r\n                                if (targetScope.tree_nodes) {\r\n                                    if (targetScope.tree_nodes.length === 0) {\r\n                                        if (!fnSwapTree()) {\r\n                                            return;\r\n                                        }\r\n                                        // Empty\r\n                                        isEmpty = true;\r\n                                    }\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            } else {\r\n                                return;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        holderWasShown = true;\r\n                    }\r\n\r\n                    if ($params.pos.dirAx && !isSwapped || isHolder) {\r\n                        isVeritcal = false;\r\n                        targetScope = _info.scope;\r\n                    }\r\n\r\n                    if (!targetScope.$element && !targetScope) {\r\n                        return;\r\n                    }\r\n\r\n                    tagName = targetScope.$element.prop('tagName').toLowerCase();\r\n                    isTable = (tagName === 'tbody' || tagName === 'table' || tagName === 'tr' || tagName === 'td');\r\n                    if (isEmpty) {\r\n                        _move.parent = null;\r\n                        _move.pos = 0;\r\n\r\n                        _drop = null;\r\n                    } else {\r\n                        // move vertical\r\n                        if (isVeritcal) {\r\n                            targetElm = targetScope.$element; // Get the element of tree-dnd-node\r\n\r\n                            targetOffset = $TreeDnDHelper.offset(targetElm);\r\n\r\n                            if (targetScope.horizontal && !isTable) {\r\n                                targetBefore = eventObj.pageX < (targetOffset.left + $TreeDnDHelper.width(targetElm) / 2);\r\n                            } else {\r\n                                if (isTable) {\r\n                                    targetBefore = eventObj.pageY < (targetOffset.top + $TreeDnDHelper.height(targetElm) / 2);\r\n                                } else {\r\n                                    var _height = $TreeDnDHelper.height(targetElm);\r\n\r\n                                    if (targetScope.getElementChilds()) {\r\n                                        _height -= -$TreeDnDHelper.height(targetScope.getElementChilds());\r\n                                    }\r\n\r\n                                    if (eventObj.pageY > targetOffset.top + _height) {\r\n                                        return;\r\n                                    }\r\n\r\n                                    targetBefore = eventObj.pageY < (targetOffset.top + _height / 2);\r\n                                }\r\n                            }\r\n\r\n                            if (!angular.isFunction(targetScope.getData)) {\r\n                                return;\r\n                            }\r\n\r\n                            _target = targetScope.getData();\r\n                            _parent = targetScope.getNode(_target.__parent_real__);\r\n\r\n                            if (targetBefore) {\r\n                                var _prev = targetScope.getPrevSibling(_target);\r\n\r\n                                _move.parent = _parent;\r\n                                _move.pos = angular.isDefined(_prev) ? _prev.__index__ + 1 : 0;\r\n\r\n                                _drop = _prev;\r\n                            } else {\r\n                                if (_target.__expanded__ && !(_target.__children__.length === 1 && _target.__index_real__ === _drag.__parent_real__)) {\r\n                                    _move.parent = _target;\r\n                                    _move.pos = 0;\r\n\r\n                                    _drop = null;\r\n                                } else {\r\n                                    _move.parent = _parent;\r\n                                    _move.pos = _target.__index__ + 1;\r\n\r\n                                    _drop = _target;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            // move horizontal\r\n                            if ($params.pos.dirAx && $params.pos.distAxX >= treeScope.dragBorder) {\r\n                                $params.pos.distAxX = 0;\r\n                                // increase horizontal level if previous sibling exists and is not collapsed\r\n                                if ($params.pos.distX > 0) {\r\n                                    _parent = _drop;\r\n                                    if (!_parent) {\r\n                                        if (_move.pos - 1 >= 0) {\r\n                                            _parent = _move.parent.__children__[_move.pos - 1];\r\n                                        } else {\r\n                                            return;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (_info.drag === _info.target && _parent === _drag && _$scope.enabledMove) {\r\n                                        _parent = treeScope.getPrevSibling(_parent);\r\n                                    }\r\n\r\n                                    if (_parent && _parent.__visible__) {\r\n                                        var _len = _parent.__children__.length;\r\n\r\n                                        _move.parent = _parent;\r\n                                        _move.pos = _len;\r\n\r\n                                        if (_len > 0) {\r\n                                            _drop = _parent.__children__[_len - 1];\r\n                                        } else {\r\n                                            _drop = null;\r\n                                        }\r\n                                    } else {\r\n                                        // Not changed\r\n                                        return;\r\n                                    }\r\n                                } else if ($params.pos.distX < 0) {\r\n                                    _target = _move.parent;\r\n                                    if (_target &&\r\n                                        (_target.__children__.length === 0 ||\r\n                                         _target.__children__.length - 1 < _move.pos ||\r\n                                         (_info.drag === _info.target &&\r\n                                          _target.__index_real__ === _drag.__parent_real__ &&\r\n                                          _target.__children__.length - 1 === _drag.__index__ && _$scope.enabledMove))\r\n                                       ) {\r\n                                        _parent = treeScope.getNode(_target.__parent_real__);\r\n\r\n                                        _move.parent = _parent;\r\n                                        _move.pos = _target.__index__ + 1;\r\n\r\n                                        _drop = _target;\r\n                                    } else {\r\n                                        // Not changed\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            } else {\r\n                                // limited\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (_info.drag === _info.target &&\r\n                        _move.parent &&\r\n                        _drag.__parent_real__ === _move.parent.__index_real__ &&\r\n                        _drag.__index__ === _move.pos\r\n                       ) {\r\n                        isChanged = false;\r\n                    }\r\n\r\n                    if (treeScope.$callbacks.accept(_info, _move, isChanged)) {\r\n                        _info.move = _move;\r\n                        _info.drop = _drop;\r\n                        _info.changed = isChanged;\r\n                        _info.scope = targetScope;\r\n\r\n                        if (isTable) {\r\n                            $TreeDnDHelper.replaceIndent(\r\n                                treeScope,\r\n                                $params.placeElm,\r\n                                angular.isUndefinedOrNull(_move.parent) ? 1 : _move.parent.__level__ + 1\r\n                            );\r\n\r\n                            if (_drop) {\r\n                                _parent = (_move.parent ? _move.parent.__children__ : null ) || _info.target.treeData;\r\n\r\n                                if (_drop.__index__ < _parent.length - 1) {\r\n                                    // Find fast\r\n                                    _drop = _parent[_drop.__index__ + 1];\r\n                                    _scope = _info.target.getScope(_drop);\r\n                                    _scope.$element[0].parentNode.insertBefore(\r\n                                        $params.placeElm[0],\r\n                                        _scope.$element[0]\r\n                                    );\r\n                                } else {\r\n                                    _target = _info.target.getLastDescendant(_drop);\r\n                                    _scope = _info.target.getScope(_target);\r\n                                    _scope.$element.after($params.placeElm);\r\n                                }\r\n                            } else {\r\n                                _scope = _info.target.getScope(_move.parent);\r\n                                if (_scope) {\r\n                                    if (_move.parent) {\r\n                                        _scope.$element.after($params.placeElm);\r\n\r\n                                    } else {\r\n                                        _scope.getElementChilds().prepend($params.placeElm);\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else {\r\n                            _scope = _info.target.getScope(_drop || _move.parent);\r\n\r\n                            if (_drop) {\r\n                                _scope.$element.after($params.placeElm);\r\n                            } else {\r\n                                _scope.getElementChilds().prepend($params.placeElm);\r\n                            }\r\n                        }\r\n\r\n                        treeScope.showPlace();\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragMove(_info);\r\n                            }\r\n                        );\r\n                    }\r\n                },\r\n                _fnDragEnd = function (e, $params) {\r\n                    holderWasShown = false;\r\n\r\n                    e.preventDefault();\r\n                    if ($params.dragElm) {\r\n                        var _passed = false,\r\n                            _$scope = $params.$scope,\r\n                            _scope = _$scope.getScope($params.dragInfo.node),\r\n                            tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                            _isTable = (tagName === 'tr'),\r\n                            _element = _scope.$element;\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _passed = _$scope.$callbacks.beforeDrop($params.dragInfo);\r\n                            }\r\n                        );\r\n\r\n                        // rollback all\r\n                        if (_isTable) {\r\n                            _$scope.for_all_descendants(\r\n                                $params.dragInfo.node, function (_node) {\r\n                                    _scope = _$scope.getScope(_node);\r\n                                    _element = _scope.$element;\r\n\r\n                                    if (_scope.$class.hidden) {\r\n                                        _element.removeClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                            );\r\n                        } else {\r\n                            if (_$scope.$class.hidden) {\r\n                                _element.removeClass(_$scope.$class.hidden);\r\n                            }\r\n                        }\r\n\r\n                        $params.dragElm.remove();\r\n                        $params.dragElm = null;\r\n\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.hideStatus();\r\n                        }\r\n\r\n                        var _status = false;\r\n                        if (_$scope.$$apply) {\r\n                            _$scope.$safeApply(\r\n                                function () {\r\n                                    $params.dragInfo.__multipleNodes = nodesSelected;\r\n                                    resetNodesSelected();\r\n\r\n                                    _status = _$scope.$callbacks.dropped(\r\n                                        $params.dragInfo,\r\n                                        _passed,\r\n                                        _$scope.enabledMove\r\n                                    );\r\n                                }\r\n                            );\r\n                        } else {\r\n                            if ($params && $params.pos === null) {\r\n                                _fnBindDrag($params);\r\n                            }\r\n                        }\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragStop($params.dragInfo, _status);\r\n                            }\r\n                        );\r\n\r\n                        $params.dragInfo.target.hidePlace();\r\n                        $params.dragInfo.target.targeting = false;\r\n\r\n                        $params.dragInfo = null;\r\n                        _$scope.$$apply = false;\r\n                        _$scope.setDragging(null);\r\n                    }\r\n\r\n                    angular.element($params.$document).unbind('touchend', $params.dragEndEvent); // Mobile\r\n                    angular.element($params.$document).unbind('touchcancel', $params.dragEndEvent); // Mobile\r\n                    angular.element($params.$document).unbind('touchmove', $params.dragMoveEvent); // Mobile\r\n                    angular.element($params.$document).unbind('mouseup', $params.dragEndEvent);\r\n                    angular.element($params.$document).unbind('mousemove', $params.dragMoveEvent);\r\n                    angular.element($params.$window.document.body).unbind('mouseleave', $params.dragCancelEvent);\r\n                },\r\n                _fnDragStartEvent = function (e, $params) {\r\n                    if ($params.$scope.$callbacks.draggable()) {\r\n                        _fnDragStart(e, $params);\r\n                    }\r\n                },\r\n                _fnBindDrag = function ($params) {\r\n                    $params.element.bind(\r\n                        'touchstart mousedown', function (e) {\r\n                            $params.dragDelaying = true;\r\n                            $params.dragStarted = false;\r\n                            _fnDragStartEvent(e, $params);\r\n                            $params.dragTimer = $timeout(\r\n                                function () {\r\n                                    $params.dragDelaying = false;\r\n                                }, $params.$scope.dragDelay\r\n                            );\r\n                        }\r\n                    );\r\n                    $params.element.bind(\r\n                        'touchend touchcancel mouseup', function () {\r\n                            $timeout.cancel($params.dragTimer);\r\n                        }\r\n                    );\r\n                },\r\n                _fnKeydownHandler = function (e, $params) {\r\n                    var _$scope = $params.$scope;\r\n                    if (e.keyCode === 27) {\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.hideStatus();\r\n                        }\r\n\r\n                        _$scope.$$apply = false;\r\n                        _fnDragEnd(e, $params);\r\n                    } else {\r\n                        if (_$scope.enabledHotkey && e.shiftKey) {\r\n                            _$scope.enableMove(true);\r\n                            if (_$scope.enabledStatus) {\r\n                                _$scope.refreshStatus();\r\n                            }\r\n\r\n                            if (!$params.dragInfo) {\r\n                                return;\r\n                            }\r\n\r\n                            var _scope = _$scope.getScope($params.dragInfo.node),\r\n                                tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                                _element = _scope.$element;\r\n\r\n                            if (tagName === 'tr') {\r\n                                _$scope.for_all_descendants(\r\n                                    $params.dragInfo.node, function (_node) {\r\n                                        _scope = _$scope.getScope(_node);\r\n                                        _element = _scope.$element;\r\n\r\n                                        if (_$scope.$class.hidden) {\r\n                                            _element.addClass(_$scope.$class.hidden);\r\n                                        }\r\n                                    }\r\n                                );\r\n                            } else {\r\n                                if (_$scope.$class.hidden) {\r\n                                    _element.addClass(_$scope.$class.hidden);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                _fnKeyupHandler = function (e, $params) {\r\n                    var _$scope = $params.$scope;\r\n                    if (_$scope.enabledHotkey && !e.shiftKey) {\r\n                        _$scope.enableMove(false);\r\n\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.refreshStatus();\r\n                        }\r\n\r\n                        if (!$params.dragInfo) {\r\n                            return;\r\n                        }\r\n\r\n                        var _scope = _$scope.getScope($params.dragInfo.node),\r\n                            tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                            _element = _scope.$element;\r\n\r\n                        if (tagName === 'tr') {\r\n                            _$scope.for_all_descendants(\r\n                                $params.dragInfo.node, function (_node) {\r\n\r\n                                    _scope = _$scope.getScope(_node);\r\n                                    _element = _scope.$element;\r\n\r\n                                    if (_$scope.$class.hidden) {\r\n                                        _element.removeClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                            );\r\n                        } else {\r\n                            if (_$scope.$class.hidden) {\r\n                                _element.removeClass(_$scope.$class.hidden);\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n\r\n                _$init = function (scope, element, $window, $document) {\r\n                    var $params = {\r\n                        hasTouch:        ('ontouchstart' in window),\r\n                        firstMoving:     null,\r\n                        dragInfo:        null,\r\n                        pos:             null,\r\n                        placeElm:        null,\r\n                        dragElm:         null,\r\n                        dragDelaying:    true,\r\n                        dragStarted:     false,\r\n                        dragTimer:       null,\r\n                        body:            document.body,\r\n                        html:            document.documentElement,\r\n                        document_height: null,\r\n                        document_width:  null,\r\n                        offsetEdge:      null,\r\n                        $scope:          scope,\r\n                        $window:         $window,\r\n                        $document:       $document,\r\n                        element:         element,\r\n                        bindDrag:        function () {\r\n                            _fnBindDrag($params);\r\n                        },\r\n                        dragEnd:         function (e) {\r\n                            _fnDragEnd(e, $params);\r\n                        },\r\n                        dragMoveEvent:   function (e) {\r\n                            _fnDragMove(e, $params)\r\n                        },\r\n                        dragEndEvent:    function (e) {\r\n                            scope.$$apply = true;\r\n                            _fnDragEnd(e, $params);\r\n                        },\r\n                        dragCancelEvent: function (e) {\r\n                            _fnDragEnd(e, $params);\r\n                        }\r\n                    },\r\n                        keydownHandler = function (e) {\r\n                            return _fnKeydownHandler(e, $params);\r\n                        },\r\n                        keyupHandler = function (e) {\r\n                            return _fnKeyupHandler(e, $params);\r\n                        };\r\n\r\n                    scope.dragEnd = function (e) {\r\n                        $params.dragEnd(e);\r\n                    };\r\n\r\n                    $params.bindDrag();\r\n\r\n                    angular.element($window.document.body).bind(\"keydown\", keydownHandler);\r\n                    angular.element($window.document.body).bind(\"keyup\", keyupHandler);\r\n                    //unbind handler that retains scope\r\n                    scope.$on(\r\n                        '$destroy', function () {\r\n                            angular.element($window.document.body).unbind(\"keydown\", keydownHandler);\r\n                            angular.element($window.document.body).unbind(\"keyup\", keyupHandler);\r\n                            if (scope.statusElm) {\r\n                                scope.statusElm.remove();\r\n                            }\r\n\r\n                            if (scope.placeElm) {\r\n                                scope.placeElm.remove();\r\n                            }\r\n                        }\r\n                    );\r\n                };\r\n\r\n            return _$init;\r\n        }\r\n    ]\r\n).factory(\r\n    '$TreeDnDControl', function () {\r\n        var _target, _parent,\r\n            i, len,\r\n            fnSetCollapse = function fnSetCollapse(node) {\r\n                node.__expanded__ = false;\r\n            },\r\n            fnSetExpand = function fnSetExpand(node) {\r\n                node.__expanded__ = true;\r\n            },\r\n\r\n            _$init = function _$init(scope) {\r\n                var n, tree = {\r\n                    selected_node:                     null,\r\n                    for_all_descendants:               scope.for_all_descendants,\r\n                    select_node:                       function (node) {\r\n                        if (!node) {\r\n                            if (tree.selected_node) {\r\n                                delete(tree.selected_node.__selected__);\r\n                            }\r\n                            tree.selected_node = null;\r\n                            return null;\r\n                        }\r\n\r\n                        if (node !== tree.selected_node) {\r\n                            if (tree.selected_node) {\r\n                                delete(tree.selected_node.__selected__);\r\n                            }\r\n                            node.__selected__ = true;\r\n                            tree.selected_node = node;\r\n                            tree.expand_all_parents(node);\r\n                            if (angular.isFunction(tree.on_select)) {\r\n                                tree.on_select(node);\r\n                            }\r\n                        }\r\n                        return node;\r\n                    },\r\n                    deselect_node:                     function () {\r\n                        _target = null;\r\n                        if (tree.selected_node) {\r\n                            delete(tree.selected_node.__selected__);\r\n                            _target = tree.selected_node;\r\n                            tree.selected_node = null;\r\n                        }\r\n                        return _target;\r\n                    },\r\n                    get_parent:                        function (node) {\r\n                        if (node && node.__parent_real__ !== null) {\r\n                            return scope.tree_nodes[node.__parent_real__];\r\n                        }\r\n                        return null;\r\n                    },\r\n                    for_all_ancestors:                 function (child, fn) {\r\n                        _parent = tree.get_parent(child);\r\n                        if (_parent) {\r\n                            if (fn(_parent)) {\r\n                                return false;\r\n                            }\r\n\r\n                            return tree.for_all_ancestors(_parent, fn);\r\n                        }\r\n                        return true;\r\n                    },\r\n                    expand_all_parents:                function (child) {\r\n                        return tree.for_all_ancestors(\r\n                            child, fnSetExpand\r\n                        );\r\n                    },\r\n                    reload_data:                       function () {\r\n                        return scope.reload_data();\r\n                    },\r\n                    add_node:                          function (parent, new_node, index) {\r\n                        if (typeof index !== 'number') {\r\n                            if (parent) {\r\n                                parent.__children__.push(new_node);\r\n                                parent.__expanded__ = true;\r\n                            } else {\r\n                                scope.treeData.push(new_node);\r\n                            }\r\n                        } else {\r\n                            if (parent) {\r\n                                parent.__children__.splice(index, 0, new_node);\r\n                                parent.__expanded__ = true;\r\n                            } else {\r\n                                scope.treeData.splice(index, 0, new_node);\r\n                            }\r\n                        }\r\n                        return new_node;\r\n                    },\r\n                    add_node_root:                     function (new_node) {\r\n                        tree.add_node(null, new_node);\r\n                        return new_node;\r\n                    },\r\n                    expand_all:                        function () {\r\n                        len = scope.treeData.length;\r\n                        for (i = 0; i < len; i++) {\r\n                            tree.for_all_descendants(\r\n                                scope.treeData[i], fnSetExpand\r\n                            );\r\n                        }\r\n                    },\r\n                    collapse_all:                      function () {\r\n                        len = scope.treeData.length;\r\n                        for (i = 0; i < len; i++) {\r\n                            tree.for_all_descendants(\r\n                                scope.treeData[i], fnSetCollapse\r\n                            );\r\n                        }\r\n                    },\r\n                    remove_node:                       function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            if (node.__parent_real__ !== null) {\r\n                                _parent = tree.get_parent(node).__children__;\r\n                            } else {\r\n                                _parent = scope.treeData;\r\n                            }\r\n\r\n                            _parent.splice(node.__index__, 1);\r\n\r\n                            if (tree.selected_node === node) {\r\n                                tree.selected_node = null;\r\n                            }\r\n                        }\r\n                    },\r\n                    expand_node:                       function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            node.__expanded__ = true;\r\n                            return node;\r\n                        }\r\n                    },\r\n                    collapse_node:                     function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            node.__expanded__ = false;\r\n                            return node;\r\n                        }\r\n                    },\r\n                    get_selected_node:                 function () {\r\n                        return tree.selected_node;\r\n                    },\r\n                    get_first_node:                    function () {\r\n                        len = scope.treeData.length;\r\n                        if (len > 0) {\r\n                            return scope.treeData[0];\r\n                        }\r\n                        return null;\r\n                    },\r\n                    get_children:                      function (node) {\r\n                        return node.__children__;\r\n                    },\r\n                    get_siblings:                      function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            _parent = tree.get_parent(node);\r\n                            if (_parent) {\r\n                                _target = _parent.__children__;\r\n                            } else {\r\n                                _target = scope.treeData;\r\n                            }\r\n                            return _target;\r\n                        }\r\n                    },\r\n                    get_next_sibling:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            _target = tree.get_siblings(node);\r\n                            n = _target.length;\r\n                            if (node.__index__ < n) {\r\n                                return _target[node.__index__ + 1];\r\n                            }\r\n                        }\r\n                    },\r\n                    get_prev_sibling:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n                        _target = tree.get_siblings(node);\r\n                        if (node.__index__ > 0) {\r\n                            return _target[node.__index__ - 1];\r\n                        }\r\n                    },\r\n                    get_first_child:                   function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            _target = node.__children__;\r\n                            if (_target && _target.length > 0) {\r\n                                return node.__children__[0];\r\n                            }\r\n                        }\r\n                        return null;\r\n                    },\r\n                    get_closest_ancestor_next_sibling: function (node) {\r\n                        node = node || tree.selected_node;\r\n                        _target = tree.get_next_sibling(node);\r\n                        if (_target) {\r\n                            return _target;\r\n                        }\r\n\r\n                        _parent = tree.get_parent(node);\r\n                        return tree.get_closest_ancestor_next_sibling(_parent);\r\n                    },\r\n                    get_next_node:                     function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_first_child(node);\r\n                            if (_target) {\r\n                                return _target;\r\n                            } else {\r\n                                return tree.get_closest_ancestor_next_sibling(node);\r\n                            }\r\n                        }\r\n                    },\r\n                    get_prev_node:                     function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_prev_sibling(node);\r\n                            if (_target) {\r\n                                return tree.get_last_descendant(_target);\r\n                            }\r\n\r\n                            _parent = tree.get_parent(node);\r\n                            return _parent;\r\n                        }\r\n                    },\r\n                    get_last_descendant:               scope.getLastDescendant,\r\n                    select_parent_node:                function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _parent = tree.get_parent(node);\r\n                            if (_parent) {\r\n                                return tree.select_node(_parent);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_first_node:                 function () {\r\n                        return tree.select_node(tree.get_first_node());\r\n                    },\r\n                    select_next_sibling:               function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_next_sibling(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_prev_sibling:               function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_prev_sibling(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_next_node:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_next_node(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_prev_node:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_prev_node(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n                angular.extend(scope.tree, tree);\r\n                return scope.tree;\r\n            };\r\n\r\n        return _$init;\r\n    }\r\n);\n\nangular.module('template/TreeDnD/TreeDnD.html', []).run(\r\n    [\r\n        '$templateCache', function ($templateCache) {\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnD.html',\r\n            [\"<table ng-class=\\\"$tree_class\\\">\",\r\n             \"    <thead>\",\r\n             \"  <tr>\",\r\n             \"     <th ng-class=\\\"expandingProperty.titleClass\\\" ng-style=\\\"expandingProperty.titleStyle\\\">\",\r\n             \"         {{expandingProperty.displayName || expandingProperty.field || expandingProperty}}\",\r\n             \"        <\\/th>\",\r\n             \"        <th ng-repeat=\\\"col in colDefinitions\\\" ng-class=\\\"col.titleClass\\\" ng-style=\\\"col.titleStyle\\\">\",\r\n             \"         {{col.displayName || col.field}}\",\r\n             \"     </th>\",\r\n             \"    </tr>\",\r\n             \"    </thead>\",\r\n             \" <tbody tree-dnd-nodes=\\\"tree_nodes\\\">\",\r\n             \"  <tr tree-dnd-node=\\\"node\\\" ng-repeat=\\\"node in nodes track by node.__hashKey__ \\\" ng-show=\\\"node.__visible__\\\"\",\r\n             \"       ng-click=\\\"onSelect(node)\\\" ng-class=\\\"(node.__selected__ ? ' active':'')\\\">\",\r\n             \"        <td ng-if=\\\"!expandingProperty.template\\\" tree-dnd-node-handle\",\r\n             \"         ng-style=\\\"expandingProperty.cellStyle ? expandingProperty.cellStyle : {'padding-left': $callbacks.calsIndent(node.__level__)}\\\"\",\r\n             \"          ng-class=\\\"expandingProperty.cellClass\\\"\",\r\n             \"            compile=\\\"expandingProperty.cellTemplate\\\">\",\r\n             \"              <a data-nodrag>\",\r\n             \"                  <i ng-class=\\\"$icon_class\\\" ng-click=\\\"toggleExpand(node)\\\"\",\r\n             \"                     class=\\\"tree-icon\\\"></i>\",\r\n             \"              </a>\",\r\n             \"             {{node[expandingProperty.field] || node[expandingProperty]}}\",\r\n             \"       </td>\",\r\n             \"        <td ng-if=\\\"expandingProperty.template\\\" compile=\\\"expandingProperty.template\\\"></td>\",\r\n             \"        <td ng-repeat=\\\"col in colDefinitions\\\" ng-class=\\\"col.cellClass\\\" ng-style=\\\"col.cellStyle\\\"\",\r\n             \"            compile=\\\"col.cellTemplate\\\">\",\r\n             \"            {{node[col.field]}}\",\r\n             \"       </td>\",\r\n             \"    </tr>\",\r\n             \"    </tbody>\",\r\n             \"</table>\"].join('')\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusCopy.html',\r\n            \"<label><i class=\\\"fa fa-copy\\\"></i>&nbsp;<b>Copying</b></label>\"\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusMove.html',\r\n            '<label><i class=\"fa fa-file-text\"></i>&nbsp;<b>Moving</b></label>'\r\n        );\r\n    }]\r\n);\r\n\r\n}).call(window);"]}