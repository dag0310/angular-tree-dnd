{"version":3,"sources":["ng-tree-dnd.js"],"names":["angular","isUndefinedOrNull","val","isUndefined","isDefined","module","constant","tree","empty","hidden","node","nodes","handle","place","drag","status","icon","1","0","-1","directive","$compile","restrict","link","scope","element","attrs","$watch","compile","new_val","new_elem","isFunction","html","append","compileReplace","replaceWith","$element","$type","$class","addClass","replace","_enabledDragDrop","dragEnabled","dropEnabled","$modelValue","$icon_class","$node_class","treeDndNode","newValue","oldValue","setScope","__icon__","getScopeNode","getData","getElementChilds","querySelector","$nodes_class","treeDndNodes","$injector","$timeout","$http","$window","$document","$templateCache","$TreeDnDTemplate","$TreeDnDClass","$TreeDnDHelper","$TreeDnDPlugin","controller","$scope","$attrs","indent","indent_plus","indent_unit","$tree_class","primary_key","hasMultiSelect","onlyDeepestDrop","colDefinitions","$globals","treeData","tree_nodes","sycning","copy","extend","iconExpand","iconCollapse","iconLeaf","for_all_descendants","fn","_i","_len","_nodes","__children__","length","getLastDescendant","last_child","n","selected_node","onClick","on_click","setTimeout","onSelect","select_node","on_select","passedExpand","_clone","toggleExpand","fnCallback","$callbacks","expand","__expanded__","getHash","__parent__","__uid__","accept","dragInfo","moveTo","isChanged","calsIndent","level","skipUnit","skipEdge","unit","edge","droppable","draggable","beforeDrop","event","changeKey","_key","Math","random","__selected__","clone","_this","this","remove","parent","splice","__index__","add","pos","push","enableDrag","enableDrop","placeElm","horizontal","dragDelay","enabledMove","statusMove","enabledHotkey","enabledCollapse","statusElm","dragging","beforeDrag","scopeDrag","dragStop","skiped","dropped","info","pass","isMove","changed","_node","_nodeAdd","_move","move","_parent","_parentRemove","_parentAdd","target","dragStart","dragMove","setDragging","enableMove","enableStatus","enabledStatus","hideStatus","refreshStatus","statusElmOld","getMove","getCopy","attr","find","removeClass","setPositionStatus","e","css","left","pageX","top","pageY","z-index","targeting","getPrevSibling","_index","__parent_real__","getNode","index","_hash","getScope","initPlace","dragElm","tagName","isTable","prop","toLowerCase","document","createElement","_len_down","height","parentNode","insertBefore","hidePlace","showPlace","getScopeTree","$safeApply","phase","$root","$$phase","$apply","tElement","tAttrs","$_Template","_element","trim","_fnInitFilter","_fnInitOrderBy","_fnGetControl","_fnInitDrag","w","i","len","_curW","_typeW","_nameW","_defaultW","_scopeW","_NotW","_AfterW","_BeforeW","getExpandOn","_firstNode","_keys","Object","keys","_regex","RegExp","test","expandingProperty","getColDefs","_col_defs","field","do_f","root","parent_real","visible","_icon","_index_real","_dept","_hashKey","isArray","expandLevel","__index_real__","__level__","__visible__","__hashKey__","__dept__","reload_data","oData","_data","_tree_nodes","expandOn","columnDefs","orderBy","filter","filterOptions","_offset","_max","_min","_deptTotal","abs","_defaultFilterOption","showParent","showChild","beginAnd","check_exist_attr","existAttr","isAnd","for_each_attrs","exist","passed","generateWatch","type","nameAttr","valDefault","nameScope","fnNotExist","fnAfter","fnBefore","old","indexOf","_watches","isHotkey","templateCopy","_url","get","setCopy","templateMove","setMove","treeClass","$tree","colDefs","filters","_passed","_iF","_keysF","_lenF","enabledFilter","option","primaryKey","indentUnit","optCallbacks","forEach","value","key","lenW","templateUrl","getPath","cache","success","data","factory","_$initConvert","line2tree","parentKey","parentId","rootIds","item","_primary","treeObjs","tree2tree","access_child","_copy","_child","_tree","_$helper","nodrag","targetElm","eventObj","obj","undefined","targetTouches","originalEvent","drop","width","offset","boundingClientRect","getBoundingClientRect","pageYOffset","body","scrollTop","documentElement","pageXOffset","scrollLeft","positionStarted","offsetX","offsetY","startX","lastX","startY","lastY","nowX","nowY","distX","distY","dirAx","dirX","dirY","lastDirX","lastDirY","distAxX","distAxY","positionMoved","firstMoving","newAx","moving","replaceIndent","children","_fnget","name","has","temp","templatePath","copyPath","movePath","scopes","_$init","path","$id","$filter","_filter","_state","options","fieldChild","parentPassed","_nodePassed","_childPassed","_fnCheck","callback","check","err","_fnProccess","condition","for_each_filter","_iO","_keysO","_lenO","_callback","conditions","_fnAfter","isNodePassed","isChildPassed","isParentPassed","__filtered__","__filtered_visible__","_fnBefore","_fnConvert","isObject","_fnMain","_options","_fnOrderBy","fnOrderBy","_fnOrder","list","isString","$rootScope","_fnDragEnd","holderWasShown","nodesSelected","lastSelectedNode","resetNodesSelected","__selected","_fnPlaceHolder","$params","_fnDragStart","hasTouch","button","which","uiTreeDragging","eventElm","eventScope","currentNode","$parent","includes","dragScope","eventElmTagName","_$scope","preventDefault","offsetEdge","_width","_scope","_needCollapse","_copied","_tbody","_holder","_swaper","after","bind","dragEndEvent","dragMoveEvent","dragCancelEvent","document_height","max","scrollHeight","offsetHeight","clientHeight","document_width","scrollWidth","offsetWidth","clientWidth","ctrlKey","shiftKey","groupNodes","lastSelectedNodeIdx","newSelectedNodeIdx","lowerIdx","higherIdx","idx","every","_fnDragMove","dragStarted","dragDelaying","getSelection","removeAllRanges","selection","leftElmPos","topElmPos","top_scroll","window","bottom_scroll","innerHeight","scrollBy","targetScope","targetBefore","targetOffset","isEmpty","isSwapped","_target","fnSwapTree","targetX","targetY","isVertical","_info","_drag","_drop","treeScope","isHolder","__abortDrag","elementFromPoint","abortDrag","$$apply","_height","_prev","dragBorder","prepend","_isTable","_status","__multipleNodes","_fnBindDrag","unbind","_fnDragStartEvent","dragTimer","cancel","_fnKeydownHandler","keyCode","_fnKeyupHandler","bindDrag","dragEnd","keydownHandler","keyupHandler","$on","fnSetCollapse","fnSetExpand","expand_all_parents","deselect_node","get_parent","for_all_ancestors","child","add_node","new_node","add_node_root","expand_all","collapse_all","remove_node","expand_node","collapse_node","get_selected_node","get_first_node","get_children","get_siblings","get_next_sibling","get_prev_sibling","get_first_child","get_closest_ancestor_next_sibling","get_next_node","get_prev_node","get_last_descendant","select_parent_node","select_first_node","select_next_sibling","select_prev_sibling","select_next_node","select_prev_node","reset_selected_nodes","run","put","join","call"],"mappings":"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","file":"ng-tree-dnd.min.js","sourcesContent":["/**\r\n * The MIT License (MIT)\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to\r\n * deal in the Software without restriction, including without limitation the\r\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\n * sell copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\n * IN THE SOFTWARE.\r\n * @preserve\r\n */\r\n\r\n/**\r\n * Implementing TreeDnD & Event DrapnDrop (allow drag multi tree-table include all type: table, ol, ul)\r\n * Demo: http://thienhung1989.github.io/angular-tree-dnd\r\n * Github: https://github.com/thienhung1989/angular-tree-dnd\r\n * @version 3.2.5\r\n * @preserve\r\n * (c) 2015 Nguyuễn Thiện Hùng - <nguyenthienhung1989@gmail.com>\r\n */\r\n(function () {\r\n    'use strict';\r\n    angular.isUndefinedOrNull = function (val) {\r\n        return angular.isUndefined(val) || val === null;\r\n    }\r\n\r\n    angular.isDefined = function (val) {\r\n        return !(angular.isUndefined(val) || val === null);\r\n    }\r\n\r\n    angular.module('ntt.TreeDnD', ['template/TreeDnD/TreeDnD.html']).constant(\r\n        '$TreeDnDClass', {\r\n            tree:   'tree-dnd',\r\n            empty:  'tree-dnd-empty',\r\n            hidden: 'tree-dnd-hidden',\r\n            node:   'tree-dnd-node',\r\n            nodes:  'tree-dnd-nodes',\r\n            handle: 'tree-dnd-handle',\r\n            place:  'tree-dnd-placeholder',\r\n            drag:   'tree-dnd-drag',\r\n            status: 'tree-dnd-status',\r\n            icon:   {\r\n                '1':  'glyphicon glyphicon-minus',\r\n                '0':  'glyphicon glyphicon-plus',\r\n                '-1': 'glyphicon glyphicon-file'\r\n            }\r\n        }\r\n    ).directive(\r\n    'compile', [\r\n        '$compile', function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compile, function (new_val) {\r\n                            if (new_val) {\r\n                                /*\r\n                                 * Compile creates a linking function\r\n                                 * that can be used with any scope.\r\n                                 */\r\n                                var link = $compile(new_val);\r\n                                /*\r\n                                 * Executing the linking function\r\n                                 * creates a new element.\r\n                                 */\r\n                                var new_elem = link(scope);\r\n                                // Which we can then append to our DOM element.\r\n                                if(angular.isFunction(element.empty)){\r\n                                    element.empty()\r\n                                }else{\r\n                                    element.html('');\r\n                                }\r\n\r\n                                element.append(new_elem)\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n)\r\n    .directive(\r\n    'compileReplace', [\r\n        '$compile', function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compileReplace, function (new_val) {\r\n                            if (new_val) {\r\n                                /*\r\n                                 * Compile creates a linking function\r\n                                 * that can be used with any scope.\r\n                                 */\r\n                                var link = $compile(new_val);\r\n                                /*\r\n                                 * Executing the linking function\r\n                                 * creates a new element.\r\n                                 */\r\n                                var new_elem = link(scope);\r\n\r\n                                element.replaceWith(new_elem)\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n).directive(\r\n    'treeDndNodeHandle', function () {\r\n        return {\r\n            restrict: 'A',\r\n            scope:    true,\r\n            link:     function (scope, element, attrs) {\r\n                scope.$element = element;\r\n                scope.$type = 'TreeDnDNodeHandle';\r\n                if (scope.$class.handle) {\r\n                    element.addClass(scope.$class.handle);\r\n                }\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDndNode', function () {\r\n        return {\r\n            restrict: 'A',\r\n            replace:  true,\r\n            link:     function (scope, element, attrs) {\r\n                var _enabledDragDrop = (typeof scope.dragEnabled === 'boolean' || typeof scope.dropEnabled === 'boolean');\r\n                scope.$modelValue = null;\r\n                scope.$icon_class = '';\r\n                scope.$node_class = '';\r\n\r\n                if (scope.$class.node) {\r\n                    element.addClass(scope.$class.node);\r\n                    scope.$node_class = scope.$class.node;\r\n                }\r\n\r\n                scope.$watch(\r\n                    attrs.treeDndNode, function (newValue, oldValue, scope) {\r\n                        if (_enabledDragDrop) {\r\n                            scope.setScope(scope, newValue);\r\n                        }\r\n                        scope.$modelValue = newValue;\r\n                        scope.$icon_class = scope.$class.icon[newValue.__icon__];\r\n                    }, true\r\n                );\r\n\r\n                if (_enabledDragDrop) {\r\n\r\n                    scope.$element = element;\r\n                    scope.$type = 'TreeDnDNode';\r\n\r\n                    scope.getScopeNode = function () {\r\n                        return scope;\r\n                    };\r\n\r\n                    scope.getData = function () {\r\n                        return scope.$modelValue;\r\n                    };\r\n\r\n                    scope.getElementChilds = function () {\r\n                        return angular.element(element[0].querySelector('[tree-dnd-nodes]'));\r\n                    };\r\n                }\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDndNodes', function () {\r\n        return {\r\n            restrict: 'A',\r\n            replace:  true,\r\n            link:     function (scope, element, attrs) {\r\n                scope.nodes = [];\r\n                scope.$nodes_class = '';\r\n                scope.$type = 'TreeDnDNodes';\r\n                scope.$element = element;\r\n                scope.getScopeNode = null;\r\n\r\n                scope.$watch(\r\n                    attrs.treeDndNodes, function (newValue, oldValue, scope) {\r\n                        scope.nodes = newValue;\r\n                    }, true\r\n                );\r\n\r\n                if (scope.$class.nodes) {\r\n                    element.addClass(scope.$class.nodes);\r\n                    scope.$nodes_class = scope.$class.nodes;\r\n                }\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDnd', [\r\n        '$injector', '$timeout', '$http', '$compile', '$window', '$document', '$templateCache',\r\n        '$TreeDnDTemplate', '$TreeDnDClass', '$TreeDnDHelper', '$TreeDnDPlugin',\r\n        function ($injector, $timeout, $http, $compile, $window, $document, $templateCache,\r\n                  $TreeDnDTemplate, $TreeDnDClass, $TreeDnDHelper, $TreeDnDPlugin) {\r\n            return {\r\n                restrict:   'E',\r\n                scope:      true,\r\n                replace:    true,\r\n                controller: [\r\n                    '$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\r\n                        $scope.indent = 20;\r\n                        $scope.indent_plus = 15;\r\n                        $scope.indent_unit = 'px';\r\n                        $scope.$tree_class = 'table';\r\n                        $scope.primary_key = '__uid__';\r\n                        $scope.hasMultiSelect = $attrs.hasMultiSelect === 'true';\r\n                        $scope.onlyDeepestDrop = $attrs.onlyDeepestDrop === 'true';\r\n\r\n                        $scope.$type = 'TreeDnD';\r\n                        // $scope.enabledFilter = null;\r\n                        $scope.colDefinitions = [];\r\n                        $scope.$globals = {};\r\n                        $scope.$class = {};\r\n\r\n                        $scope.treeData = [];\r\n                        $scope.tree_nodes = [];\r\n\r\n                        $scope.sycning = false;\r\n\r\n                        $scope.$class = angular.copy($TreeDnDClass);\r\n                        angular.extend(\r\n                            $scope.$class.icon, {\r\n                                '1':  $attrs.iconExpand || 'glyphicon glyphicon-minus',\r\n                                '0':  $attrs.iconCollapse || 'glyphicon glyphicon-plus',\r\n                                '-1': $attrs.iconLeaf || 'glyphicon glyphicon-file'\r\n                            }\r\n                        );\r\n\r\n                        $scope.for_all_descendants = function (node, fn) {\r\n                            if (angular.isFunction(fn)) {\r\n                                var _i, _len, _nodes;\r\n\r\n                                if (fn(node)) {\r\n                                    return false;\r\n                                }\r\n                                _nodes = node.__children__;\r\n                                _len = _nodes.length;\r\n                                for (_i = 0; _i < _len; _i++) {\r\n                                    if (!$scope.for_all_descendants(_nodes[_i], fn)) {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                            }\r\n                            return true;\r\n                        };\r\n\r\n                        $scope.getLastDescendant = function (node) {\r\n                            var last_child, n;\r\n                            if (!node) {\r\n                                node = $scope.tree ? $scope.tree.selected_node : false;\r\n                            }\r\n                            if(node === false){\r\n                                return false;\r\n                            }\r\n                            n = node.__children__.length;\r\n                            if (n === 0) {\r\n                                return node;\r\n                            } else {\r\n                                last_child = node.__children__[n - 1];\r\n                                return $scope.getLastDescendant(last_child);\r\n                            }\r\n                        };\r\n\r\n                        $scope.getElementChilds = function () {\r\n                            return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\r\n                        };\r\n\r\n                        $scope.onClick = function (node) {\r\n                            if (angular.isDefined($scope.tree) && angular.isFunction($scope.tree.on_click)) {\r\n                                // We want to detach from Angular's digest cycle so we can\r\n                                // independently measure the time for one cycle.\r\n                                setTimeout(\r\n                                    function () {\r\n                                        $scope.tree.on_click(node);\r\n                                    }, 0\r\n                                );\r\n                            }\r\n                        };\r\n\r\n                        $scope.onSelect = function (node) {\r\n                            if (angular.isDefined($scope.tree)) {\r\n                                if (node !== $scope.tree.selected_node) {\r\n                                    $scope.tree.select_node(node);\r\n                                }\r\n\r\n                                if (angular.isFunction($scope.tree.on_select)) {\r\n                                    setTimeout(\r\n                                        function () {\r\n                                            $scope.tree.on_select(node);\r\n                                        }, 0\r\n                                    );\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        var passedExpand, _clone;\r\n                        $scope.toggleExpand = function (node, fnCallback) {\r\n                            passedExpand = true;\r\n                            if (angular.isFunction(fnCallback) && !fnCallback(node)) {\r\n                                passedExpand = false;\r\n                            } else if (angular.isFunction($scope.$callbacks.expand) && !$scope.$callbacks.expand(node)) {\r\n                                passedExpand = false;\r\n                            }\r\n\r\n                            if (passedExpand) {\r\n                                if (node.__children__.length > 0) {\r\n                                    node.__expanded__ = !node.__expanded__;\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        $scope.getHash = function (node) {\r\n                            if ($scope.primary_key === '__uid__') {\r\n                                return '#' + node.__parent__ + '#' + node.__uid__;\r\n                            } else {\r\n                                return '#' + node.__parent__ + '#' + node[$scope.primary_key];\r\n                            }\r\n                        };\r\n\r\n                        $scope.$callbacks = {\r\n                            for_all_descendants: $scope.for_all_descendants,\r\n                            expand:              function (node) {\r\n                                return true;\r\n                            },\r\n                            accept:              function (dragInfo, moveTo, isChanged) {\r\n                                return $scope.dropEnabled === true;\r\n                            },\r\n                            calsIndent:          function (level, skipUnit, skipEdge) {\r\n                                var unit = 0,\r\n                                    edge = skipEdge ? 0 : $scope.indent_plus;\r\n                                if (!skipUnit) {\r\n                                    unit = $scope.indent_unit ? $scope.indent_unit : 'px';\r\n                                }\r\n\r\n                                if (level - 1 < 1) {\r\n                                    return edge + unit;\r\n                                } else {\r\n                                    return $scope.indent * (level - 1) + edge + unit;\r\n                                }\r\n                            },\r\n                            droppable:           function () {\r\n                                return $scope.dropEnabled === true;\r\n                            },\r\n                            draggable:           function () {\r\n                                return $scope.dragEnabled === true;\r\n                            },\r\n                            beforeDrop:          function (event) {\r\n                                return true;\r\n                            },\r\n                            changeKey:           function (node) {\r\n                                var _key = node.__uid__;\r\n                                node.__uid__ = Math.random();\r\n                                if (node.__selected__) {\r\n                                    delete(node.__selected__);\r\n                                }\r\n\r\n                                if ($scope.primary_key !== '__uid__') {\r\n                                    _key = '' + node[$scope.primary_key];\r\n                                    _key = _key.replace(/_#.+$/g, '') + '_#' + node.__uid__;\r\n\r\n                                    node[$scope.primary_key] = _key;\r\n                                }\r\n                                // delete(node.__hashKey__);\r\n                            },\r\n                            clone:               function (node, _this) {\r\n                                _clone = angular.copy(node);\r\n                                this.for_all_descendants(_clone, this.changeKey);\r\n                                return _clone;\r\n                            },\r\n                            remove:              function (node, parent, _this) {\r\n                                return parent.splice(node.__index__, 1)[0];\r\n                            },\r\n                            add:                 function (node, pos, parent, _this) {\r\n                                if (parent) {\r\n                                    if (parent.length > -1) {\r\n                                        if (pos > -1) {\r\n                                            parent.splice(pos, 0, node);\r\n                                        } else {\r\n                                            // todo If children need load crazy\r\n                                            parent.push(node);\r\n                                        }\r\n                                    } else {\r\n                                        parent.push(node);\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        if ($attrs.enableDrag || $attrs.enableDrop) {\r\n                            $scope.placeElm = null;\r\n                            //                            $scope.dragBorder = 30;\r\n                            $scope.dragEnabled = null;\r\n                            $scope.dropEnabled = null;\r\n                            $scope.horizontal = null;\r\n\r\n                            if ($attrs.enableDrag) {\r\n\r\n                                $scope.dragDelay = 0;\r\n                                $scope.enabledMove = true;\r\n                                $scope.statusMove = true;\r\n                                $scope.enabledHotkey = false;\r\n                                $scope.enabledCollapse = null;\r\n                                $scope.statusElm = null;\r\n                                $scope.dragging = null;\r\n\r\n                                angular.extend(\r\n                                    $scope.$callbacks, {\r\n                                        beforeDrag: function (scopeDrag) {\r\n                                            return true;\r\n                                        },\r\n                                        dragStop:   function (event, skiped) {},\r\n                                        dropped:    function (info, pass, isMove) {\r\n                                            if (!info) {\r\n                                                return null;\r\n                                            }\r\n\r\n                                            if (!info.changed && isMove) {\r\n                                                return false;\r\n                                            }\r\n                                            var _node = info.node,\r\n                                                _nodeAdd = null,\r\n                                                _move = info.move,\r\n                                                _parent = null,\r\n                                                _parentRemove = (info.parent || info.drag.treeData),\r\n                                                _parentAdd = (_move.parent || info.target.treeData);\r\n\r\n                                            if (info.target.$callbacks.accept(info, info.move, info.changed)) {\r\n                                                if (isMove) {\r\n                                                    _parent = _parentRemove;\r\n                                                    if (angular.isDefined(_parent.__children__)) {\r\n                                                        _parent = _parent.__children__;\r\n                                                    }\r\n\r\n                                                    _nodeAdd = info.drag.$callbacks.remove(\r\n                                                        _node,\r\n                                                        _parent,\r\n                                                        info.drag.$callbacks\r\n                                                    );\r\n                                                } else {\r\n                                                    _nodeAdd = info.drag.$callbacks.clone(_node, info.drag.$callbacks);\r\n                                                }\r\n\r\n                                                // if node dragging change index in sample node parent\r\n                                                // and index node decrement\r\n                                                if (isMove &&\r\n                                                    info.drag === info.target &&\r\n                                                    _parentRemove === _parentAdd &&\r\n                                                    _move.pos >= info.node.__index__) {\r\n                                                    _move.pos--;\r\n                                                }\r\n\r\n                                                _parent = _parentAdd;\r\n                                                if (_parent.__children__) {\r\n                                                    _parent = _parent.__children__;\r\n                                                }\r\n\r\n                                                info.target.$callbacks.add(\r\n                                                    _nodeAdd,\r\n                                                    _move.pos,\r\n                                                    _parent,\r\n                                                    info.drag.$callbacks\r\n                                                );\r\n\r\n                                                return true;\r\n                                            }\r\n\r\n                                            return false;\r\n                                        },\r\n                                        dragStart:  function (event) {},\r\n                                        dragMove:   function (event) {}\r\n                                    }\r\n                                );\r\n\r\n                                $scope.setDragging = function (dragInfo) {\r\n                                    $scope.dragging = dragInfo;\r\n                                };\r\n\r\n                                $scope.enableMove = function (val) {\r\n                                    if (typeof val === \"boolean\") {\r\n                                        $scope.enabledMove = val;\r\n                                    } else {\r\n                                        $scope.enabledMove = true;\r\n                                    }\r\n                                };\r\n\r\n                                if ($attrs.enableStatus) {\r\n                                    $scope.enabledStatus = false;\r\n\r\n                                    $scope.hideStatus = function () {\r\n                                        if ($scope.statusElm) {\r\n                                            $scope.statusElm.addClass($scope.$class.hidden);\r\n                                        }\r\n                                    };\r\n\r\n                                    $scope.refreshStatus = function () {\r\n                                        if (!$scope.dragging) {\r\n                                            return;\r\n                                        }\r\n\r\n                                        if ($scope.enabledStatus) {\r\n                                            var statusElmOld = $scope.statusElm;\r\n                                            if ($scope.enabledMove) {\r\n                                                $scope.statusElm = angular.element($TreeDnDTemplate.getMove($scope));\r\n                                            } else {\r\n                                                $scope.statusElm = angular.element($TreeDnDTemplate.getCopy($scope));\r\n                                            }\r\n\r\n                                            if (statusElmOld !== $scope.statusElm) {\r\n                                                if (statusElmOld) {\r\n                                                    $scope.statusElm.attr('class', statusElmOld.attr('class'));\r\n                                                    $scope.statusElm.attr('style', statusElmOld.attr('style'));\r\n                                                    statusElmOld.remove();\r\n                                                }\r\n                                                $document.find('body').append($scope.statusElm);\r\n\r\n                                            }\r\n\r\n                                            $scope.statusElm.removeClass($scope.$class.hidden);\r\n                                        }\r\n                                    };\r\n\r\n                                    $scope.setPositionStatus = function (e) {\r\n                                        if ($scope.statusElm) {\r\n                                            $scope.statusElm.css(\r\n                                                {\r\n                                                    'left':    e.pageX + 10 + 'px',\r\n                                                    'top':     e.pageY + 15 + 'px',\r\n                                                    'z-index': 9999\r\n                                                }\r\n                                            );\r\n                                            $scope.statusElm.addClass($scope.$class.status);\r\n                                        }\r\n                                    };\r\n                                }\r\n                            }\r\n\r\n                            $scope.targeting = false;\r\n\r\n                            $scope.getPrevSibling = function (node) {\r\n                                if (node && node.__index__ > 0) {\r\n                                    var _parent, _index = node.__index__ - 1;\r\n\r\n                                    if (angular.isDefined(node.__parent_real__)) {\r\n                                        _parent = $scope.tree_nodes[node.__parent_real__];\r\n                                        return _parent.__children__[_index];\r\n                                    }\r\n                                    return $scope.treeData[_index];\r\n\r\n                                }\r\n                                return null;\r\n                            };\r\n\r\n                            $scope.getNode = function (index) {\r\n                                if (angular.isUndefinedOrNull(index)) {\r\n                                    return null;\r\n                                }\r\n                                return $scope.tree_nodes[index];\r\n                            };\r\n\r\n                            $scope.setScope = function (scope, node) {\r\n                                var _hash = $scope.getHash(node);\r\n                                if ($scope.$globals[_hash] !== scope) {\r\n                                    $scope.$globals[_hash] = scope;\r\n                                }\r\n                            };\r\n\r\n                            $scope.getScope = function (node) {\r\n                                if (node) {\r\n                                    return $scope.$globals[$scope.getHash(node)];\r\n                                }\r\n                                return $scope;\r\n\r\n                            };\r\n\r\n                            $scope.initPlace = function (element, dragElm) {\r\n\r\n                                var tagName = null,\r\n                                    isTable = false;\r\n\r\n                                if (element) {\r\n                                    tagName = element.prop('tagName').toLowerCase();\r\n                                    isTable = (tagName === 'tr' || tagName === 'td');\r\n                                } else {\r\n                                    tagName = $scope.getElementChilds().prop('tagName').toLowerCase();\r\n                                    isTable = (tagName === 'tbody' || tagName === 'table');\r\n                                }\r\n\r\n                                if (!$scope.placeElm) {\r\n\r\n                                    if (isTable) {\r\n                                        $scope.placeElm = angular.element($window.document.createElement('tr'));\r\n                                        var _len_down = $scope.colDefinitions.length;\r\n                                        $scope.placeElm.append(\r\n                                            angular.element($window.document.createElement('td'))\r\n                                                .addClass($scope.$class.empty)\r\n                                                .addClass('indented')\r\n                                                .addClass($scope.$class.place)\r\n                                        );\r\n                                        while (_len_down-- > 0) {\r\n                                            $scope.placeElm.append(\r\n                                                angular.element($window.document.createElement('td'))\r\n                                                    .addClass($scope.$class.empty)\r\n                                                    .addClass($scope.$class.place)\r\n                                            );\r\n                                        }\r\n                                    } else {\r\n                                        $scope.placeElm = angular.element($window.document.createElement('li'))\r\n                                            .addClass($scope.$class.empty)\r\n                                            .addClass($scope.$class.place);\r\n                                    }\r\n\r\n                                }\r\n\r\n                                if (dragElm) {\r\n                                    $scope.placeElm.css('height', $TreeDnDHelper.height(dragElm) + 'px');\r\n                                }\r\n\r\n                                if (element) {\r\n                                    element[0].parentNode.insertBefore($scope.placeElm[0], element[0]);\r\n                                } else {\r\n                                    $scope.getElementChilds().append($scope.placeElm);\r\n                                }\r\n\r\n                                return $scope.placeElm;\r\n                            };\r\n\r\n                            $scope.hidePlace = function () {\r\n                                if ($scope.placeElm) {\r\n                                    $scope.placeElm.addClass($scope.$class.hidden);\r\n                                }\r\n                            };\r\n\r\n                            $scope.showPlace = function () {\r\n                                if ($scope.placeElm) {\r\n                                    $scope.placeElm.removeClass($scope.$class.hidden);\r\n                                }\r\n                            };\r\n\r\n                            $scope.getScopeTree = function () {\r\n                                return $scope;\r\n                            };\r\n\r\n                        }\r\n\r\n                        $scope.$safeApply = function (fn) {\r\n                            var phase = this.$root.$$phase;\r\n                            if (phase === '$apply' || phase === '$digest') {\r\n                                if (fn && (typeof(fn) === 'function')) {\r\n                                    fn();\r\n                                }\r\n                            } else {\r\n                                this.$apply(fn);\r\n                            }\r\n                        };\r\n\r\n                    }],\r\n                compile:    function compile(tElement, tAttrs) {\r\n\r\n                    var $_Template = '',\r\n                        _element = tElement.html().trim();\r\n                    if (_element.length > 0) {\r\n                        $_Template = _element;\r\n                        tElement.html('');\r\n                    }\r\n\r\n                    return function fnPost(scope, element, attrs) {\r\n                        var getExpandOn = function () {\r\n                                if (scope.treeData && scope.treeData.length) {\r\n                                    var _firstNode = scope.treeData[0], _keys = Object.keys(_firstNode),\r\n                                        _regex = new RegExp(\"^__([a-zA-Z0-9_\\-]*)__$\"),\r\n                                        _len,\r\n                                        i;\r\n                                    // Auto get first field with type is string;\r\n                                    for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                                        if (typeof (_firstNode[_keys[i]]) === 'string' && !_regex.test(_keys[i])) {\r\n                                            scope.expandingProperty = _keys[i];\r\n                                            return;\r\n                                        }\r\n                                    }\r\n\r\n                                    // Auto get first\r\n                                    if (angular.isUndefinedOrNull(scope.expandingProperty)) {\r\n                                        scope.expandingProperty = _keys[0];\r\n                                    }\r\n\r\n                                }\r\n                            },\r\n                            getColDefs = function () {\r\n                                // Auto get Defs except attribute __level__ ....\r\n                                if (scope.treeData.length) {\r\n                                    var _col_defs = [], _firstNode = scope.treeData[0],\r\n                                        _regex = new RegExp(\"(^__([a-zA-Z0-9_\\-]*)__$|^\" + scope.expandingProperty + \"$)\"),\r\n                                        _keys = Object.keys(_firstNode),\r\n                                        i, _len;\r\n                                    // Auto get first field with type is string;\r\n                                    for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                                        if (typeof (_firstNode[_keys[i]]) === 'string' && !_regex.test(_keys[i])) {\r\n                                            _col_defs.push(\r\n                                                {\r\n                                                    field: _keys[i]\r\n                                                }\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                    scope.colDefinitions = _col_defs;\r\n                                }\r\n                            },\r\n                            _fnInitFilter,\r\n                            _fnInitOrderBy,\r\n                            _fnGetControl,\r\n                            _fnInitDrag,\r\n                            do_f = function (root, node, parent, parent_real, level, visible, index) {\r\n                                var _i, _len, _icon, _index_real, _dept, _hashKey;\r\n                                if (!angular.isArray(node.__children__)) {\r\n                                    node.__children__ = [];\r\n                                }\r\n\r\n                                node.__parent_real__ = parent_real;\r\n                                node.__parent__ = parent;\r\n                                _len = node.__children__.length;\r\n\r\n                                if (angular.isUndefinedOrNull(node.__expanded__) && _len > 0) {\r\n                                    node.__expanded__ = level < scope.expandLevel;\r\n                                }\r\n\r\n                                if (_len === 0) {\r\n                                    _icon = -1;\r\n                                } else {\r\n                                    if (node.__expanded__) {\r\n                                        _icon = 1;\r\n                                    } else {\r\n                                        _icon = 0;\r\n                                    }\r\n                                }\r\n                                // Insert item vertically\r\n                                _index_real = root.length;\r\n                                node.__index__ = index;\r\n                                node.__index_real__ = _index_real;\r\n                                node.__level__ = level;\r\n                                node.__icon__ = _icon;\r\n                                node.__visible__ = !!visible;\r\n\r\n                                if (angular.isUndefinedOrNull(node.__uid__)) {\r\n                                    node.__uid__ = \"\" + Math.random();\r\n                                }\r\n\r\n                                root.push(node);\r\n\r\n                                // Check node children\r\n                                _dept = 1;\r\n                                if (_len > 0) {\r\n                                    for (_i = 0; _i < _len; _i++) {\r\n                                        _dept += do_f(\r\n                                            root,\r\n                                            node.__children__[_i],\r\n                                            (scope.primary_key === '__uid__') ? node.__uid__ : node[scope.primary_key],\r\n                                            _index_real,\r\n                                            level + 1,\r\n                                            visible && node.__expanded__,\r\n                                            _i\r\n                                        );\r\n                                    }\r\n                                }\r\n\r\n                                _hashKey = scope.getHash(node);\r\n\r\n                                if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\r\n                                    node.__hashKey__ = _hashKey;\r\n                                    // delete(scope.$globals[_hashKey]);\r\n                                }\r\n\r\n                                node.__dept__ = _dept;\r\n\r\n                                return _dept;\r\n                            },\r\n                            reload_data = function (oData) {\r\n                                var _data,\r\n                                    _len,\r\n                                    _tree_nodes = [];\r\n//                                console.log('---------');\r\n                                if (angular.isDefined(oData)) {\r\n                                    if (!angular.isArray(oData) || oData.length === 0) {\r\n                                        return [];\r\n                                    } else {\r\n                                        _data = oData;\r\n                                    }\r\n                                } else if (!angular.isArray(scope.treeData) || scope.treeData.length === 0) {\r\n                                    return [];\r\n                                } else {\r\n                                    _data = scope.treeData;\r\n                                }\r\n\r\n                                if (!attrs.expandOn) {\r\n                                    getExpandOn();\r\n                                }\r\n\r\n                                if (!attrs.columnDefs) {\r\n                                    getColDefs();\r\n                                }\r\n\r\n                                if (angular.isDefined(scope.orderBy)) {\r\n                                    if (!angular.isFunction(_fnInitOrderBy)) {\r\n                                        _fnInitOrderBy = $TreeDnDPlugin('$TreeDnDOrderBy');\r\n                                    }\r\n\r\n                                    if (angular.isFunction(_fnInitOrderBy)) {\r\n                                        _data = _fnInitOrderBy(_data, scope.orderBy);\r\n                                    }\r\n                                }\r\n\r\n                                if (angular.isDefined(scope.filter)) {\r\n                                    if (!angular.isFunction(_fnInitFilter)) {\r\n                                        _fnInitFilter = $TreeDnDPlugin('$TreeDnDFilter');\r\n                                    }\r\n\r\n                                    if (angular.isFunction(_fnInitFilter)) {\r\n                                        _data = _fnInitFilter(_data, scope.filter, scope.filterOptions);\r\n                                    }\r\n                                }\r\n\r\n                                _len = _data.length;\r\n                                if (_len > 0) {\r\n                                    var _i,\r\n                                        _offset, _max, _min, _keys,\r\n                                        _deptTotal = 0;\r\n\r\n                                    for (_i = 0; _i < _len; _i++) {\r\n                                        _deptTotal += do_f(_tree_nodes, _data[_i], null, null, 1, true, _i);\r\n                                    }\r\n\r\n                                    // clear Element Empty\r\n                                    _keys = Object.keys(scope.$globals);\r\n                                    _len = scope.$globals.length;\r\n                                    _offset = _len - _deptTotal;\r\n\r\n                                    if (_offset !== 0) {\r\n                                        _max = _len - _offset;\r\n                                        _min = _max - Math.abs(_offset);\r\n                                        for (_i = _min; _i < _max; _i++) {\r\n                                            delete(scope.$globals[_keys[_i]]);\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                // clear memory\r\n                                if (angular.isDefined(scope.tree_nodes)) {\r\n                                    delete(scope.tree_nodes);\r\n                                }\r\n\r\n                                scope.tree_nodes = _tree_nodes;\r\n                                return _tree_nodes;\r\n                            },\r\n                            _defaultFilterOption = {\r\n                                showParent: true,\r\n                                showChild:  false,\r\n                                beginAnd:   true\r\n                            },\r\n                            tree,\r\n                            check_exist_attr = function (attrs, existAttr, isAnd) {\r\n                                if (angular.isUndefinedOrNull(existAttr)) {\r\n                                    return false;\r\n                                }\r\n\r\n                                if (existAttr === '*' || !angular.isUndefined(attrs[existAttr])) {\r\n                                    return true;\r\n                                }\r\n\r\n                                if (angular.isArray(existAttr)) {\r\n                                    return for_each_attrs(attrs, existAttr, isAnd);\r\n                                }\r\n                            },\r\n                            for_each_attrs = function (attrs, exist, isAnd) {\r\n                                var i, len = exist.length, passed = false;\r\n\r\n                                if (len === 0) {\r\n                                    return null;\r\n                                }\r\n                                for (i = 0; i < len; i++) {\r\n                                    if (check_exist_attr(attrs, exist[i], !isAnd)) {\r\n                                        passed = true;\r\n                                        if (!isAnd) {\r\n                                            return true;\r\n                                        }\r\n                                    } else {\r\n                                        if (isAnd) {\r\n                                            return false;\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                return passed;\r\n                            },\r\n                            generateWatch = function (type, nameAttr, valDefault, nameScope, fnNotExist, fnAfter, fnBefore) {\r\n                                nameScope = nameScope || nameAttr;\r\n                                if (typeof type === 'string' || angular.isArray(type)) {\r\n                                    if (angular.isFunction(fnBefore) && fnBefore()) {\r\n                                        return;//jmp\r\n                                    }\r\n                                    if (typeof tAttrs[nameAttr] === 'string') {\r\n                                        scope.$watch(\r\n                                            tAttrs[nameAttr], function (val, old, scope) {\r\n                                                if ((typeof type === 'string' && typeof val === type) ||\r\n                                                    (angular.isArray(type) && type.indexOf(typeof val) > -1)\r\n                                                ) {\r\n                                                    scope[nameScope] = val;\r\n                                                } else {\r\n                                                    if (angular.isFunction(valDefault)) {\r\n                                                        scope[nameScope] = valDefault(val);\r\n                                                    } else {\r\n                                                        scope[nameScope] = valDefault;\r\n                                                    }\r\n                                                }\r\n\r\n                                                if (angular.isFunction(fnAfter)) {\r\n                                                    fnAfter(scope[nameScope], scope);\r\n                                                }\r\n                                            }, true\r\n                                        );\r\n                                    } else {\r\n\r\n                                        if (angular.isFunction(fnNotExist)) {\r\n                                            scope[nameScope] = fnNotExist();\r\n                                        } else if (!angular.isUndefined(fnNotExist)) {\r\n                                            scope[nameScope] = fnNotExist;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            _watches = [\r\n                                [\r\n                                    'enableDrag', [\r\n                                    ['boolean', 'enableStatus', null, 'enabledStatus'],\r\n                                    ['boolean', 'enableMove', null, 'enabledMove'],\r\n                                    ['number', 'dragDelay', 0, null, 0],\r\n                                    ['boolean', 'enableCollapse', null, 'enabledCollapse'],\r\n                                    [\r\n                                        'boolean', 'enableHotkey', null, 'enabledHotkey', null, function (isHotkey) {\r\n                                        if (isHotkey) {\r\n                                            scope.enabledMove = false;\r\n                                        } else {\r\n                                            scope.enabledMove = scope.statusMove;\r\n                                        }\r\n                                    }]\r\n                                ]],\r\n                                [\r\n                                    ['enableDrag', 'enableStatus'], [\r\n                                    [\r\n                                        'string', 'templateCopy', attrs.templateCopy, 'templateCopy', null,\r\n                                        function (_url) {\r\n                                            if (_url && $templateCache.get(_url)) {\r\n                                                $TreeDnDTemplate.setCopy(_url, scope);\r\n                                            }\r\n                                        }],\r\n                                    [\r\n                                        'string', 'templateMove', attrs.templateMove, 'templateMove', null,\r\n                                        function (_url) {\r\n                                            if (_url && $templateCache.get(_url)) {\r\n                                                $TreeDnDTemplate.setMove(_url, scope);\r\n                                            }\r\n                                        }]\r\n                                ]],\r\n                                [\r\n                                    [['enableDrag', 'enableDrop']], [\r\n                                    ['number', 'dragBorder', 30, 'dragBorder', 30]]\r\n                                ],\r\n                                [\r\n                                    '*', [\r\n                                    ['boolean', 'horizontal'],\r\n                                    [\r\n                                        'callback', 'treeClass', function (val) {\r\n                                        switch (typeof val) {\r\n                                            case 'string':\r\n                                                scope.$tree_class = val;\r\n                                                break;\r\n                                            case 'object':\r\n                                                angular.extend(scope.$class, val);\r\n                                                scope.$tree_class = scope.$class.tree;\r\n                                                break;\r\n                                            default:\r\n                                                scope.$tree_class = attrs.treeClass;\r\n                                                break;\r\n                                        }\r\n                                    }, 'treeClass', function () {\r\n                                        scope.$tree_class = scope.$class.tree + ' table';\r\n                                    }, null, function () {\r\n                                        if (/^(\\s+[\\w\\-]+){2,}$/g.test(\" \" + attrs.treeClass)) {\r\n                                            scope.$tree_class = attrs.treeClass.trim();\r\n                                            return true;\r\n                                        }\r\n                                    }],\r\n                                    [\r\n                                        ['object', 'string'], 'expandOn', getExpandOn, 'expandingProperty', getExpandOn,\r\n                                        function (expandOn) {\r\n                                            if (angular.isUndefinedOrNull(expandOn)) {\r\n                                                scope.expandingProperty = attrs.expandOn;\r\n                                            }\r\n                                        }],\r\n                                    [\r\n                                        'object', 'treeControl', angular.isDefined(scope.tree) ? scope.tree : {},\r\n                                        'tree', null, function ($tree) {\r\n\r\n                                        if (!angular.isFunction(_fnGetControl)) {\r\n                                            _fnGetControl = $TreeDnDPlugin('$TreeDnDControl');\r\n                                        }\r\n\r\n                                        if (angular.isFunction(_fnGetControl)) {\r\n                                            tree = angular.extend(\r\n                                                $tree,\r\n                                                _fnGetControl(scope)\r\n                                            );\r\n                                        }\r\n                                    }],\r\n                                    [\r\n                                        ['array', 'object'], 'columnDefs', getColDefs, 'colDefinitions', getColDefs,\r\n                                        function (colDefs) {\r\n                                            if (angular.isUndefinedOrNull(colDefs) || !angular.isArray(colDefs)) {\r\n                                                scope.colDefinitions = getColDefs();\r\n                                            }\r\n                                        }],\r\n                                    [['object', 'string', 'array', 'function'], 'orderBy', attrs.orderBy],\r\n                                    [\r\n                                        ['object', 'array'], 'filter', null, 'filter', null, function (filters) {\r\n                                        var _passed = false;\r\n                                        if (angular.isDefined(filters) && !angular.isArray(filters)) {\r\n                                            var _keysF = Object.keys(filters),\r\n                                                _lenF = _keysF.length, _iF;\r\n\r\n                                            if (_lenF > 0) {\r\n                                                for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                                                    if ((typeof filters[_keysF[_iF]]) === 'string' &&\r\n                                                        filters[_keysF[_iF]].length === 0) {\r\n                                                        continue;\r\n                                                    }\r\n                                                    _passed = true;\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                        scope.enabledFilter = _passed;\r\n                                        reload_data();\r\n                                    }],\r\n                                    [\r\n                                        'object', 'filterOptions', _defaultFilterOption, 'filterOptions',\r\n                                        _defaultFilterOption, function (option) {\r\n                                        if (typeof option === \"object\") {\r\n                                            scope.filterOptions = angular.extend(_defaultFilterOption, option);\r\n                                        }\r\n                                    }],\r\n                                    ['string', 'primaryKey', attrs.primaryKey, 'primary_key', '__uid__'],\r\n                                    ['string', 'indentUnit', attrs.indentUnit, 'indent_unit'],\r\n                                    ['number', 'indent', 30, null, 30],\r\n                                    ['number', 'indentPlus', 20, null, 20],\r\n                                    [\r\n                                        'null', 'callbacks',\r\n                                        function (optCallbacks) {\r\n                                            angular.forEach(\r\n                                                optCallbacks, function (value, key) {\r\n                                                    if (typeof value === \"function\") {\r\n                                                        if (scope.$callbacks[key]) {\r\n                                                            scope.$callbacks[key] = value;\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            );\r\n                                            return scope.$callbacks;\r\n                                        },\r\n                                        '$callbacks'\r\n                                    ],\r\n                                    [\r\n                                        'number', 'expandLevel', 3, 'expandLevel', 3, function () {\r\n                                        reload_data();\r\n                                    }],\r\n                                    ['boolean', 'enableDrag', null, 'dragEnabled'],\r\n                                    ['boolean', 'enableDrop', null, 'dropEnabled']\r\n                                ]]\r\n                            ],\r\n                            w, lenW = _watches.length,\r\n                            i, len,\r\n                            _curW,\r\n                            _typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW;\r\n                        for (w = 0; w < lenW; w++) {\r\n                            // skip if not exist\r\n                            if (!check_exist_attr(attrs, _watches[w][0], true)) {\r\n                                continue;\r\n                            }\r\n                            _curW = _watches[w][1];\r\n                            for (i = 0, len = _curW.length; i < len; i++) {\r\n                                _typeW = _curW[i][0];\r\n                                _nameW = _curW[i][1];\r\n                                _defaultW = _curW[i][2];\r\n                                _scopeW = _curW[i][3];\r\n                                _NotW = _curW[i][4];\r\n                                _AfterW = _curW[i][5];\r\n                                _BeforeW = _curW[i][6];\r\n                                generateWatch(_typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW);\r\n                            }\r\n                        }\r\n\r\n                        if (attrs.treeData) {\r\n                            scope.$watch(\r\n                                attrs.treeData, function (val) {\r\n                                    scope.treeData = val;\r\n                                }, true\r\n                            );\r\n                        }\r\n\r\n                        scope.$watch(\r\n                            'treeData', function (val) {\r\n                                reload_data(val);\r\n                            }, true\r\n                        );\r\n\r\n                        scope.reload_data = reload_data;\r\n\r\n                        if (attrs.enableDrag) {\r\n                            _fnInitDrag = $TreeDnDPlugin('$TreeDnDDrag');\r\n                            if (angular.isFunction(_fnInitDrag)) {\r\n                                _fnInitDrag(scope, element, $window, $document);\r\n                            }\r\n                        }\r\n\r\n                        // apply Template\r\n                        scope.$safeApply(\r\n                            function () {\r\n                                if ($_Template.length > 0) {\r\n                                    element.append($compile($_Template)(scope));\r\n                                } else {\r\n                                    $http.get(\r\n                                        attrs.templateUrl || $TreeDnDTemplate.getPath(),\r\n                                        {cache: $templateCache}\r\n                                    ).success(\r\n                                        function (data) {\r\n                                            element.append($compile(data.trim())(scope));\r\n                                        }\r\n                                    );\r\n                                }\r\n                            }\r\n                        );\r\n                    };\r\n                }\r\n            };\r\n        }]\r\n).factory(\r\n    '$TreeDnDConvert', function () {\r\n        var _$initConvert = {\r\n            line2tree: function (data, primaryKey, parentKey) {\r\n                if (!data || data.length === 0 || !primaryKey || !parentKey) {\r\n                    return [];\r\n                }\r\n                var tree = [],\r\n                    rootIds = [],\r\n                    item = data[0],\r\n                    _primary = item[primaryKey],\r\n                    treeObjs = {},\r\n                    parentId, parent,\r\n                    len = data.length,\r\n                    i = 0;\r\n                while (i < len) {\r\n                    item = data[i++];\r\n                    _primary = item[primaryKey];\r\n                    treeObjs[_primary] = item;\r\n                    parentId = item[parentKey];\r\n                    if (parentId) {\r\n                        parent = treeObjs[parentId];\r\n                        if (parent.__children__) {\r\n                            parent.__children__.push(item);\r\n                        } else {\r\n                            parent.__children__ = [item];\r\n                        }\r\n                    } else {\r\n                        rootIds.push(_primary);\r\n                    }\r\n                }\r\n                len = rootIds.length;\r\n                for (i = 0; i < len; i++) {\r\n                    tree.push(treeObjs[rootIds[i]]);\r\n                }\r\n                return tree;\r\n            },\r\n            tree2tree: function (data, parentKey) {\r\n                var access_child = function (data) {\r\n                    var _tree = [];\r\n                    var _i, _len = data.length, _copy, _child;\r\n                    for (_i = 0; _i < _len; _i++) {\r\n                        _copy = angular.copy(data[_i]);\r\n                        if (angular.isArray(_copy[parentKey]) && _copy[parentKey].length > 0) {\r\n                            _child = access_child(_copy[parentKey]);\r\n                            delete(_copy[parentKey]);\r\n                            _copy.__children__ = _child;\r\n                        }\r\n                        _tree.push(_copy);\r\n                    }\r\n                    return _tree;\r\n                };\r\n\r\n                return access_child(data);\r\n            }\r\n        }\r\n\r\n        return _$initConvert;\r\n    }\r\n).factory(\r\n    '$TreeDnDHelper', [\r\n        '$document', '$window', function ($document, $window) {\r\n            var _$helper = {\r\n                nodrag:          function (targetElm) {\r\n                    return (typeof targetElm.attr('data-nodrag')) !== \"undefined\";\r\n                },\r\n                eventObj:        function (e) {\r\n                    var obj = e;\r\n                    if (e.targetTouches !== undefined) {\r\n                        obj = e.targetTouches.item(0);\r\n                    } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\r\n                        obj = e.originalEvent.targetTouches.item(0);\r\n                    }\r\n                    return obj;\r\n                },\r\n                dragInfo:        function (scope) {\r\n                    var _node = scope.getData(),\r\n                        _tree = scope.getScopeTree(),\r\n                        _parent = scope.getNode(_node.__parent_real__);\r\n                    return {\r\n                        node:    _node,\r\n                        parent:  _parent,\r\n                        move:    {\r\n                            parent: _parent,\r\n                            pos:    _node.__index__\r\n                        },\r\n                        scope:   scope,\r\n                        target:  _tree,\r\n                        drag:    _tree,\r\n                        drop:    scope.getPrevSibling(_node),\r\n                        changed: false\r\n                    };\r\n                },\r\n                height:          function (element) {\r\n                    return element.prop('scrollHeight');\r\n                },\r\n                width:           function (element) {\r\n                    return element.prop('scrollWidth');\r\n                },\r\n                offset:          function (element) {\r\n                    var boundingClientRect = element[0].getBoundingClientRect();\r\n                    return {\r\n                        width:  element.prop('offsetWidth'),\r\n                        height: element.prop('offsetHeight'),\r\n                        top:    boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\r\n                        left:   boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\r\n                    };\r\n                },\r\n                positionStarted: function (e, target) {\r\n                    var pos = {};\r\n                    pos.offsetX = e.pageX - this.offset(target).left;\r\n                    pos.offsetY = e.pageY - this.offset(target).top;\r\n                    pos.startX = pos.lastX = e.pageX;\r\n                    pos.startY = pos.lastY = e.pageY;\r\n                    pos.nowX = pos.nowY = pos.distX = pos.distY = pos.dirAx = 0;\r\n                    pos.dirX = pos.dirY = pos.lastDirX = pos.lastDirY = pos.distAxX = pos.distAxY = 0;\r\n                    return pos;\r\n                },\r\n                positionMoved:   function (e, pos, firstMoving) {\r\n                    // mouse position last events\r\n                    pos.lastX = pos.nowX;\r\n                    pos.lastY = pos.nowY;\r\n                    // mouse position this events\r\n                    pos.nowX = e.pageX;\r\n                    pos.nowY = e.pageY;\r\n                    // distance mouse moved between events\r\n                    pos.distX = pos.nowX - pos.lastX;\r\n                    pos.distY = pos.nowY - pos.lastY;\r\n                    // direction mouse was moving\r\n                    pos.lastDirX = pos.dirX;\r\n                    pos.lastDirY = pos.dirY;\r\n                    // direction mouse is now moving (on both axis)\r\n                    pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\r\n                    pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\r\n                    // axis mouse is now moving on\r\n                    var newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\r\n                    // do nothing on first move\r\n                    if (firstMoving) {\r\n                        pos.dirAx = newAx;\r\n                        pos.moving = true;\r\n                        return;\r\n                    }\r\n                    // calc distance moved on this axis (and direction)\r\n                    if (pos.dirAx !== newAx) {\r\n                        pos.distAxX = 0;\r\n                        pos.distAxY = 0;\r\n                    } else {\r\n                        pos.distAxX += Math.abs(pos.distX);\r\n                        if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\r\n                            pos.distAxX = 0;\r\n                        }\r\n                        pos.distAxY += Math.abs(pos.distY);\r\n                        if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\r\n                            pos.distAxY = 0;\r\n                        }\r\n                    }\r\n                    pos.dirAx = newAx;\r\n                },\r\n                replaceIndent:   function (scope, element, indent, attr) {\r\n                    attr = attr ? attr : 'left';\r\n                    angular.element(element.children()[0]).css(attr, scope.$callbacks.calsIndent(indent));\r\n                }\r\n            };\r\n            return _$helper;\r\n        }]\r\n).factory(\r\n    '$TreeDnDPlugin',['$injector', function ($injector) {\r\n        var _fnget = function (name) {\r\n                if (angular.isDefined($injector) && $injector.has(name)) {\r\n                    return $injector.get(name);\r\n                }\r\n                return null;\r\n            };\r\n        return _fnget;\r\n    }]\r\n).factory(\r\n    '$TreeDnDTemplate', [\r\n        '$templateCache', function ($templateCache) {\r\n            var templatePath = 'template/TreeDnD/TreeDnD.html',\r\n                copyPath = 'template/TreeDnD/TreeDnDStatusCopy.html',\r\n                movePath = 'template/TreeDnD/TreeDnDStatusMove.html',\r\n                scopes = {},\r\n                temp,\r\n                _$init = {\r\n                    setMove: function (path, scope) {\r\n                        if (!scopes[scope.$id]) {\r\n                            scopes[scope.$id] = {};\r\n                        }\r\n                        scopes[scope.$id].movePath = path;\r\n                    },\r\n                    setCopy: function (path, scope) {\r\n                        if (!scopes[scope.$id]) {\r\n                            scopes[scope.$id] = {};\r\n                        }\r\n                        scopes[scope.$id].copyPath = path;\r\n                    },\r\n                    getPath: function () {\r\n                        return templatePath;\r\n                    },\r\n                    getCopy: function (scope) {\r\n                        if (scopes[scope.$id] && scopes[scope.$id].copyPath) {\r\n                            temp = $templateCache.get(scopes[scope.$id].copyPath);\r\n                            if (temp) {\r\n                                return temp;\r\n                            }\r\n                        }\r\n                        return $templateCache.get(copyPath);\r\n                    },\r\n                    getMove: function (scope) {\r\n                        if (scopes[scope.$id] && scopes[scope.$id].movePath) {\r\n                            temp = $templateCache.get(scopes[scope.$id].movePath);\r\n                            if (temp) {\r\n                                return temp;\r\n                            }\r\n                        }\r\n                        return $templateCache.get(movePath);\r\n                    }\r\n                };\r\n\r\n            return _$init;\r\n        }]\r\n).factory(\r\n    '$TreeDnDFilter', [\r\n        '$filter', function ($filter) {\r\n            var _iF, _lenF, _keysF,\r\n                _filter,\r\n                _state,\r\n                for_all_descendants = function for_all_descendants(options, node, fieldChild, fnBefore, fnAfter, parentPassed) {\r\n                    if (!angular.isFunction(fnBefore)) {\r\n                        return null;\r\n                    }\r\n\r\n                    var _i, _len, _nodes,\r\n                        _nodePassed = fnBefore(options, node),\r\n                        _childPassed = false;\r\n\r\n                    if (angular.isDefined(node[fieldChild])) {\r\n                        _nodes = node[fieldChild];\r\n                        _len = _nodes.length;\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            _childPassed = for_all_descendants(\r\n                                options,\r\n                                _nodes[_i],\r\n                                fieldChild,\r\n                                fnBefore,\r\n                                fnAfter,\r\n                                _nodePassed || parentPassed\r\n                            ) || _childPassed;\r\n                        }\r\n                    }\r\n\r\n                    if (angular.isFunction(fnAfter)) {\r\n                        fnAfter(options, node, _nodePassed === true, _childPassed === true, parentPassed === true);\r\n                    }\r\n\r\n                    return _nodePassed || _childPassed;\r\n                },\r\n                // Check data by filter\r\n                _fnCheck = function _fnCheck(callback, check) {\r\n                    if (angular.isUndefinedOrNull(check) || angular.isArray(check)) {\r\n                        return null;\r\n                    }\r\n\r\n                    if (angular.isFunction(callback)) {\r\n                        return callback(check, $filter);\r\n                    } else {\r\n                        if (typeof callback === 'boolean') {\r\n                            check = !!check;\r\n                            return check === callback;\r\n                        } else if (angular.isDefined(callback)) {\r\n                            try {\r\n                                var _regex = new RegExp(callback);\r\n                                return _regex.test(check);\r\n                            }\r\n                            catch (err) {\r\n                                if (typeof check === 'string') {\r\n                                    return check.indexOf(callback) > -1;\r\n                                } else {\r\n                                    return null;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            return null;\r\n                        }\r\n                    }\r\n                },\r\n                _fnProccess = function _fnProccess(node, condition, isAnd) {\r\n                    if (angular.isArray(condition)) {\r\n                        return for_each_filter(node, condition, isAnd);\r\n                    } else {\r\n                        var _key = condition.field,\r\n                            _callback = condition.callback,\r\n                            _iO, _keysO, _lenO;\r\n\r\n                        if (_key === '_$') {\r\n                            _keysO = Object.keys(node);\r\n                            _lenO = _keysO.length;\r\n                            for (_iO = 0; _iO < _lenO; _iO++) {\r\n                                if (_fnCheck(_callback, node[_keysO[_iO]])) {\r\n                                    return true;\r\n                                }\r\n                            }\r\n                        } else if (angular.isDefined(node[_key])) {\r\n                            return _fnCheck(_callback, node[_key]);\r\n                        }\r\n                    }\r\n                },\r\n                for_each_filter = function for_each_filter(node, conditions, isAnd) {\r\n                    var i, len = conditions.length, passed = false;\r\n                    if (len === 0) {\r\n                        return null;\r\n                    }\r\n\r\n                    for (i = 0; i < len; i++) {\r\n                        if (_fnProccess(node, conditions[i], !isAnd)) {\r\n                            passed = true;\r\n                            // if condition `or` then return;\r\n                            if (!isAnd) {\r\n                                return true;\r\n                            }\r\n                        } else {\r\n\r\n                            // if condition `and` and result in fnProccess = false then return;\r\n                            if (isAnd) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return passed;\r\n                },\r\n\r\n                // Will call _fnAfter to clear data no need\r\n                _fnAfter = function _fnAfter(options, node, isNodePassed, isChildPassed, isParentPassed) {\r\n                    if (isNodePassed === true) {\r\n                        node.__filtered__ = true;\r\n                        node.__filtered_visible__ = true;\r\n                        return; //jmp\r\n                    } else if ((isChildPassed === true && options.showParent === true)\r\n                               || (isParentPassed === true && options.showChild === true)) {\r\n                        node.__filtered__ = false;\r\n                        node.__filtered_visible__ = true;\r\n                        return; //jmp\r\n                    }\r\n\r\n                    // remove attr __filtered__\r\n                    delete(node.__filtered__);\r\n                    delete(node.__filtered_visible__);\r\n                },\r\n                _fnBefore = function _fnBefore(options, node) {\r\n                    if (options.filter.length === 0) {\r\n                        return true;\r\n                    } else {\r\n                        return _fnProccess(node, options.filter, options.beginAnd || false);\r\n                    }\r\n                },\r\n                _fnConvert = function _fnConvert(filters) {\r\n                    // convert filter object to array filter\r\n                    if (angular.isObject(filters) && !angular.isArray(filters)) {\r\n                        _keysF = Object.keys(filters);\r\n                        _lenF = _keysF.length;\r\n                        _filter = [];\r\n\r\n                        if (_lenF > 0) {\r\n                            for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                                if ((typeof filters[_keysF[_iF]]) === 'string' && filters[_keysF[_iF]].length === 0) {\r\n                                    continue;\r\n                                } else if (angular.isArray(filters[_keysF[_iF]])) {\r\n                                    _state = filters[_keysF[_iF]];\r\n                                } else if (angular.isObject(filters[_keysF[_iF]])) {\r\n                                    _state = _fnConvert(filters[_keysF[_iF]]);\r\n                                } else {\r\n                                    _state = {\r\n                                        field:    _keysF[_iF],\r\n                                        callback: filters[_keysF[_iF]]\r\n                                    };\r\n                                }\r\n                                _filter.push(_state);\r\n                            }\r\n                        }\r\n                        _state = null;\r\n                        return _filter;\r\n                    }\r\n                    else {\r\n                        return filters;\r\n                    }\r\n                },\r\n                _fnMain = function _fnMain(treeData, filters, _options) {\r\n                    if (!angular.isArray(treeData)\r\n                        || treeData.length === 0\r\n                        || !(angular.isArray(filters) || angular.isObject(filters))\r\n                        || filters.length === 0) {\r\n                        return treeData;\r\n                    }\r\n\r\n                    var _i, _len,\r\n                        _filter;\r\n\r\n                    _filter = _fnConvert(filters);\r\n                    if (!(angular.isArray(_filter) || angular.isObject(_filter))\r\n                        || _filter.length === 0) {\r\n                        return treeData;\r\n                    }\r\n                    _options.filter = _filter;\r\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                        for_all_descendants(\r\n                            _options,\r\n                            treeData[_i],\r\n                            '__children__',\r\n                            _fnBefore, _fnAfter\r\n                        );\r\n                    }\r\n\r\n                    return treeData;\r\n                };\r\n\r\n            return _fnMain;\r\n        }]\r\n).factory(\r\n    '$TreeDnDOrderBy', [\r\n        '$filter', function ($filter) {\r\n            var _fnOrderBy = $filter('orderBy'),\r\n                for_all_descendants = function for_all_descendants(options, node, name, fnOrderBy) {\r\n                    var _i, _len, _nodes;\r\n\r\n                    if (angular.isDefined(node[name])) {\r\n                        _nodes = node[name];\r\n                        _len = _nodes.length;\r\n                        // OrderBy children\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            _nodes[_i] = for_all_descendants(options, _nodes[_i], name, fnOrderBy);\r\n                        }\r\n\r\n                        node[name] = fnOrderBy(node[name], options);\r\n                    }\r\n                    return node;\r\n                },\r\n                _fnOrder = function _fnOrder(list, orderBy) {\r\n                    return _fnOrderBy(list, orderBy);\r\n                },\r\n                _fnMain = function _fnMain(treeData, orderBy) {\r\n                    if (!angular.isArray(treeData)\r\n                        || treeData.length === 0\r\n                        || !(angular.isArray(orderBy) || angular.isObject(orderBy) || angular.isString(orderBy) || angular.isFunction(orderBy))\r\n                        || (orderBy.length === 0 && !angular.isFunction(orderBy))) {\r\n                        return treeData;\r\n                    }\r\n\r\n                    var _i, _len,\r\n                        _iF, _lenF, _keysF;\r\n\r\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                        treeData[_i] = for_all_descendants(\r\n                            orderBy,\r\n                            treeData[_i],\r\n                            '__children__',\r\n                            _fnOrder\r\n                        );\r\n                    }\r\n\r\n                    treeData = _fnOrder(treeData, orderBy);\r\n                    return treeData;\r\n                };\r\n\r\n            return _fnMain;\r\n        }]\r\n).factory(\r\n    '$TreeDnDDrag', [\r\n        '$rootScope', '$timeout', '$TreeDnDHelper',\r\n        function ($rootScope, $timeout, $TreeDnDHelper) {\r\n            var _fnDragEnd;\r\n            var holderWasShown = false;\r\n            var nodesSelected = [];\r\n            var lastSelectedNode = null;\r\n\r\n            $rootScope.resetNodesSelected = function () {\r\n                nodesSelected.forEach(function (node) { node.__selected = false; });\r\n                nodesSelected = [];\r\n                lastSelectedNode = null;\r\n            };\r\n\r\n            var _offset,\r\n                _fnPlaceHolder = function (e, $params) {\r\n                    if ($params.placeElm) {\r\n                        _offset = $TreeDnDHelper.offset($params.placeElm);\r\n                        if (_offset.top <= e.pageY && e.pageY <= _offset.top + _offset.height &&\r\n                            _offset.left <= e.pageX && e.pageX <= _offset.left + _offset.width\r\n                           ) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                },\r\n                _fnDragStart = function (e, $params) {\r\n                    holderWasShown = false;\r\n\r\n                    if (!$params.hasTouch && (e.button === 2 || e.which === 3)) {\r\n                        // disable right click\r\n                        return;\r\n                    }\r\n                    if (e.uiTreeDragging || (e.originalEvent && e.originalEvent.uiTreeDragging)) { // event has already fired in other scope.\r\n                        return;\r\n                    }\r\n                    // the element which is clicked.\r\n                    var eventElm = angular.element(e.target),\r\n                        eventScope = eventElm.scope();\r\n                    if (!eventScope || !eventScope.$type) {\r\n                        return;\r\n                    }\r\n                    // if (eventScope.$type !== 'TreeDnDNode') { // Check if it is a node or a handle\r\n                    //     return;\r\n                    // }\r\n\r\n                    var currentNode = eventScope.$parent.$modelValue;\r\n                    if (eventScope.$type !== 'TreeDnDNodeHandle') { // If the node has a handle, then it should be clicked by the handle\r\n                        if (eventScope.hasMultiSelect && currentNode && currentNode.parentId !== null) {\r\n                            if (e.ctrlKey) {\r\n                                lastSelectedNode = currentNode;\r\n                                currentNode.__selected = !currentNode.__selected;\r\n                            } else if (e.shiftKey) {\r\n                                var groupNodes = eventScope.$parent.$parent.$parent.$modelValue.__children__;\r\n                                var lastSelectedNodeIdx = (lastSelectedNode && groupNodes.includes(lastSelectedNode)) ? groupNodes.indexOf(lastSelectedNode) : 0;\r\n                                var newSelectedNodeIdx = groupNodes.indexOf(currentNode);\r\n                                var lowerIdx = lastSelectedNodeIdx < newSelectedNodeIdx ? lastSelectedNodeIdx : newSelectedNodeIdx;\r\n                                var higherIdx = lastSelectedNodeIdx > newSelectedNodeIdx ? lastSelectedNodeIdx : newSelectedNodeIdx;\r\n\r\n                                $rootScope.resetNodesSelected();\r\n                                lastSelectedNode = groupNodes[lastSelectedNodeIdx]\r\n\r\n                                for (var idx = lowerIdx; idx <= higherIdx; idx++) {\r\n                                    groupNodes[idx].__selected = true;\r\n                                    nodesSelected.push(groupNodes[idx]);\r\n                                }\r\n                            } else {\r\n                                $rootScope.resetNodesSelected();\r\n                                lastSelectedNode = currentNode;\r\n                                currentNode.__selected = true;\r\n                            }\r\n\r\n                            // Add or remove the current node from selected nodes\r\n                            if (nodesSelected.every(function (node) { return node !== currentNode; }) && currentNode.__selected) {\r\n                                nodesSelected.push(currentNode);\r\n                            } else if (nodesSelected.includes(currentNode) && !currentNode.__selected) {\r\n                                nodesSelected.splice(nodesSelected.indexOf(currentNode), 1);\r\n                            }\r\n                        }\r\n                        return;\r\n                    }\r\n                    if (!nodesSelected.includes(currentNode)) {\r\n                        $rootScope.resetNodesSelected();\r\n                    }\r\n\r\n                    var eventElmTagName = eventElm.prop('tagName').toLowerCase(),\r\n                        dragScope,\r\n                        _$scope = $params.$scope;\r\n                    if (eventElmTagName === 'input'\r\n                        || eventElmTagName === 'textarea'\r\n                        || eventElmTagName === 'button'\r\n                        || eventElmTagName === 'select') { // if it's a input or button, ignore it\r\n                        return;\r\n                    }\r\n                    // check if it or it's parents has a 'data-nodrag' attribute\r\n                    while (eventElm && eventElm[0] && eventElm[0] !== $params.element) {\r\n                        if ($TreeDnDHelper.nodrag(eventElm)) { // if the node mark as `nodrag`, DONOT drag it.\r\n                            return;\r\n                        }\r\n                        eventElm = eventElm.parent();\r\n                    }\r\n\r\n                    e.uiTreeDragging = true; // stop event bubbling\r\n                    if (e.originalEvent) {\r\n                        e.originalEvent.uiTreeDragging = true;\r\n                    }\r\n                    e.preventDefault();\r\n\r\n                    dragScope = eventScope.getScopeNode();\r\n\r\n                    $params.firstMoving = true;\r\n\r\n                    if (!_$scope.$callbacks.beforeDrag(dragScope)) {\r\n                        return;\r\n                    }\r\n\r\n                    var eventObj = $TreeDnDHelper.eventObj(e),\r\n                        tagName = dragScope.$element.prop('tagName').toLowerCase(),\r\n                        isTable = (tagName === 'tr');\r\n\r\n                    $params.dragInfo = $TreeDnDHelper.dragInfo(dragScope);\r\n\r\n                    _$scope.setDragging($params.dragInfo);\r\n\r\n                    $params.pos = $TreeDnDHelper.positionStarted(eventObj, dragScope.$element);\r\n\r\n                    if (isTable) {\r\n                        $params.dragElm = angular.element($params.$window.document.createElement('table'))\r\n                            .addClass(_$scope.$class.tree)\r\n                            .addClass(_$scope.$class.drag)\r\n                            .addClass(_$scope.$tree_class);\r\n                    } else {\r\n                        $params.dragElm = angular.element($params.$window.document.createElement('ul'))\r\n                            .addClass(_$scope.$class.drag)\r\n                            .addClass('tree-dnd-nodes')\r\n                            .addClass(_$scope.$tree_class);\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'width':   $TreeDnDHelper.width(dragScope.$element) + 'px',\r\n                            'z-index': 9995\r\n                        }\r\n                    );\r\n\r\n                    $params.offsetEdge = 0;\r\n                    var _width = $TreeDnDHelper.width(dragScope.$element),\r\n                        _scope = dragScope,\r\n                        _element = _scope.$element,\r\n                        _clone = null,\r\n                        _needCollapse = !!_$scope.enabledCollapse,\r\n                        _copied = false,\r\n                        _tbody = null;\r\n\r\n                    if (isTable) {\r\n                        $params.offsetEdge = $params.dragInfo.node.__level__ - 1;\r\n                        _tbody = angular.element($params.$window.document.createElement('tbody'));\r\n\r\n                        _$scope.for_all_descendants(\r\n                            $params.dragInfo.node, function (_node) {\r\n                                _scope = _$scope.getScope(_node);\r\n                                _element = _scope.$element;\r\n\r\n                                if (!_copied) {\r\n                                    _clone = _element.clone();\r\n\r\n                                    $TreeDnDHelper.replaceIndent(\r\n                                        _scope,\r\n                                        _clone,\r\n                                        _node.__level__ - $params.offsetEdge,\r\n                                        'padding-left'\r\n                                    );\r\n\r\n                                    _tbody.append(_clone);\r\n\r\n                                    // skip all, just clone parent\r\n                                    if (_needCollapse) {\r\n                                        _copied = true;\r\n                                    }\r\n                                }\r\n\r\n                                if (_$scope.enabledMove && _$scope.$class.hidden) {\r\n                                    _element.addClass(_$scope.$class.hidden);\r\n                                }\r\n                            }\r\n                        );\r\n\r\n                        $params.dragElm.append(_tbody);\r\n                    } else {\r\n\r\n                        if (!_needCollapse) {\r\n                            _clone = _element.clone();\r\n                        } else {\r\n                            var _holder = _scope.getElementChilds(),\r\n                                _swaper = angular.element(\"<swaped />\");\r\n\r\n                            // Insert tag `<holder>` & move _holder into tag `<swaper>`;\r\n                            _holder.after(angular.element(\"<holder />\"));\r\n                            _swaper.append(_holder);\r\n\r\n                            // Clone without Children & remove tag `<holder>`\r\n                            _clone = _element.clone();\r\n                            _clone.find(\"holder\").remove();\r\n\r\n                            // bring childs back frome `swaper` & remove tag `<swaper>`\r\n                            _element.find(\"holder\").replaceWith(_holder);\r\n\r\n                            // Reset & clear all;\r\n                            _swaper.remove();\r\n                            _holder = null;\r\n                        }\r\n\r\n                        $params.dragElm.append(_clone);\r\n                        if (_$scope.enabledMove && _$scope.$class.hidden) {\r\n                            _element.addClass(_$scope.$class.hidden);\r\n                        }\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'left': eventObj.pageX - $params.pos.offsetX + _$scope.$callbacks.calsIndent(\r\n                                $params.offsetEdge + 1,\r\n                                true,\r\n                                true\r\n                            )       + 'px',\r\n                            'top':  eventObj.pageY - $params.pos.offsetY + 'px'\r\n                        }\r\n                    );\r\n\r\n                    if (nodesSelected.length > 1) {\r\n                        $params.dragElm.append(angular.element('<div class=\"numBadge\">' + nodesSelected.length + '</div>'));\r\n                    }\r\n\r\n                    // moving item with descendant\r\n                    $params.$document.find('body').append($params.dragElm);\r\n                    if (_$scope.$callbacks.droppable()) {\r\n                        $params.placeElm = _$scope.initPlace(dragScope.$element, $params.dragElm);\r\n\r\n                        if (isTable) {\r\n                            $TreeDnDHelper.replaceIndent(_$scope, $params.placeElm, $params.dragInfo.node.__level__);\r\n                        }\r\n\r\n                        $params.placeElm.css('width', _width);\r\n                    }\r\n\r\n                    _$scope.showPlace();\r\n                    _$scope.targeting = true;\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.refreshStatus();\r\n                        _$scope.setPositionStatus(e);\r\n                    }\r\n\r\n                    angular.element($params.$document).bind('touchend', $params.dragEndEvent);\r\n                    angular.element($params.$document).bind('touchcancel', $params.dragEndEvent);\r\n                    angular.element($params.$document).bind('touchmove', $params.dragMoveEvent);\r\n                    angular.element($params.$document).bind('mouseup', $params.dragEndEvent);\r\n                    angular.element($params.$document).bind('mousemove', $params.dragMoveEvent);\r\n                    angular.element($params.$document).bind('mouseleave', $params.dragCancelEvent);\r\n\r\n                    $params.document_height = Math.max(\r\n                        $params.body.scrollHeight,\r\n                        $params.body.offsetHeight,\r\n                        $params.html.clientHeight,\r\n                        $params.html.scrollHeight,\r\n                        $params.html.offsetHeight\r\n                    );\r\n\r\n                    $params.document_width = Math.max(\r\n                        $params.body.scrollWidth,\r\n                        $params.body.offsetWidth,\r\n                        $params.html.clientWidth,\r\n                        $params.html.scrollWidth,\r\n                        $params.html.offsetWidth\r\n                    );\r\n                },\r\n                _fnDragMove = function (e, $params) {\r\n                    var _$scope = $params.$scope;\r\n                    if (!$params.dragStarted) {\r\n                        if (!$params.dragDelaying) {\r\n                            $params.dragStarted = true;\r\n                            _$scope.$safeApply(\r\n                                function () {\r\n                                    _$scope.$callbacks.dragStart($params.dragInfo);\r\n                                }\r\n                            );\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    if (!$params.dragElm) {\r\n                        return;\r\n                    }\r\n\r\n                    e.preventDefault();\r\n                    if ($params.$window.getSelection) {\r\n                        $params.$window.getSelection().removeAllRanges();\r\n                    } else if ($params.$window.document.selection) {\r\n                        $params.$window.document.selection.empty();\r\n                    }\r\n\r\n                    var eventObj = $TreeDnDHelper.eventObj(e),\r\n                        leftElmPos = eventObj.pageX - $params.pos.offsetX,\r\n                        topElmPos = eventObj.pageY - $params.pos.offsetY;\r\n\r\n                    //dragElm can't leave the screen on the left\r\n                    if (leftElmPos < 0) {\r\n                        leftElmPos = 0;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the top\r\n                    if (topElmPos < 0) {\r\n                        topElmPos = 0;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the bottom\r\n                    if ((topElmPos + 10) > $params.document_height) {\r\n                        topElmPos = $params.document_height - 10;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the right\r\n                    if ((leftElmPos + 10) > $params.document_width) {\r\n                        leftElmPos = $params.document_width - 10;\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'left': leftElmPos + _$scope.$callbacks.calsIndent(\r\n                                $params.offsetEdge + 1,\r\n                                true,\r\n                                true\r\n                            )       + 'px',\r\n                            'top':  topElmPos + 'px'\r\n                        }\r\n                    );\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.setPositionStatus(e);\r\n                    }\r\n\r\n                    var top_scroll = window.pageYOffset || $params.$window.document.documentElement.scrollTop,\r\n                        bottom_scroll = top_scroll + (window.innerHeight || $params.$window.document.clientHeight || $params.$window.document.clientHeight);\r\n                    // to scroll down if cursor y-position is greater than the bottom position the vertical scroll\r\n                    if (bottom_scroll < eventObj.pageY && bottom_scroll <= $params.document_height) {\r\n                        window.scrollBy(0, 10);\r\n                    }\r\n                    // to scroll top if cursor y-position is less than the top position the vertical scroll\r\n                    if (top_scroll > eventObj.pageY) {\r\n                        window.scrollBy(0, -10);\r\n                    }\r\n\r\n                    $TreeDnDHelper.positionMoved(e, $params.pos, $params.firstMoving);\r\n\r\n                    if ($params.firstMoving) {\r\n                        $params.firstMoving = false;\r\n                        return;\r\n                    }\r\n                    // check if add it as a child node first\r\n\r\n                    var targetX = eventObj.pageX - $params.$window.document.body.scrollLeft,\r\n                        targetY = eventObj.pageY - (window.pageYOffset || $params.$window.document.documentElement.scrollTop),\r\n\r\n                        targetElm,\r\n                        targetScope,\r\n                        targetBefore,\r\n                        targetOffset,\r\n                        tagName,\r\n                        isTable,\r\n                        isChanged = true,\r\n                        isVertical = true,\r\n                        isEmpty,\r\n                        isSwapped,\r\n                        _scope,\r\n                        _target,\r\n                        _parent,\r\n                        _info = $params.dragInfo,\r\n                        _move = _info.move,\r\n                        _drag = _info.node,\r\n                        _drop = _info.drop,\r\n                        treeScope = _info.target,\r\n                        fnSwapTree,\r\n                        isHolder = _fnPlaceHolder(e, $params);\r\n\r\n                    if (!isHolder) {\r\n                        $params.dragInfo.__abortDrag = true;\r\n                        /* when using elementFromPoint() inside an iframe, you have to call\r\n                             elementFromPoint() twice to make sure IE8 returns the correct value\r\n                             $params.$window.document.elementFromPoint(targetX, targetY);*/\r\n\r\n                        targetElm = angular.element(\r\n                            $params.$window.document.elementFromPoint(\r\n                                targetX,\r\n                                targetY\r\n                            )\r\n                        );\r\n\r\n                        targetScope = targetElm.scope();\r\n                        if (!targetScope) {\r\n                            return;\r\n                        }\r\n\r\n                        fnSwapTree = function () {\r\n                            treeScope = targetScope.getScopeTree();\r\n                            _target = _info.target;\r\n                            if (_info.target !== treeScope) {\r\n                                if (treeScope.$callbacks.droppable()) {\r\n                                    // Replace by place-holder new\r\n                                    _target.hidePlace();\r\n                                    _target.targeting = false;\r\n                                    treeScope.targeting = true;\r\n\r\n                                    _info.target = treeScope;\r\n                                    $params.placeElm = treeScope.initPlace(targetScope.$element, $params.dragElm);\r\n\r\n                                    _target = null;\r\n                                    isSwapped = true;\r\n                                } else {\r\n                                    // Not allowed Drop Item\r\n                                    return false;\r\n                                }\r\n                            }\r\n                            return true;\r\n                        };\r\n\r\n                        var abortDrag = function () {\r\n                            $params.dragInfo.__abortDrag = true;\r\n                            holderWasShown = false;\r\n                            if (_$scope.enabledStatus) {\r\n                                _$scope.hideStatus();\r\n                            }\r\n                            _$scope.$$apply = false;\r\n                        };\r\n\r\n                        if (angular.isFunction(targetScope.getScopeNode)) {\r\n                            targetScope = targetScope.getScopeNode();\r\n\r\n                            if (!fnSwapTree()) {\r\n                                return;\r\n                            }\r\n                        } else {\r\n                            if (holderWasShown) {\r\n                                setTimeout(function () {\r\n                                    // setTimeout is necessary because otherwise the placeholder will not be deleted in some cases\r\n                                    // see: https://stackoverflow.com/questions/779379/why-is-settimeoutfn-0-sometimes-useful\r\n                                    treeScope.placeElm.remove();\r\n                                    abortDrag();\r\n                                }, 0);\r\n                                return;\r\n                            }\r\n\r\n                            if (targetScope.$type === 'TreeDnDNodes' || targetScope.$type === 'TreeDnD') {\r\n                                if (targetScope.tree_nodes) {\r\n                                    if (targetScope.tree_nodes.length === 0) {\r\n                                        if (!fnSwapTree()) {\r\n                                            return;\r\n                                        }\r\n                                        // Empty\r\n                                        isEmpty = true;\r\n                                    }\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            } else {\r\n                                return;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        holderWasShown = true;\r\n                        $params.dragInfo.__abortDrag = false;\r\n                    }\r\n\r\n                    if ($params.pos.dirAx && !isSwapped || isHolder) {\r\n                        isVertical = false;\r\n                        targetScope = _info.scope;\r\n                    }\r\n\r\n                    if (!targetScope.$element && !targetScope) {\r\n                        return;\r\n                    }\r\n\r\n                    tagName = targetScope.$element.prop('tagName').toLowerCase();\r\n                    isTable = (tagName === 'tbody' || tagName === 'table' || tagName === 'tr' || tagName === 'td');\r\n                    if (isEmpty) {\r\n                        _move.parent = null;\r\n                        _move.pos = 0;\r\n\r\n                        _drop = null;\r\n                    } else {\r\n                        // move vertical\r\n                        if (isVertical) {\r\n                            targetElm = targetScope.$element; // Get the element of tree-dnd-node\r\n\r\n                            targetOffset = $TreeDnDHelper.offset(targetElm);\r\n\r\n                            if (targetScope.horizontal && !isTable) {\r\n                                targetBefore = eventObj.pageX < (targetOffset.left + $TreeDnDHelper.width(targetElm) / 2);\r\n                            } else {\r\n                                if (isTable) {\r\n                                    targetBefore = eventObj.pageY < (targetOffset.top + $TreeDnDHelper.height(targetElm) / 2);\r\n                                } else {\r\n                                    var _height = $TreeDnDHelper.height(targetElm);\r\n\r\n                                    if (targetScope.getElementChilds()) {\r\n                                        _height -= -$TreeDnDHelper.height(targetScope.getElementChilds());\r\n                                    }\r\n\r\n                                    if (eventObj.pageY > targetOffset.top + _height) {\r\n                                        return;\r\n                                    }\r\n\r\n                                    targetBefore = eventObj.pageY < (targetOffset.top + _height / 2);\r\n                                }\r\n                            }\r\n\r\n                            if (!angular.isFunction(targetScope.getData)) {\r\n                                return;\r\n                            }\r\n\r\n                            _target = targetScope.getData();\r\n                            _parent = targetScope.getNode(_target.__parent_real__);\r\n\r\n                            if (targetBefore) {\r\n                                var _prev = targetScope.getPrevSibling(_target);\r\n\r\n                                _move.parent = _parent;\r\n                                _move.pos = angular.isDefined(_prev) ? _prev.__index__ + 1 : 0;\r\n\r\n                                _drop = _prev;\r\n                            } else {\r\n                                if (_target.__expanded__ && !(_target.__children__.length === 1 && _target.__index_real__ === _drag.__parent_real__)) {\r\n                                    _move.parent = _target;\r\n                                    _move.pos = 0;\r\n\r\n                                    _drop = null;\r\n                                } else {\r\n                                    _move.parent = _parent;\r\n                                    _move.pos = _target.__index__ + 1;\r\n\r\n                                    _drop = _target;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            // move horizontal\r\n                            if ($params.pos.dirAx && $params.pos.distAxX >= treeScope.dragBorder) {\r\n                                $params.pos.distAxX = 0;\r\n                                // increase horizontal level if previous sibling exists and is not collapsed\r\n                                if ($params.pos.distX > 0) {\r\n                                    _parent = _drop;\r\n                                    if (!_parent) {\r\n                                        if (_move.pos - 1 >= 0) {\r\n                                            _parent = _move.parent.__children__[_move.pos - 1];\r\n                                        } else {\r\n                                            return;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (_info.drag === _info.target && _parent === _drag && _$scope.enabledMove) {\r\n                                        _parent = treeScope.getPrevSibling(_parent);\r\n                                    }\r\n\r\n                                    if (_parent && _parent.__visible__) {\r\n                                        var _len = _parent.__children__.length;\r\n\r\n                                        _move.parent = _parent;\r\n                                        _move.pos = _len;\r\n\r\n                                        if (_len > 0) {\r\n                                            _drop = _parent.__children__[_len - 1];\r\n                                        } else {\r\n                                            _drop = null;\r\n                                        }\r\n                                    } else {\r\n                                        // Not changed\r\n                                        return;\r\n                                    }\r\n                                } else if ($params.pos.distX < 0) {\r\n                                    _target = _move.parent;\r\n                                    if (_target &&\r\n                                        (_target.__children__.length === 0 ||\r\n                                         _target.__children__.length - 1 < _move.pos ||\r\n                                         (_info.drag === _info.target &&\r\n                                          _target.__index_real__ === _drag.__parent_real__ &&\r\n                                          _target.__children__.length - 1 === _drag.__index__ && _$scope.enabledMove))\r\n                                       ) {\r\n                                        _parent = treeScope.getNode(_target.__parent_real__);\r\n\r\n                                        _move.parent = _parent;\r\n                                        _move.pos = _target.__index__ + 1;\r\n\r\n                                        _drop = _target;\r\n                                    } else {\r\n                                        // Not changed\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            } else {\r\n                                // limited\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        if (treeScope.onlyDeepestDrop && _drop && _drag !== _drop) {\r\n                            _parent = _drop;\r\n                            if (_parent && _parent.__visible__) {\r\n                                var _len = _parent.__children__.length;\r\n                                _move.parent = _parent;\r\n                                _move.pos = _len;\r\n                                _drop = null;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (_info.drag === _info.target &&\r\n                        _move.parent &&\r\n                        _drag.__parent_real__ === _move.parent.__index_real__ &&\r\n                        _drag.__index__ === _move.pos\r\n                       ) {\r\n                        isChanged = false;\r\n                    }\r\n\r\n                    if (treeScope.$callbacks.accept(_info, _move, isChanged)) {\r\n                        _info.move = _move;\r\n                        _info.drop = _drop;\r\n                        _info.changed = isChanged;\r\n                        _info.scope = targetScope;\r\n\r\n                        if (isTable) {\r\n                            $TreeDnDHelper.replaceIndent(\r\n                                treeScope,\r\n                                $params.placeElm,\r\n                                angular.isUndefinedOrNull(_move.parent) ? 1 : _move.parent.__level__ + 1\r\n                            );\r\n\r\n                            if (_drop) {\r\n                                _parent = (_move.parent ? _move.parent.__children__ : null ) || _info.target.treeData;\r\n\r\n                                if (_drop.__index__ < _parent.length - 1) {\r\n                                    // Find fast\r\n                                    _drop = _parent[_drop.__index__ + 1];\r\n                                    _scope = _info.target.getScope(_drop);\r\n                                    _scope.$element[0].parentNode.insertBefore(\r\n                                        $params.placeElm[0],\r\n                                        _scope.$element[0]\r\n                                    );\r\n                                } else {\r\n                                    _target = _info.target.getLastDescendant(_drop);\r\n                                    _scope = _info.target.getScope(_target);\r\n                                    _scope.$element.after($params.placeElm);\r\n                                }\r\n                            } else {\r\n                                _scope = _info.target.getScope(_move.parent);\r\n                                if (_scope) {\r\n                                    if (_move.parent) {\r\n                                        _scope.$element.after($params.placeElm);\r\n\r\n                                    } else {\r\n                                        _scope.getElementChilds().prepend($params.placeElm);\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else {\r\n                            _scope = _info.target.getScope(_drop || _move.parent);\r\n\r\n                            if (_drop) {\r\n                                _scope.$element.after($params.placeElm);\r\n                            } else {\r\n                                _scope.getElementChilds().prepend($params.placeElm);\r\n                            }\r\n                        }\r\n\r\n                        treeScope.showPlace();\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragMove(_info);\r\n                            }\r\n                        );\r\n                    }\r\n                },\r\n                _fnDragEnd = function (e, $params) {\r\n                    holderWasShown = false;\r\n\r\n                    e.preventDefault();\r\n                    if ($params.dragElm) {\r\n                        var _passed = false,\r\n                            _$scope = $params.$scope,\r\n                            _scope = _$scope.getScope($params.dragInfo.node),\r\n                            tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                            _isTable = (tagName === 'tr'),\r\n                            _element = _scope.$element;\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _passed = _$scope.$callbacks.beforeDrop($params.dragInfo);\r\n                            }\r\n                        );\r\n\r\n                        // rollback all\r\n                        if (_isTable) {\r\n                            _$scope.for_all_descendants(\r\n                                $params.dragInfo.node, function (_node) {\r\n                                    _scope = _$scope.getScope(_node);\r\n                                    _element = _scope.$element;\r\n\r\n                                    if (_scope.$class.hidden) {\r\n                                        _element.removeClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                            );\r\n                        } else {\r\n                            if (_$scope.$class.hidden) {\r\n                                _element.removeClass(_$scope.$class.hidden);\r\n                            }\r\n                        }\r\n\r\n                        $params.dragElm.remove();\r\n                        $params.dragElm = null;\r\n\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.hideStatus();\r\n                        }\r\n\r\n                        var _status = false;\r\n                        if (_$scope.$$apply) {\r\n                            _$scope.$safeApply(\r\n                                function () {\r\n                                    $params.dragInfo.__multipleNodes = nodesSelected;\r\n                                    $rootScope.resetNodesSelected();\r\n\r\n                                    if (!$params.dragInfo.__abortDrag) {\r\n                                        _status = _$scope.$callbacks.dropped(\r\n                                            $params.dragInfo,\r\n                                            _passed,\r\n                                            _$scope.enabledMove\r\n                                        );\r\n                                    }\r\n                                }\r\n                            );\r\n                        } else {\r\n                            if ($params && $params.pos === null) {\r\n                                _fnBindDrag($params);\r\n                            }\r\n                        }\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragStop($params.dragInfo, _status);\r\n                            }\r\n                        );\r\n\r\n                        $params.dragInfo.target.hidePlace();\r\n                        $params.dragInfo.target.targeting = false;\r\n\r\n                        $params.dragInfo = null;\r\n                        _$scope.$$apply = false;\r\n                        _$scope.setDragging(null);\r\n                    }\r\n\r\n                    angular.element($params.$document).unbind('touchend', $params.dragEndEvent); // Mobile\r\n                    angular.element($params.$document).unbind('touchcancel', $params.dragEndEvent); // Mobile\r\n                    angular.element($params.$document).unbind('touchmove', $params.dragMoveEvent); // Mobile\r\n                    angular.element($params.$document).unbind('mouseup', $params.dragEndEvent);\r\n                    angular.element($params.$document).unbind('mousemove', $params.dragMoveEvent);\r\n                    angular.element($params.$window.document.body).unbind('mouseleave', $params.dragCancelEvent);\r\n                },\r\n                _fnDragStartEvent = function (e, $params) {\r\n                    if ($params.$scope.$callbacks.draggable()) {\r\n                        _fnDragStart(e, $params);\r\n                    }\r\n                },\r\n                _fnBindDrag = function ($params) {\r\n                    $params.element.bind(\r\n                        'touchstart mousedown', function (e) {\r\n                            $params.dragDelaying = true;\r\n                            $params.dragStarted = false;\r\n                            _fnDragStartEvent(e, $params);\r\n                            $params.dragTimer = $timeout(\r\n                                function () {\r\n                                    $params.dragDelaying = false;\r\n                                }, $params.$scope.dragDelay\r\n                            );\r\n                        }\r\n                    );\r\n                    $params.element.bind(\r\n                        'touchend touchcancel mouseup', function () {\r\n                            $timeout.cancel($params.dragTimer);\r\n                        }\r\n                    );\r\n                },\r\n                _fnKeydownHandler = function (e, $params) {\r\n                    var _$scope = $params.$scope;\r\n                    if (e.keyCode === 27) {\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.hideStatus();\r\n                        }\r\n\r\n                        _$scope.$$apply = false;\r\n                        _fnDragEnd(e, $params);\r\n                    } else {\r\n                        if (_$scope.enabledHotkey && e.shiftKey) {\r\n                            _$scope.enableMove(true);\r\n                            if (_$scope.enabledStatus) {\r\n                                _$scope.refreshStatus();\r\n                            }\r\n\r\n                            if (!$params.dragInfo) {\r\n                                return;\r\n                            }\r\n\r\n                            var _scope = _$scope.getScope($params.dragInfo.node),\r\n                                tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                                _element = _scope.$element;\r\n\r\n                            if (tagName === 'tr') {\r\n                                _$scope.for_all_descendants(\r\n                                    $params.dragInfo.node, function (_node) {\r\n                                        _scope = _$scope.getScope(_node);\r\n                                        _element = _scope.$element;\r\n\r\n                                        if (_$scope.$class.hidden) {\r\n                                            _element.addClass(_$scope.$class.hidden);\r\n                                        }\r\n                                    }\r\n                                );\r\n                            } else {\r\n                                if (_$scope.$class.hidden) {\r\n                                    _element.addClass(_$scope.$class.hidden);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                _fnKeyupHandler = function (e, $params) {\r\n                    var _$scope = $params.$scope;\r\n                    if (_$scope.enabledHotkey && !e.shiftKey) {\r\n                        _$scope.enableMove(false);\r\n\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.refreshStatus();\r\n                        }\r\n\r\n                        if (!$params.dragInfo) {\r\n                            return;\r\n                        }\r\n\r\n                        var _scope = _$scope.getScope($params.dragInfo.node),\r\n                            tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                            _element = _scope.$element;\r\n\r\n                        if (tagName === 'tr') {\r\n                            _$scope.for_all_descendants(\r\n                                $params.dragInfo.node, function (_node) {\r\n\r\n                                    _scope = _$scope.getScope(_node);\r\n                                    _element = _scope.$element;\r\n\r\n                                    if (_$scope.$class.hidden) {\r\n                                        _element.removeClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                            );\r\n                        } else {\r\n                            if (_$scope.$class.hidden) {\r\n                                _element.removeClass(_$scope.$class.hidden);\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n\r\n                _$init = function (scope, element, $window, $document) {\r\n                    var $params = {\r\n                        hasTouch:        ('ontouchstart' in window),\r\n                        firstMoving:     null,\r\n                        dragInfo:        null,\r\n                        pos:             null,\r\n                        placeElm:        null,\r\n                        dragElm:         null,\r\n                        dragDelaying:    true,\r\n                        dragStarted:     false,\r\n                        dragTimer:       null,\r\n                        body:            document.body,\r\n                        html:            document.documentElement,\r\n                        document_height: null,\r\n                        document_width:  null,\r\n                        offsetEdge:      null,\r\n                        $scope:          scope,\r\n                        $window:         $window,\r\n                        $document:       $document,\r\n                        element:         element,\r\n                        bindDrag:        function () {\r\n                            _fnBindDrag($params);\r\n                        },\r\n                        dragEnd:         function (e) {\r\n                            _fnDragEnd(e, $params);\r\n                        },\r\n                        dragMoveEvent:   function (e) {\r\n                            _fnDragMove(e, $params)\r\n                        },\r\n                        dragEndEvent:    function (e) {\r\n                            scope.$$apply = true;\r\n                            _fnDragEnd(e, $params);\r\n                        },\r\n                        dragCancelEvent: function (e) {\r\n                            _fnDragEnd(e, $params);\r\n                        }\r\n                    },\r\n                        keydownHandler = function (e) {\r\n                            return _fnKeydownHandler(e, $params);\r\n                        },\r\n                        keyupHandler = function (e) {\r\n                            return _fnKeyupHandler(e, $params);\r\n                        };\r\n\r\n                    scope.dragEnd = function (e) {\r\n                        $params.dragEnd(e);\r\n                    };\r\n\r\n                    $params.bindDrag();\r\n\r\n                    angular.element($window.document.body).bind(\"keydown\", keydownHandler);\r\n                    angular.element($window.document.body).bind(\"keyup\", keyupHandler);\r\n                    //unbind handler that retains scope\r\n                    scope.$on(\r\n                        '$destroy', function () {\r\n                            angular.element($window.document.body).unbind(\"keydown\", keydownHandler);\r\n                            angular.element($window.document.body).unbind(\"keyup\", keyupHandler);\r\n                            if (scope.statusElm) {\r\n                                scope.statusElm.remove();\r\n                            }\r\n\r\n                            if (scope.placeElm) {\r\n                                scope.placeElm.remove();\r\n                            }\r\n                        }\r\n                    );\r\n                };\r\n\r\n            return _$init;\r\n        }\r\n    ]\r\n).factory(\r\n    '$TreeDnDControl', function ($rootScope) {\r\n        var _target, _parent,\r\n            i, len,\r\n            fnSetCollapse = function fnSetCollapse(node) {\r\n                node.__expanded__ = false;\r\n            },\r\n            fnSetExpand = function fnSetExpand(node) {\r\n                node.__expanded__ = true;\r\n            },\r\n\r\n            _$init = function _$init(scope) {\r\n                var n, tree = {\r\n                    selected_node:                     null,\r\n                    for_all_descendants:               scope.for_all_descendants,\r\n                    select_node:                       function (node) {\r\n                        if (!node) {\r\n                            if (tree.selected_node) {\r\n                                delete(tree.selected_node.__selected__);\r\n                            }\r\n                            tree.selected_node = null;\r\n                            return null;\r\n                        }\r\n\r\n                        if (node !== tree.selected_node) {\r\n                            if (tree.selected_node) {\r\n                                delete(tree.selected_node.__selected__);\r\n                            }\r\n                            node.__selected__ = true;\r\n                            tree.selected_node = node;\r\n                            tree.expand_all_parents(node);\r\n                            if (angular.isFunction(tree.on_select)) {\r\n                                tree.on_select(node);\r\n                            }\r\n                        }\r\n                        return node;\r\n                    },\r\n                    deselect_node:                     function () {\r\n                        _target = null;\r\n                        if (tree.selected_node) {\r\n                            delete(tree.selected_node.__selected__);\r\n                            _target = tree.selected_node;\r\n                            tree.selected_node = null;\r\n                        }\r\n                        return _target;\r\n                    },\r\n                    get_parent:                        function (node) {\r\n                        if (node && node.__parent_real__ !== null) {\r\n                            return scope.tree_nodes[node.__parent_real__];\r\n                        }\r\n                        return null;\r\n                    },\r\n                    for_all_ancestors:                 function (child, fn) {\r\n                        _parent = tree.get_parent(child);\r\n                        if (_parent) {\r\n                            if (fn(_parent)) {\r\n                                return false;\r\n                            }\r\n\r\n                            return tree.for_all_ancestors(_parent, fn);\r\n                        }\r\n                        return true;\r\n                    },\r\n                    expand_all_parents:                function (child) {\r\n                        return tree.for_all_ancestors(\r\n                            child, fnSetExpand\r\n                        );\r\n                    },\r\n                    reload_data:                       function () {\r\n                        return scope.reload_data();\r\n                    },\r\n                    add_node:                          function (parent, new_node, index) {\r\n                        if (typeof index !== 'number') {\r\n                            if (parent) {\r\n                                parent.__children__.push(new_node);\r\n                                parent.__expanded__ = true;\r\n                            } else {\r\n                                scope.treeData.push(new_node);\r\n                            }\r\n                        } else {\r\n                            if (parent) {\r\n                                parent.__children__.splice(index, 0, new_node);\r\n                                parent.__expanded__ = true;\r\n                            } else {\r\n                                scope.treeData.splice(index, 0, new_node);\r\n                            }\r\n                        }\r\n                        return new_node;\r\n                    },\r\n                    add_node_root:                     function (new_node) {\r\n                        tree.add_node(null, new_node);\r\n                        return new_node;\r\n                    },\r\n                    expand_all:                        function () {\r\n                        len = scope.treeData.length;\r\n                        for (i = 0; i < len; i++) {\r\n                            tree.for_all_descendants(\r\n                                scope.treeData[i], fnSetExpand\r\n                            );\r\n                        }\r\n                    },\r\n                    collapse_all:                      function () {\r\n                        len = scope.treeData.length;\r\n                        for (i = 0; i < len; i++) {\r\n                            tree.for_all_descendants(\r\n                                scope.treeData[i], fnSetCollapse\r\n                            );\r\n                        }\r\n                    },\r\n                    remove_node:                       function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            if (node.__parent_real__ !== null) {\r\n                                _parent = tree.get_parent(node).__children__;\r\n                            } else {\r\n                                _parent = scope.treeData;\r\n                            }\r\n\r\n                            _parent.splice(node.__index__, 1);\r\n\r\n                            if (tree.selected_node === node) {\r\n                                tree.selected_node = null;\r\n                            }\r\n                        }\r\n                    },\r\n                    expand_node:                       function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            node.__expanded__ = true;\r\n                            return node;\r\n                        }\r\n                    },\r\n                    collapse_node:                     function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            node.__expanded__ = false;\r\n                            return node;\r\n                        }\r\n                    },\r\n                    get_selected_node:                 function () {\r\n                        return tree.selected_node;\r\n                    },\r\n                    get_first_node:                    function () {\r\n                        len = scope.treeData.length;\r\n                        if (len > 0) {\r\n                            return scope.treeData[0];\r\n                        }\r\n                        return null;\r\n                    },\r\n                    get_children:                      function (node) {\r\n                        return node.__children__;\r\n                    },\r\n                    get_siblings:                      function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            _parent = tree.get_parent(node);\r\n                            if (_parent) {\r\n                                _target = _parent.__children__;\r\n                            } else {\r\n                                _target = scope.treeData;\r\n                            }\r\n                            return _target;\r\n                        }\r\n                    },\r\n                    get_next_sibling:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            _target = tree.get_siblings(node);\r\n                            n = _target.length;\r\n                            if (node.__index__ < n) {\r\n                                return _target[node.__index__ + 1];\r\n                            }\r\n                        }\r\n                    },\r\n                    get_prev_sibling:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n                        _target = tree.get_siblings(node);\r\n                        if (node.__index__ > 0) {\r\n                            return _target[node.__index__ - 1];\r\n                        }\r\n                    },\r\n                    get_first_child:                   function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            _target = node.__children__;\r\n                            if (_target && _target.length > 0) {\r\n                                return node.__children__[0];\r\n                            }\r\n                        }\r\n                        return null;\r\n                    },\r\n                    get_closest_ancestor_next_sibling: function (node) {\r\n                        node = node || tree.selected_node;\r\n                        _target = tree.get_next_sibling(node);\r\n                        if (_target) {\r\n                            return _target;\r\n                        }\r\n\r\n                        _parent = tree.get_parent(node);\r\n                        return tree.get_closest_ancestor_next_sibling(_parent);\r\n                    },\r\n                    get_next_node:                     function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_first_child(node);\r\n                            if (_target) {\r\n                                return _target;\r\n                            } else {\r\n                                return tree.get_closest_ancestor_next_sibling(node);\r\n                            }\r\n                        }\r\n                    },\r\n                    get_prev_node:                     function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_prev_sibling(node);\r\n                            if (_target) {\r\n                                return tree.get_last_descendant(_target);\r\n                            }\r\n\r\n                            _parent = tree.get_parent(node);\r\n                            return _parent;\r\n                        }\r\n                    },\r\n                    get_last_descendant:               scope.getLastDescendant,\r\n                    select_parent_node:                function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _parent = tree.get_parent(node);\r\n                            if (_parent) {\r\n                                return tree.select_node(_parent);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_first_node:                 function () {\r\n                        return tree.select_node(tree.get_first_node());\r\n                    },\r\n                    select_next_sibling:               function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_next_sibling(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_prev_sibling:               function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_prev_sibling(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_next_node:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_next_node(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_prev_node:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_prev_node(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    reset_selected_nodes:                  function (node) {\r\n                        $rootScope.resetNodesSelected();\r\n                    }\r\n                };\r\n                angular.extend(scope.tree, tree);\r\n                return scope.tree;\r\n            };\r\n\r\n        return _$init;\r\n    }\r\n);\n\nangular.module('template/TreeDnD/TreeDnD.html', []).run(\r\n    [\r\n        '$templateCache', function ($templateCache) {\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnD.html',\r\n            [\"<table ng-class=\\\"$tree_class\\\">\",\r\n             \"    <thead>\",\r\n             \"  <tr>\",\r\n             \"     <th ng-class=\\\"expandingProperty.titleClass\\\" ng-style=\\\"expandingProperty.titleStyle\\\">\",\r\n             \"         {{expandingProperty.displayName || expandingProperty.field || expandingProperty}}\",\r\n             \"        <\\/th>\",\r\n             \"        <th ng-repeat=\\\"col in colDefinitions\\\" ng-class=\\\"col.titleClass\\\" ng-style=\\\"col.titleStyle\\\">\",\r\n             \"         {{col.displayName || col.field}}\",\r\n             \"     </th>\",\r\n             \"    </tr>\",\r\n             \"    </thead>\",\r\n             \" <tbody tree-dnd-nodes=\\\"tree_nodes\\\">\",\r\n             \"  <tr tree-dnd-node=\\\"node\\\" ng-repeat=\\\"node in nodes track by node.__hashKey__ \\\" ng-show=\\\"node.__visible__\\\"\",\r\n             \"       ng-click=\\\"onSelect(node)\\\" ng-class=\\\"(node.__selected__ ? ' active':'')\\\">\",\r\n             \"        <td ng-if=\\\"!expandingProperty.template\\\" tree-dnd-node-handle\",\r\n             \"         ng-style=\\\"expandingProperty.cellStyle ? expandingProperty.cellStyle : {'padding-left': $callbacks.calsIndent(node.__level__)}\\\"\",\r\n             \"          ng-class=\\\"expandingProperty.cellClass\\\"\",\r\n             \"            compile=\\\"expandingProperty.cellTemplate\\\">\",\r\n             \"              <a data-nodrag>\",\r\n             \"                  <i ng-class=\\\"$icon_class\\\" ng-click=\\\"toggleExpand(node)\\\"\",\r\n             \"                     class=\\\"tree-icon\\\"></i>\",\r\n             \"              </a>\",\r\n             \"             {{node[expandingProperty.field] || node[expandingProperty]}}\",\r\n             \"       </td>\",\r\n             \"        <td ng-if=\\\"expandingProperty.template\\\" compile=\\\"expandingProperty.template\\\"></td>\",\r\n             \"        <td ng-repeat=\\\"col in colDefinitions\\\" ng-class=\\\"col.cellClass\\\" ng-style=\\\"col.cellStyle\\\"\",\r\n             \"            compile=\\\"col.cellTemplate\\\">\",\r\n             \"            {{node[col.field]}}\",\r\n             \"       </td>\",\r\n             \"    </tr>\",\r\n             \"    </tbody>\",\r\n             \"</table>\"].join('')\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusCopy.html',\r\n            \"<label><i class=\\\"fa fa-copy\\\"></i>&nbsp;<b>Copying</b></label>\"\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusMove.html',\r\n            '<label><i class=\"fa fa-file-text\"></i>&nbsp;<b>Moving</b></label>'\r\n        );\r\n    }]\r\n);\r\n\r\n}).call(window);"]}